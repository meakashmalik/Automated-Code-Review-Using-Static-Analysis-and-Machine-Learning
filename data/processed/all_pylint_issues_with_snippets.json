[
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 9,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (112/100)",
        "module": "birthDateToCurrentAge",
        "line_content": "today_day = int(today.strftime(\"%d\"))       # assigning  current date to individual variable for calculation",
        "line_number": 9,
        "context_before": [
            "age_year = 0",
            ""
        ],
        "context_after": [
            "today_month = int(today.strftime(\"%m\"))",
            "today_year = int(today.strftime(\"%y\"))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 32,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (104/100)",
        "module": "birthDateToCurrentAge",
        "line_content": "birthDate = input('Enter your birth date in YYYY-MM-DD format:')        # taking input of date from user",
        "line_number": 32,
        "context_before": [
            "today = date.today()                                                    # today's date",
            "print(\"today's date is:\", today)"
        ],
        "context_after": [
            "year, month, day = map(int, birthDate.split('-'))",
            "if month > 12 or day > 31 or year < int(today.strftime(\"%y\")):          # invalid date checking"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"birthDateToCurrentAge\" doesn't conform to snake_case naming style",
        "module": "birthDateToCurrentAge",
        "line_content": "from datetime import date                       # importing the date and time library",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"ageCalculator\" doesn't conform to snake_case naming style",
        "module": "birthDateToCurrentAge",
        "line_content": "def ageCalculator(years, months, days):         # creating a function for age calculation",
        "line_number": 4,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "age_day = 0                                 # initiating calculated age to 0",
            "age_months = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 5,
        "column": 4,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'age_day'",
        "module": "birthDateToCurrentAge",
        "line_content": "age_day = 0                                 # initiating calculated age to 0",
        "line_number": 5,
        "context_before": [
            "",
            "def ageCalculator(years, months, days):         # creating a function for age calculation"
        ],
        "context_after": [
            "age_months = 0",
            "age_year = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 6,
        "column": 4,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'age_months'",
        "module": "birthDateToCurrentAge",
        "line_content": "age_months = 0",
        "line_number": 6,
        "context_before": [
            "def ageCalculator(years, months, days):         # creating a function for age calculation",
            "age_day = 0                                 # initiating calculated age to 0"
        ],
        "context_after": [
            "age_year = 0",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 7,
        "column": 4,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'age_year'",
        "module": "birthDateToCurrentAge",
        "line_content": "age_year = 0",
        "line_number": 7,
        "context_before": [
            "age_day = 0                                 # initiating calculated age to 0",
            "age_months = 0"
        ],
        "context_after": [
            "",
            "today_day = int(today.strftime(\"%d\"))       # assigning  current date to individual variable for calculation"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/birthDateToCurrentAge.py",
        "line": 36,
        "column": 4,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "birthDateToCurrentAge",
        "line_content": "exit()",
        "line_number": 36,
        "context_before": [
            "if month > 12 or day > 31 or year < int(today.strftime(\"%y\")):          # invalid date checking",
            "print('invalid date')"
        ],
        "context_after": [
            "print(\"your date of birth is:\", birthDate)",
            "ageCalculator(year, month, day)                                         # calling function"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Merge_csv_files/merge_csv_files.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pandas'",
        "module": "merge_csv_files",
        "line_content": "import pandas as pd",
        "line_number": 2,
        "context_before": [
            "import glob"
        ],
        "context_after": [
            "",
            "extension = 'csv'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Merge_csv_files/merge_csv_files.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"extension\" doesn't conform to UPPER_CASE naming style",
        "module": "merge_csv_files",
        "line_content": "extension = 'csv'",
        "line_number": 4,
        "context_before": [
            "import pandas as pd",
            ""
        ],
        "context_after": [
            "all_filenames = [i for i in glob.glob('*.{}'.format(extension))]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Merge_csv_files/merge_csv_files.py",
        "line": 5,
        "column": 16,
        "message_id": "R1721",
        "message_type": "refactor",
        "symbol": "unnecessary-comprehension",
        "message": "Unnecessary use of a comprehension, use list(glob.glob('*.{}'.format(extension))) instead.",
        "module": "merge_csv_files",
        "line_content": "all_filenames = [i for i in glob.glob('*.{}'.format(extension))]",
        "line_number": 5,
        "context_before": [
            "",
            "extension = 'csv'"
        ],
        "context_after": [
            "",
            "combined_csv = pd.concat([pd.read_csv(f) for f in all_filenames ])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Merge_csv_files/merge_csv_files.py",
        "line": 5,
        "column": 38,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "merge_csv_files",
        "line_content": "all_filenames = [i for i in glob.glob('*.{}'.format(extension))]",
        "line_number": 5,
        "context_before": [
            "",
            "extension = 'csv'"
        ],
        "context_after": [
            "",
            "combined_csv = pd.concat([pd.read_csv(f) for f in all_filenames ])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 38,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "calculate",
        "line_content": "if (judge_leap_year(y)):",
        "line_number": 38,
        "context_before": [
            "# calculate the days",
            "for y in range(begin_year, end_year):"
        ],
        "context_after": [
            "day = day + 366",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 6,
        "column": 20,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'year' from outer scope (line 29)",
        "module": "calculate",
        "line_content": "def judge_leap_year(year):",
        "line_number": 6,
        "context_before": [
            "",
            "# judge the leap year"
        ],
        "context_after": [
            "if isleap(year):",
            "return True"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 7,
        "column": 4,
        "message_id": "R1703",
        "message_type": "refactor",
        "symbol": "simplifiable-if-statement",
        "message": "The if statement can be replaced with 'return bool(test)'",
        "module": "calculate",
        "line_content": "if isleap(year):",
        "line_number": 7,
        "context_before": [
            "# judge the leap year",
            "def judge_leap_year(year):"
        ],
        "context_after": [
            "return True",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 7,
        "column": 4,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "module": "calculate",
        "line_content": "if isleap(year):",
        "line_number": 7,
        "context_before": [
            "# judge the leap year",
            "def judge_leap_year(year):"
        ],
        "context_after": [
            "return True",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 14,
        "column": 15,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'month' from outer scope (line 30)",
        "module": "calculate",
        "line_content": "def month_days(month, leap_year):",
        "line_number": 14,
        "context_before": [
            "",
            "# returns the number of days in each month"
        ],
        "context_after": [
            "if month in [1, 3, 5, 7, 8, 10, 12]:",
            "return 31"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 14,
        "column": 22,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'leap_year' from outer scope (line 43)",
        "module": "calculate",
        "line_content": "def month_days(month, leap_year):",
        "line_number": 14,
        "context_before": [
            "",
            "# returns the number of days in each month"
        ],
        "context_after": [
            "if month in [1, 3, 5, 7, 8, 10, 12]:",
            "return 31"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 15,
        "column": 4,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "module": "calculate",
        "line_content": "if month in [1, 3, 5, 7, 8, 10, 12]:",
        "line_number": 15,
        "context_before": [
            "# returns the number of days in each month",
            "def month_days(month, leap_year):"
        ],
        "context_after": [
            "return 31",
            "elif month in [4, 6, 9, 11]:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 14,
        "column": 0,
        "message_id": "R1710",
        "message_type": "refactor",
        "symbol": "inconsistent-return-statements",
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "module": "calculate",
        "line_content": "def month_days(month, leap_year):",
        "line_number": 14,
        "context_before": [
            "",
            "# returns the number of days in each month"
        ],
        "context_after": [
            "if month in [1, 3, 5, 7, 8, 10, 12]:",
            "return 31"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 31,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"day\" doesn't conform to UPPER_CASE naming style",
        "module": "calculate",
        "line_content": "day = 0",
        "line_number": 31,
        "context_before": [
            "year = int(age)",
            "month = year * 12 + localtime.tm_mon"
        ],
        "context_after": [
            "",
            "begin_year = int(localtime.tm_year) - year"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 39,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"day\" doesn't conform to UPPER_CASE naming style",
        "module": "calculate",
        "line_content": "day = day + 366",
        "line_number": 39,
        "context_before": [
            "for y in range(begin_year, end_year):",
            "if (judge_leap_year(y)):"
        ],
        "context_after": [
            "else:",
            "day = day + 365"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 41,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"day\" doesn't conform to UPPER_CASE naming style",
        "module": "calculate",
        "line_content": "day = day + 365",
        "line_number": 41,
        "context_before": [
            "day = day + 366",
            "else:"
        ],
        "context_after": [
            "",
            "leap_year = judge_leap_year(localtime.tm_year)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 43,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"leap_year\" doesn't conform to UPPER_CASE naming style",
        "module": "calculate",
        "line_content": "leap_year = judge_leap_year(localtime.tm_year)",
        "line_number": 43,
        "context_before": [
            "day = day + 365",
            ""
        ],
        "context_after": [
            "for m in range(1, localtime.tm_mon):",
            "day = day + month_days(m, leap_year)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 45,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"day\" doesn't conform to UPPER_CASE naming style",
        "module": "calculate",
        "line_content": "day = day + month_days(m, leap_year)",
        "line_number": 45,
        "context_before": [
            "leap_year = judge_leap_year(localtime.tm_year)",
            "for m in range(1, localtime.tm_mon):"
        ],
        "context_after": [
            "",
            "day = day + localtime.tm_mday"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 48,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "calculate",
        "line_content": "print(\"%s's age is %d years or \" % (name, year), end=\"\")",
        "line_number": 48,
        "context_before": [
            "",
            "day = day + localtime.tm_mday"
        ],
        "context_after": [
            "print(\"%d months or %d days\" % (month, day))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Calculate_age/calculate.py",
        "line": 49,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "calculate",
        "line_content": "print(\"%d months or %d days\" % (month, day))",
        "line_number": 49,
        "context_before": [
            "day = day + localtime.tm_mday",
            "print(\"%s's age is %d years or \" % (name, year), end=\"\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Leap_Year_Checker/leapyear.py",
        "line": 3,
        "column": 65,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "leapyear",
        "line_content": "if(((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0)):",
        "line_number": 3,
        "context_before": [
            "year = int(input(\"Enter a year:- \"))   # Here, you take the input from the user",
            ""
        ],
        "context_after": [
            "\"\"\"",
            "if a year is a multiple of four and a multiple of 100 i.e. if it is a multiple of 400 it is not a leap year"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Leap_Year_Checker/leapyear.py",
        "line": 5,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (111/100)",
        "module": "leapyear",
        "line_content": "if a year is a multiple of four and a multiple of 100 i.e. if it is a multiple of 400 it is not a leap year",
        "line_number": 5,
        "context_before": [
            "if(((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0)):",
            "\"\"\""
        ],
        "context_after": [
            "\"\"\"",
            "print(\"{0} is a leap year!!\".format(year))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Leap_Year_Checker/leapyear.py",
        "line": 4,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "leapyear",
        "line_content": "\"\"\"",
        "line_number": 4,
        "context_before": [
            "",
            "if(((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0)):"
        ],
        "context_after": [
            "if a year is a multiple of four and a multiple of 100 i.e. if it is a multiple of 400 it is not a leap year",
            "\"\"\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Leap_Year_Checker/leapyear.py",
        "line": 7,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "leapyear",
        "line_content": "print(\"{0} is a leap year!!\".format(year))",
        "line_number": 7,
        "context_before": [
            "if a year is a multiple of four and a multiple of 100 i.e. if it is a multiple of 400 it is not a leap year",
            "\"\"\""
        ],
        "context_after": [
            "\"\"\"",
            "printing the output"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Leap_Year_Checker/leapyear.py",
        "line": 8,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "leapyear",
        "line_content": "\"\"\"",
        "line_number": 8,
        "context_before": [
            "\"\"\"",
            "print(\"{0} is a leap year!!\".format(year))"
        ],
        "context_after": [
            "printing the output",
            "\"\"\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Leap_Year_Checker/leapyear.py",
        "line": 12,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "leapyear",
        "line_content": "print(\"{0} is not a leap year!!\".format(year))",
        "line_number": 12,
        "context_before": [
            "\"\"\"",
            "else:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 34,
        "column": 36,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "todo",
        "line_content": "#Add task to list in context",
        "line_number": 34,
        "context_before": [
            "'''Add a task'''",
            "if add_task:"
        ],
        "context_after": [
            "ctx.obj['TASKS'][ctx.obj['LATEST']] = add_task",
            "click.echo('Added task \"' + add_task + '\" with ID ' + str(ctx.obj['LATEST']))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 38,
        "column": 47,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "todo",
        "line_content": "curr_ind = [str(ctx.obj['LATEST'] + 1)]",
        "line_number": 38,
        "context_before": [
            "click.echo('Added task \"' + add_task + '\" with ID ' + str(ctx.obj['LATEST']))",
            "#Open todo.txt and write current index and tasks with IDs (separated by \" ``` \")"
        ],
        "context_after": [
            "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]",
            "with open('./todo.txt', 'w') as f:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 56,
        "column": 51,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "todo",
        "line_content": "curr_ind = [str(ctx.obj['LATEST'] + 1)]",
        "line_number": 56,
        "context_before": [
            "#Open todo.txt and write current index and tasks with IDs (separated by \" ``` \")",
            "if ctx.obj['TASKS']:"
        ],
        "context_after": [
            "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]",
            "with open('./todo.txt', 'w') as f:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 68,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "todo",
        "line_content": "todo()",
        "line_number": 68,
        "context_before": [
            "",
            "if __name__ == '__main__':"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'click'",
        "module": "todo",
        "line_content": "import click",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "@click.group()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 9,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "todo",
        "line_content": "with open('./todo.txt') as f:",
        "line_number": 9,
        "context_before": [
            "ctx.ensure_object(dict)",
            "#Open todo.txt – first line contains latest ID, rest contain tasks and IDs"
        ],
        "context_after": [
            "content = f.readlines()",
            "#Transfer data from todo.txt to the context"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 39,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'tasks' from outer scope (line 17)",
        "module": "todo",
        "line_content": "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]",
        "line_number": 39,
        "context_before": [
            "#Open todo.txt and write current index and tasks with IDs (separated by \" ``` \")",
            "curr_ind = [str(ctx.obj['LATEST'] + 1)]"
        ],
        "context_after": [
            "with open('./todo.txt', 'w') as f:",
            "f.writelines(['%s\\n' % en for en in curr_ind + tasks])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 40,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "todo",
        "line_content": "with open('./todo.txt', 'w') as f:",
        "line_number": 40,
        "context_before": [
            "curr_ind = [str(ctx.obj['LATEST'] + 1)]",
            "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]"
        ],
        "context_after": [
            "f.writelines(['%s\\n' % en for en in curr_ind + tasks])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 41,
        "column": 26,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "todo",
        "line_content": "f.writelines(['%s\\n' % en for en in curr_ind + tasks])",
        "line_number": 41,
        "context_before": [
            "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]",
            "with open('./todo.txt', 'w') as f:"
        ],
        "context_after": [
            "",
            "@todo.command()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 57,
        "column": 12,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'tasks' from outer scope (line 17)",
        "module": "todo",
        "line_content": "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]",
        "line_number": 57,
        "context_before": [
            "if ctx.obj['TASKS']:",
            "curr_ind = [str(ctx.obj['LATEST'] + 1)]"
        ],
        "context_after": [
            "with open('./todo.txt', 'w') as f:",
            "f.writelines(['%s\\n' % en for en in curr_ind + tasks])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 58,
        "column": 17,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "todo",
        "line_content": "with open('./todo.txt', 'w') as f:",
        "line_number": 58,
        "context_before": [
            "curr_ind = [str(ctx.obj['LATEST'] + 1)]",
            "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]"
        ],
        "context_after": [
            "f.writelines(['%s\\n' % en for en in curr_ind + tasks])",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 59,
        "column": 30,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "todo",
        "line_content": "f.writelines(['%s\\n' % en for en in curr_ind + tasks])",
        "line_number": 59,
        "context_before": [
            "tasks = [str(i) + '```' + t for (i, t) in ctx.obj['TASKS'].items()]",
            "with open('./todo.txt', 'w') as f:"
        ],
        "context_after": [
            "else:",
            "#Resets ID tracker to 0 if list is empty"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 62,
        "column": 17,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "todo",
        "line_content": "with open('./todo.txt', 'w') as f:",
        "line_number": 62,
        "context_before": [
            "else:",
            "#Resets ID tracker to 0 if list is empty"
        ],
        "context_after": [
            "f.writelines([str(0) + '\\n'])",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Cli_todo/todo.py",
        "line": 68,
        "column": 4,
        "message_id": "E1120",
        "message_type": "error",
        "symbol": "no-value-for-parameter",
        "message": "No value for argument 'ctx' in function call",
        "module": "todo",
        "line_content": "todo()",
        "line_number": 68,
        "context_before": [
            "",
            "if __name__ == '__main__':"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Fetch HTTP status code/fetch_http_status_code.py",
        "line": 21,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "fetch_http_status_code",
        "line_content": "print('Status :',  str(e.reason).split(']')[0].replace('[','') +  ' ' + emoji.emojize(':thumbs_down:'))",
        "line_number": 21,
        "context_before": [
            "except URLError as e:",
            "#In case of bad URL or connection failure, prints Win Error and thumbs_down emoji"
        ],
        "context_after": [
            "print('Message : '+ str(e.reason).split(']')[1])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch HTTP status code/fetch_http_status_code.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'emoji'",
        "module": "fetch_http_status_code",
        "line_content": "import emoji",
        "line_number": 4,
        "context_before": [
            "from urllib.request import urlopen",
            "from urllib.error import URLError, HTTPError"
        ],
        "context_after": [
            "",
            "#Taking input url from user"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch HTTP status code/fetch_http_status_code.py",
        "line": 21,
        "column": 23,
        "message_id": "C0207",
        "message_type": "convention",
        "symbol": "use-maxsplit-arg",
        "message": "Use str(e.reason).split(']', maxsplit=1)[0] instead",
        "module": "fetch_http_status_code",
        "line_content": "print('Status :',  str(e.reason).split(']')[0].replace('[','') +  ' ' + emoji.emojize(':thumbs_down:'))",
        "line_number": 21,
        "context_before": [
            "except URLError as e:",
            "#In case of bad URL or connection failure, prints Win Error and thumbs_down emoji"
        ],
        "context_after": [
            "print('Message : '+ str(e.reason).split(']')[1])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch HTTP status code/fetch_http_status_code.py",
        "line": 11,
        "column": 15,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "fetch_http_status_code",
        "line_content": "response = urlopen(requestURL)",
        "line_number": 11,
        "context_before": [
            "#Gets the response from URL and prints the status code, corresponding emoji and message accordingly",
            "try:"
        ],
        "context_after": [
            "#In case of success, prints success status code and thumbs_up emoji",
            "print('Status code : ' + str(response.code) + ' ' + emoji.emojize(':thumbs_up:'))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 47,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "file-sortor",
        "line_content": "",
        "line_number": 47,
        "context_before": [
            "except:",
            "print(file + \" is already exist\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 3,
        "column": 12,
        "message_id": "W1401",
        "message_type": "warning",
        "symbol": "anomalous-backslash-in-string",
        "message": "Anomalous backslash in string: '\\d'. String constant might be missing an r prefix.",
        "module": "file-sortor",
        "line_content": "os.chdir(\"E:\\downloads\")",
        "line_number": 3,
        "context_before": [
            "import os",
            "import shutil"
        ],
        "context_after": [
            "#print(os.getcwd())",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"file-sortor\" doesn't conform to snake_case naming style",
        "module": "file-sortor",
        "line_content": "import os",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import shutil",
            "os.chdir(\"E:\\downloads\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 25,
        "column": 12,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'file' from outer scope (line 35)",
        "module": "file-sortor",
        "line_content": "def sorting(file):",
        "line_number": 25,
        "context_before": [
            "",
            "#sort to specific folder depend on extenstions"
        ],
        "context_after": [
            "keys = list(extentions.keys())",
            "for key in keys:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 25,
        "column": 0,
        "message_id": "R1710",
        "message_type": "refactor",
        "symbol": "inconsistent-return-statements",
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "module": "file-sortor",
        "line_content": "def sorting(file):",
        "line_number": 25,
        "context_before": [
            "",
            "#sort to specific folder depend on extenstions"
        ],
        "context_after": [
            "keys = list(extentions.keys())",
            "for key in keys:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 36,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"dist\" doesn't conform to UPPER_CASE naming style",
        "module": "file-sortor",
        "line_content": "dist = sorting(file)",
        "line_number": 36,
        "context_before": [
            "#iterat through each file",
            "for file in files:"
        ],
        "context_after": [
            "if dist:",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 40,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "file-sortor",
        "line_content": "except:",
        "line_number": 40,
        "context_before": [
            "try:",
            "shutil.move(file, \"../download-sorting/\" + dist)"
        ],
        "context_after": [
            "print(file + \" is already exist\")",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Organized_download_folder_with_different_categories/file-sortor.py",
        "line": 45,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "file-sortor",
        "line_content": "except:",
        "line_number": 45,
        "context_before": [
            "try:",
            "shutil.move(file, \"../download-sorting/others\")"
        ],
        "context_after": [
            "print(file + \" is already exist\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_Wikipedia_Article/wiki_random.py",
        "line": 25,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "wiki_random",
        "line_content": "",
        "line_number": 25,
        "context_before": [
            "r.close()",
            "print(\"File Saved as random_wiki.txt\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Random_Wikipedia_Article/wiki_random.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "wiki_random",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_Wikipedia_Article/wiki_random.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "wiki_random",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "from bs4 import BeautifulSoup"
        ],
        "context_after": [
            "",
            "# Trying to open a random wikipedia article"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_Wikipedia_Article/wiki_random.py",
        "line": 12,
        "column": 4,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "wiki_random",
        "line_content": "r = open(\"random_wiki.txt\", \"w+\", encoding='utf-8')",
        "line_number": 12,
        "context_before": [
            "wiki = BeautifulSoup(res.text, \"html.parser\")",
            ""
        ],
        "context_after": [
            "",
            "# Adding the heading to the text file"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/main.py",
        "line": 27,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "main",
        "line_content": "run(args)",
        "line_number": 27,
        "context_before": [
            "if __name__ == \"__main__\":",
            "args = parser.parse_args()"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/main.py",
        "line": 7,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'args' from outer scope (line 26)",
        "module": "main",
        "line_content": "def run(args):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "baidu_web_ak = args.ak",
            "city_str = args.city"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/main.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"argparse\" should be placed before third party import \"util.get_baidu_poi\"",
        "module": "main",
        "line_content": "import argparse",
        "line_number": 4,
        "context_before": [
            "import os.path as osp",
            "from util import get_baidu_poi"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 4,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "util",
        "line_content": "",
        "line_number": 4,
        "context_before": [
            "import json",
            "import time"
        ],
        "context_after": [
            "",
            "# call API"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 5,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "util",
        "line_content": "",
        "line_number": 5,
        "context_before": [
            "import time",
            ""
        ],
        "context_after": [
            "# call API",
            "def get_baidu_poi(roi_key, city_str, baidu_ak, output):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 31,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (116/100)",
        "module": "util",
        "line_content": "logfile.writelines(time.strftime(\"%Y-%m-%d-%H-%M-%S\") + \" \" + city_str + \" \" + str(page_num) + \"\\n\")",
        "line_number": 31,
        "context_before": [
            "res = json.loads(resp.text)",
            "if len(res[\"results\"]) == 0:"
        ],
        "context_after": [
            "break",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 40,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "util",
        "line_content": "j_str = str(j_name) + \",\" + str(j_lon) + \",\" + str(j_lat) + \",\" + str(j_area) + \",\" + str(j_add) + \"\\n\"",
        "line_number": 40,
        "context_before": [
            "j_area = r[\"area\"]",
            "j_add = r[\"address\"]"
        ],
        "context_after": [
            "file.writelines(j_str)",
            "page_num += 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 46,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (112/100)",
        "module": "util",
        "line_content": "logfile.writelines(time.strftime(\"%Y-%m-%d-%H-%M-%S\") + \" \" + city_str + \" \" + str(page_num) + \"\\n\")",
        "line_number": 46,
        "context_before": [
            "except:",
            "print(\"except\")"
        ],
        "context_after": [
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 47,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "util",
        "line_content": "break",
        "line_number": 47,
        "context_before": [
            "print(\"except\")",
            "logfile.writelines(time.strftime(\"%Y-%m-%d-%H-%M-%S\") + \" \" + city_str + \" \" + str(page_num) + \"\\n\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "util",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import json",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 7,
        "column": 0,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (18/15)",
        "module": "util",
        "line_content": "def get_baidu_poi(roi_key, city_str, baidu_ak, output):",
        "line_number": 7,
        "context_before": [
            "",
            "# call API"
        ],
        "context_after": [
            "\"\"\"",
            "inputs:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 44,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "util",
        "line_content": "except:",
        "line_number": 44,
        "context_before": [
            "page_num += 1",
            "time.sleep(1)"
        ],
        "context_after": [
            "print(\"except\")",
            "logfile.writelines(time.strftime(\"%Y-%m-%d-%H-%M-%S\") + \" \" + city_str + \" \" + str(page_num) + \"\\n\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 21,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"URL\" doesn't conform to snake_case naming style",
        "module": "util",
        "line_content": "URL = \"http://api.map.baidu.com/place/v2/search?query=\" + roi_key + \\",
        "line_number": 21,
        "context_before": [
            "while True:",
            "try:"
        ],
        "context_after": [
            "\"&region=\" + city_str + \\",
            "\"&output=json\" +  \\"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 30,
        "column": 12,
        "message_id": "R1723",
        "message_type": "refactor",
        "symbol": "no-else-break",
        "message": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
        "module": "util",
        "line_content": "if len(res[\"results\"]) == 0:",
        "line_number": 30,
        "context_before": [
            "resp = requests.get(URL)",
            "res = json.loads(resp.text)"
        ],
        "context_after": [
            "logfile.writelines(time.strftime(\"%Y-%m-%d-%H-%M-%S\") + \" \" + city_str + \" \" + str(page_num) + \"\\n\")",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 17,
        "column": 14,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "util",
        "line_content": "logfile = open(output + \"/\" + now_time + \".log\", \"a+\", encoding=\"utf-8\")",
        "line_number": 17,
        "context_before": [
            "now_time = time.strftime(\"%Y-%m-%d\")",
            "page_num = 0"
        ],
        "context_after": [
            "file = open(output + \"/\" + now_time + \".txt\", \"a+\", encoding=\"utf-8\")",
            "while True:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 18,
        "column": 11,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "util",
        "line_content": "file = open(output + \"/\" + now_time + \".txt\", \"a+\", encoding=\"utf-8\")",
        "line_number": 18,
        "context_before": [
            "page_num = 0",
            "logfile = open(output + \"/\" + now_time + \".log\", \"a+\", encoding=\"utf-8\")"
        ],
        "context_after": [
            "while True:",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"json\" should be placed before third party import \"requests\"",
        "module": "util",
        "line_content": "import json",
        "line_number": 2,
        "context_before": [
            "import requests"
        ],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Baidu_POI_crawl/util.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"requests\"",
        "module": "util",
        "line_content": "import time",
        "line_number": 3,
        "context_before": [
            "import requests",
            "import json"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Capture_Video_Frames/capture_video_frames.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "capture_video_frames",
        "line_content": "import cv2",
        "line_number": 4,
        "context_before": [
            "import shutil",
            "import sys"
        ],
        "context_after": [
            "",
            "class FrameCapture:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Capture_Video_Frames/capture_video_frames.py",
        "line": 10,
        "column": 23,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'file_path' from outer scope (line 39)",
        "module": "capture_video_frames",
        "line_content": "def __init__(self, file_path):",
        "line_number": 10,
        "context_before": [
            "Class definition to capture frames",
            "'''"
        ],
        "context_after": [
            "'''",
            "initializing directory where the captured frames will be stored."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Capture_Video_Frames/capture_video_frames.py",
        "line": 6,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "module": "capture_video_frames",
        "line_content": "class FrameCapture:",
        "line_number": 6,
        "context_before": [
            "import cv2",
            ""
        ],
        "context_after": [
            "'''",
            "Class definition to capture frames"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 33,
        "column": 60,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "webscrapindcomment",
        "line_content": "with open(filename, 'w', newline='', encoding='utf-8') as f:",
        "line_number": 33,
        "context_before": [
            "items.append(item)",
            "filename = 'C:/Users/hp/Desktop/commentlist.csv'"
        ],
        "context_after": [
            "w = csv.DictWriter(f,['Author','Comment'])",
            "w.writeheader()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 34,
        "column": 46,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "webscrapindcomment",
        "line_content": "w = csv.DictWriter(f,['Author','Comment'])",
        "line_number": 34,
        "context_before": [
            "filename = 'C:/Users/hp/Desktop/commentlist.csv'",
            "with open(filename, 'w', newline='', encoding='utf-8') as f:"
        ],
        "context_after": [
            "w.writeheader()",
            "for item in items:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 35,
        "column": 19,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "webscrapindcomment",
        "line_content": "w.writeheader()",
        "line_number": 35,
        "context_before": [
            "with open(filename, 'w', newline='', encoding='utf-8') as f:",
            "w = csv.DictWriter(f,['Author','Comment'])"
        ],
        "context_after": [
            "for item in items:",
            "w.writerow(item)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 36,
        "column": 22,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "webscrapindcomment",
        "line_content": "for item in items:",
        "line_number": 36,
        "context_before": [
            "w = csv.DictWriter(f,['Author','Comment'])",
            "w.writeheader()"
        ],
        "context_after": [
            "w.writerow(item)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 37,
        "column": 24,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "webscrapindcomment",
        "line_content": "w.writerow(item)",
        "line_number": 37,
        "context_before": [
            "w.writeheader()",
            "for item in items:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 8,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'selenium'",
        "module": "webscrapindcomment",
        "line_content": "from selenium import webdriver",
        "line_number": 8,
        "context_before": [
            "\"\"\"",
            ""
        ],
        "context_after": [
            "import csv",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 32,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"filename\" doesn't conform to UPPER_CASE naming style",
        "module": "webscrapindcomment",
        "line_content": "filename = 'C:/Users/hp/Desktop/commentlist.csv'",
        "line_number": 32,
        "context_before": [
            "item['Comment'] = comment.text",
            "items.append(item)"
        ],
        "context_after": [
            "with open(filename, 'w', newline='', encoding='utf-8') as f:",
            "w = csv.DictWriter(f,['Author','Comment'])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 9,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"csv\" should be placed before third party import \"selenium.webdriver\"",
        "module": "webscrapindcomment",
        "line_content": "import csv",
        "line_number": 9,
        "context_before": [
            "",
            "from selenium import webdriver"
        ],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_scraping_a_youtube_comment/webscrapindcomment.py",
        "line": 10,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"selenium.webdriver\"",
        "module": "webscrapindcomment",
        "line_content": "import time",
        "line_number": 10,
        "context_before": [
            "from selenium import webdriver",
            "import csv"
        ],
        "context_after": [
            "",
            "items=[]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 4,
        "column": 45,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "speech_to_text",
        "line_content": "microphone = speech_recognition.Recognizer()",
        "line_number": 4,
        "context_before": [
            "",
            "def record_voice():"
        ],
        "context_after": [
            "",
            "with speech_recognition.Microphone() as live_phone:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 4,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "speech_to_text",
        "line_content": "microphone = speech_recognition.Recognizer()",
        "line_number": 4,
        "context_before": [
            "",
            "def record_voice():"
        ],
        "context_after": [
            "",
            "with speech_recognition.Microphone() as live_phone:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 6,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "speech_to_text",
        "line_content": "with speech_recognition.Microphone() as live_phone:",
        "line_number": 6,
        "context_before": [
            "microphone = speech_recognition.Recognizer()",
            ""
        ],
        "context_after": [
            "microphone.adjust_for_ambient_noise(live_phone)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 7,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "speech_to_text",
        "line_content": "microphone.adjust_for_ambient_noise(live_phone)",
        "line_number": 7,
        "context_before": [
            "",
            "with speech_recognition.Microphone() as live_phone:"
        ],
        "context_after": [
            "",
            "print(\"I'm trying to hear you: \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 9,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "speech_to_text",
        "line_content": "print(\"I'm trying to hear you: \")",
        "line_number": 9,
        "context_before": [
            "microphone.adjust_for_ambient_noise(live_phone)",
            ""
        ],
        "context_after": [
            "audio = microphone.listen(live_phone)",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 10,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "speech_to_text",
        "line_content": "audio = microphone.listen(live_phone)",
        "line_number": 10,
        "context_before": [
            "",
            "print(\"I'm trying to hear you: \")"
        ],
        "context_after": [
            "try:",
            "phrase = microphone.recognize_google(audio, language='en')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 11,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "speech_to_text",
        "line_content": "try:",
        "line_number": 11,
        "context_before": [
            "print(\"I'm trying to hear you: \")",
            "audio = microphone.listen(live_phone)"
        ],
        "context_after": [
            "phrase = microphone.recognize_google(audio, language='en')",
            "return phrase"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 12,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "speech_to_text",
        "line_content": "phrase = microphone.recognize_google(audio, language='en')",
        "line_number": 12,
        "context_before": [
            "audio = microphone.listen(live_phone)",
            "try:"
        ],
        "context_after": [
            "return phrase",
            "except speech_recognition.UnkownValueError:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 13,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "speech_to_text",
        "line_content": "return phrase",
        "line_number": 13,
        "context_before": [
            "try:",
            "phrase = microphone.recognize_google(audio, language='en')"
        ],
        "context_after": [
            "except speech_recognition.UnkownValueError:",
            "return \"I didn't understand what you said\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 14,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "speech_to_text",
        "line_content": "except speech_recognition.UnkownValueError:",
        "line_number": 14,
        "context_before": [
            "phrase = microphone.recognize_google(audio, language='en')",
            "return phrase"
        ],
        "context_after": [
            "return \"I didn't understand what you said\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 15,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "speech_to_text",
        "line_content": "return \"I didn't understand what you said\"",
        "line_number": 15,
        "context_before": [
            "return phrase",
            "except speech_recognition.UnkownValueError:"
        ],
        "context_after": [
            "",
            "if __name__ == '__main__':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 18,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "speech_to_text",
        "line_content": "phrase = record_voice()",
        "line_number": 18,
        "context_before": [
            "",
            "if __name__ == '__main__':"
        ],
        "context_after": [
            "",
            "with open('you_said_this.txt','w') as file:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 20,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "speech_to_text",
        "line_content": "with open('you_said_this.txt','w') as file:",
        "line_number": 20,
        "context_before": [
            "phrase = record_voice()",
            ""
        ],
        "context_after": [
            "file.write(phrase)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 21,
        "column": 20,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "speech_to_text",
        "line_content": "file.write(phrase)",
        "line_number": 21,
        "context_before": [
            "",
            "with open('you_said_this.txt','w') as file:"
        ],
        "context_after": [
            "",
            "print('the last sentence you spoke was saved in you_said_this.txt')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 21,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "speech_to_text",
        "line_content": "file.write(phrase)",
        "line_number": 21,
        "context_before": [
            "",
            "with open('you_said_this.txt','w') as file:"
        ],
        "context_after": [
            "",
            "print('the last sentence you spoke was saved in you_said_this.txt')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 23,
        "column": 68,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "speech_to_text",
        "line_content": "print('the last sentence you spoke was saved in you_said_this.txt')",
        "line_number": 23,
        "context_before": [
            "file.write(phrase)",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 23,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "speech_to_text",
        "line_content": "print('the last sentence you spoke was saved in you_said_this.txt')",
        "line_number": 23,
        "context_before": [
            "file.write(phrase)",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'speech_recognition'",
        "module": "speech_to_text",
        "line_content": "import speech_recognition",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "def record_voice():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 12,
        "column": 3,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'phrase' from outer scope (line 18)",
        "module": "speech_to_text",
        "line_content": "phrase = microphone.recognize_google(audio, language='en')",
        "line_number": 12,
        "context_before": [
            "audio = microphone.listen(live_phone)",
            "try:"
        ],
        "context_after": [
            "return phrase",
            "except speech_recognition.UnkownValueError:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speech_to_text/speech_to_text.py",
        "line": 20,
        "column": 6,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "speech_to_text",
        "line_content": "with open('you_said_this.txt','w') as file:",
        "line_number": 20,
        "context_before": [
            "phrase = record_voice()",
            ""
        ],
        "context_after": [
            "file.write(phrase)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 31,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 31,
        "context_before": [
            "def names():",
            "#Player names input;"
        ],
        "context_after": [
            "p1_name=input(\"\\nEnter NAME of PLAYER 1:\\t\").capitalize()",
            "p2_name=input(\"Enter NAME of PLAYER 2:\\t\").capitalize()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 41,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (104/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "while p1_choice != 'X' or p1_choice != 'O':          #while loop; if the entered value isn't X or O;",
        "line_number": 41,
        "context_before": [
            "p1_choice = ' '",
            "p2_choice = ' '"
        ],
        "context_after": [
            "",
            "#WHILE LOOP STARTS"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 42,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 42,
        "context_before": [
            "p2_choice = ' '",
            "while p1_choice != 'X' or p1_choice != 'O':          #while loop; if the entered value isn't X or O;"
        ],
        "context_after": [
            "#WHILE LOOP STARTS",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 51,
        "column": 61,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#if entered value is X or O; get out of the loop;",
        "line_number": 51,
        "context_before": [
            "",
            "if p1_choice == 'X' or p1_choice == 'O':"
        ],
        "context_after": [
            "break",
            "print(\"INVALID INPUT! Please Try Again!\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 53,
        "column": 49,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"INVALID INPUT! Please Try Again!\")",
        "line_number": 53,
        "context_before": [
            "#if entered value is X or O; get out of the loop;",
            "break"
        ],
        "context_after": [
            "#if the entered value isn't X or O, re-run the while loop;",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 62,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 62,
        "context_before": [
            "elif p1_choice == 'O':",
            "p2_choice = 'X'"
        ],
        "context_after": [
            "return (p1_choice, p2_choice)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 74,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (142/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[7],board[8],board[9]) + \"            \" + \" {} | {} | {} \".format(avail[7],avail[8],avail[9]))",
        "line_number": 74,
        "context_before": [
            "",
            "def display_board(board, avail):"
        ],
        "context_after": [
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")",
            "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 76,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (142/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))",
        "line_number": 76,
        "context_before": [
            "print(\"    \" + \" {} | {} | {} \".format(board[7],board[8],board[9]) + \"            \" + \" {} | {} | {} \".format(avail[7],avail[8],avail[9]))",
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")"
        ],
        "context_after": [
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")",
            "print(\"    \" + \" {} | {} | {} \".format(board[1],board[2],board[3]) + \"            \" + \" {} | {} | {} \".format(avail[1],avail[2],avail[3]))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 78,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (142/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[1],board[2],board[3]) + \"            \" + \" {} | {} | {} \".format(avail[1],avail[2],avail[3]))",
        "line_number": 78,
        "context_before": [
            "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))",
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 83,
        "column": 70,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#Initialising position as 0^; so it passes through the while loop;",
        "line_number": 83,
        "context_before": [
            "def player_choice(board, name, choice):",
            "position = 0"
        ],
        "context_after": [
            "while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):",
            "position = int(input(f'\\n{name} ({choice}), Choose your next position: (1-9) \\t'))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 86,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 86,
        "context_before": [
            "while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):",
            "position = int(input(f'\\n{name} ({choice}), Choose your next position: (1-9) \\t'))"
        ],
        "context_after": [
            "if position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position) or position == \"\":",
            "#To check whether the given position is in the set [1-9] or whether it is empty or occupied;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 87,
        "column": 101,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "if position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position) or position == \"\":",
        "line_number": 87,
        "context_before": [
            "position = int(input(f'\\n{name} ({choice}), Choose your next position: (1-9) \\t'))",
            ""
        ],
        "context_after": [
            "#To check whether the given position is in the set [1-9] or whether it is empty or occupied;",
            "print(f\"INVALID INPUT. Please Try Again!\\n\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 87,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "if position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position) or position == \"\":",
        "line_number": 87,
        "context_before": [
            "position = int(input(f'\\n{name} ({choice}), Choose your next position: (1-9) \\t'))",
            ""
        ],
        "context_after": [
            "#To check whether the given position is in the set [1-9] or whether it is empty or occupied;",
            "print(f\"INVALID INPUT. Please Try Again!\\n\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 88,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (104/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "#To check whether the given position is in the set [1-9] or whether it is empty or occupied;",
        "line_number": 88,
        "context_before": [
            "",
            "if position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position) or position == \"\":"
        ],
        "context_after": [
            "print(f\"INVALID INPUT. Please Try Again!\\n\")",
            "print(\"\\n\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 89,
        "column": 56,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "print(f\"INVALID INPUT. Please Try Again!\\n\")",
        "line_number": 89,
        "context_before": [
            "if position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position) or position == \"\":",
            "#To check whether the given position is in the set [1-9] or whether it is empty or occupied;"
        ],
        "context_after": [
            "print(\"\\n\")",
            "return position"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 90,
        "column": 15,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"\\n\")",
        "line_number": 90,
        "context_before": [
            "#To check whether the given position is in the set [1-9] or whether it is empty or occupied;",
            "print(f\"INVALID INPUT. Please Try Again!\\n\")"
        ],
        "context_after": [
            "return position",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 98,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 98,
        "context_before": [
            "position = 0",
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]"
        ],
        "context_after": [
            "# including both X and O, since if computer will win, he will place a choice there, but if the component will win --> we have to block that move",
            "for let in ['O', 'X']:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 99,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (148/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "# including both X and O, since if computer will win, he will place a choice there, but if the component will win --> we have to block that move",
        "line_number": 99,
        "context_before": [
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]",
            ""
        ],
        "context_after": [
            "for let in ['O', 'X']:",
            "for i in possibilities:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 103,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (127/100)",
        "module": "tic-tac-toe-AI",
        "line_content": "# Creating a copy like this  and not this boardCopy = board, since changes to boardCopy changes the original board;",
        "line_number": 103,
        "context_before": [
            "for i in possibilities:",
            "# Creating a copy of the board everytime, placing the move and checking if it wins;"
        ],
        "context_after": [
            "boardCopy = board[:]",
            "boardCopy[i] = let"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 106,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "tic-tac-toe-AI",
        "line_content": "if(win_check(boardCopy, let)):",
        "line_number": 106,
        "context_before": [
            "boardCopy = board[:]",
            "boardCopy[i] = let"
        ],
        "context_after": [
            "position = i",
            "return position"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 111,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 111,
        "context_before": [
            "",
            "openCorners = [x for x in possibilities if x in [1, 3, 7, 9]]"
        ],
        "context_after": [
            "if len(openCorners) > 0:",
            "position = selectRandom(openCorners)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 121,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 121,
        "context_before": [
            "",
            "openEdges = [x for x in possibilities if x in [2, 4, 6, 8]]"
        ],
        "context_after": [
            "if len(openEdges) > 0:",
            "position = selectRandom(openEdges)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 156,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 156,
        "context_before": [
            "def win_check(board, choice):",
            "#To check if one of the following patterns are true; then the respective player has won!;"
        ],
        "context_after": [
            "#HORIZONTAL CHECK;",
            "return ("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 158,
        "column": 12,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "return (",
        "line_number": 158,
        "context_before": [
            "",
            "#HORIZONTAL CHECK;"
        ],
        "context_after": [
            "( board[1] == choice and board[2] == choice and board[3] == choice )",
            "or ( board[4] == choice and board[5] == choice and board[6] == choice )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 194,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 194,
        "context_before": [
            "while True:",
            "####################################################################################"
        ],
        "context_after": [
            "#Creating the board as a list; to be kept replacing it with user input;",
            "theBoard = [' ']*10"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 197,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 197,
        "context_before": [
            "#Creating the board as a list; to be kept replacing it with user input;",
            "theBoard = [' ']*10"
        ],
        "context_after": [
            "#Creating the available options on the board:",
            "available = [str(num) for num in range(0,10)] # a List Comprehension"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 201,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 201,
        "context_before": [
            "available = [str(num) for num in range(0,10)] # a List Comprehension",
            "#available = '0123456789'"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 223,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 223,
        "context_before": [
            "print(f\"\\n{p1_name}:\", p1_choice)",
            "print(f\"{p2_name}:\", p2_choice)"
        ],
        "context_after": [
            "else:",
            "p1_name = \"Computer1\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 232,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 232,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "#Printing randomly who will go first;",
            "if first_player():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 240,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 240,
        "context_before": [
            "",
            "print(f\"\\n{turn} will go first!\")"
        ],
        "context_after": [
            "#Asking the user, if ready to play the game; Output will be True or False;",
            "if(mode == 2):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 242,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "tic-tac-toe-AI",
        "line_content": "if(mode == 2):",
        "line_number": 242,
        "context_before": [
            "",
            "#Asking the user, if ready to play the game; Output will be True or False;"
        ],
        "context_after": [
            "ent = input(\"\\nThis is going to be fast! Press Enter for the battle to begin!\\n\")",
            "play_game = 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 246,
        "column": 26,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "play_game = play()",
        "line_number": 246,
        "context_before": [
            "play_game = 1",
            "else:"
        ],
        "context_after": [
            "",
            "while play_game:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 247,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 247,
        "context_before": [
            "else:",
            "play_game = play()"
        ],
        "context_after": [
            "while play_game:",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 249,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 249,
        "context_before": [
            "",
            "while play_game:"
        ],
        "context_after": [
            "############################",
            "#PLAYER1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 253,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 253,
        "context_before": [
            "#PLAYER1",
            "if turn == p1_name:"
        ],
        "context_after": [
            "#Displaying the board;",
            "display_board(theBoard, available)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 263,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 263,
        "context_before": [
            "position = CompAI(theBoard, p1_name, p1_choice)",
            "print(f'\\n{p1_name} ({p1_choice}) has placed on {position}\\n')"
        ],
        "context_after": [
            "#Replacing the ' ' at *position* to *p1_choice* in *theBoard* list;",
            "place_marker(theBoard, available, p1_choice, position)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 264,
        "column": 79,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#Replacing the ' ' at *position* to *p1_choice* in *theBoard* list;",
        "line_number": 264,
        "context_before": [
            "print(f'\\n{p1_name} ({p1_choice}) has placed on {position}\\n')",
            ""
        ],
        "context_after": [
            "place_marker(theBoard, available, p1_choice, position)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 266,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 266,
        "context_before": [
            "#Replacing the ' ' at *position* to *p1_choice* in *theBoard* list;",
            "place_marker(theBoard, available, p1_choice, position)"
        ],
        "context_after": [
            "#To check if Player 1 has won after the current input;",
            "if win_check(theBoard, p1_choice):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 271,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "tic-tac-toe-AI",
        "line_content": "if(mode):",
        "line_number": 271,
        "context_before": [
            "display_board(theBoard, available)",
            "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")"
        ],
        "context_after": [
            "print(f'\\n\\nCONGRATULATIONS {p1_name}! YOU HAVE WON THE GAME!\\n\\n')",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 277,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 277,
        "context_before": [
            "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")",
            "play_game = False"
        ],
        "context_after": [
            "else:",
            "#To check if the board is full; if yes, the game is a draw;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 286,
        "column": 73,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#If none of the above is possible, next turn of Player 2;",
        "line_number": 286,
        "context_before": [
            "print(\"~~~~~~~~~~~~~~~~~~\")",
            "break"
        ],
        "context_after": [
            "else:",
            "turn = p2_name"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 289,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 289,
        "context_before": [
            "else:",
            "turn = p2_name"
        ],
        "context_after": [
            "",
            "############################"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 290,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 290,
        "context_before": [
            "turn = p2_name",
            ""
        ],
        "context_after": [
            "############################",
            "#PLAYER2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 292,
        "column": 16,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#PLAYER2",
        "line_number": 292,
        "context_before": [
            "",
            "############################"
        ],
        "context_after": [
            "elif turn == p2_name:",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 294,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 294,
        "context_before": [
            "#PLAYER2",
            "elif turn == p2_name:"
        ],
        "context_after": [
            "#Displaying the board;",
            "display_board(theBoard, available)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 299,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "tic-tac-toe-AI",
        "line_content": "if(mode == 1):",
        "line_number": 299,
        "context_before": [
            "",
            "#Position of the input;"
        ],
        "context_after": [
            "position = player_choice(theBoard, p2_name, p2_choice)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 304,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 304,
        "context_before": [
            "position = CompAI(theBoard, p2_name, p2_choice)",
            "print(f'\\n{p2_name} ({p2_choice}) has placed on {position}\\n')"
        ],
        "context_after": [
            "#Replacing the ' ' at *position* to *p2_choice* in *theBoard* list;",
            "place_marker(theBoard, available, p2_choice, position)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 305,
        "column": 79,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#Replacing the ' ' at *position* to *p2_choice* in *theBoard* list;",
        "line_number": 305,
        "context_before": [
            "print(f'\\n{p2_name} ({p2_choice}) has placed on {position}\\n')",
            ""
        ],
        "context_after": [
            "place_marker(theBoard, available, p2_choice, position)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 307,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 307,
        "context_before": [
            "#Replacing the ' ' at *position* to *p2_choice* in *theBoard* list;",
            "place_marker(theBoard, available, p2_choice, position)"
        ],
        "context_after": [
            "#To check if Player 2 has won after the current input;",
            "if win_check(theBoard, p2_choice):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 312,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "tic-tac-toe-AI",
        "line_content": "if(mode):",
        "line_number": 312,
        "context_before": [
            "display_board(theBoard, available)",
            "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")"
        ],
        "context_after": [
            "print(f'\\n\\nCONGRATULATIONS {p2_name}! YOU HAVE WON THE GAME!\\n\\n')",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 318,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 318,
        "context_before": [
            "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")",
            "play_game = False"
        ],
        "context_after": [
            "else:",
            "#To check if the board is full; if yes, the game is a draw;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 327,
        "column": 73,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#If none of the above is possible, next turn of Player 2;",
        "line_number": 327,
        "context_before": [
            "print(\"~~~~~~~~~~~~~~~~~~\")",
            "break"
        ],
        "context_after": [
            "else:",
            "turn = p1_name"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 330,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 330,
        "context_before": [
            "else:",
            "turn = p1_name"
        ],
        "context_after": [
            "",
            "#If the users want to play the game again?"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 331,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 331,
        "context_before": [
            "turn = p1_name",
            ""
        ],
        "context_after": [
            "#If the users want to play the game again?",
            "if replay():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 332,
        "column": 46,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "#If the users want to play the game again?",
        "line_number": 332,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "if replay():",
            "#if Yes;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 339,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 339,
        "context_before": [
            "#if No;",
            "break"
        ],
        "context_after": [
            "####################################################################################",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 341,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "tic-tac-toe-AI",
        "line_content": "",
        "line_number": 341,
        "context_before": [
            "",
            "####################################################################################"
        ],
        "context_after": [
            "print(\"\\n\\n\\t\\t\\tTHE END!\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 346,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "tic-tac-toe-AI",
        "line_content": "#END",
        "line_number": 346,
        "context_before": [
            "",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"tic-tac-toe-AI\" doesn't conform to snake_case naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "####\tTIC TAC TOE    ####",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "#START;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 32,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'p1_name' from outer scope (line 210)",
        "module": "tic-tac-toe-AI",
        "line_content": "p1_name=input(\"\\nEnter NAME of PLAYER 1:\\t\").capitalize()",
        "line_number": 32,
        "context_before": [
            "#Player names input;",
            ""
        ],
        "context_after": [
            "p2_name=input(\"Enter NAME of PLAYER 2:\\t\").capitalize()",
            "return (p1_name, p2_name)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 33,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'p2_name' from outer scope (line 210)",
        "module": "tic-tac-toe-AI",
        "line_content": "p2_name=input(\"Enter NAME of PLAYER 2:\\t\").capitalize()",
        "line_number": 33,
        "context_before": [
            "",
            "p1_name=input(\"\\nEnter NAME of PLAYER 1:\\t\").capitalize()"
        ],
        "context_after": [
            "return (p1_name, p2_name)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 39,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'p1_choice' from outer scope (line 212)",
        "module": "tic-tac-toe-AI",
        "line_content": "p1_choice = ' '",
        "line_number": 39,
        "context_before": [
            "def choice():",
            "#Player choice input;"
        ],
        "context_after": [
            "p2_choice = ' '",
            "while p1_choice != 'X' or p1_choice != 'O':          #while loop; if the entered value isn't X or O;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 40,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'p2_choice' from outer scope (line 212)",
        "module": "tic-tac-toe-AI",
        "line_content": "p2_choice = ' '",
        "line_number": 40,
        "context_before": [
            "#Player choice input;",
            "p1_choice = ' '"
        ],
        "context_after": [
            "while p1_choice != 'X' or p1_choice != 'O':          #while loop; if the entered value isn't X or O;",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 50,
        "column": 11,
        "message_id": "R1714",
        "message_type": "refactor",
        "symbol": "consider-using-in",
        "message": "Consider merging these comparisons with 'in' by using 'p1_choice in ('X', 'O')'. Use a set instead if elements are hashable.",
        "module": "tic-tac-toe-AI",
        "line_content": "if p1_choice == 'X' or p1_choice == 'O':",
        "line_number": 50,
        "context_before": [
            "#Thereby, increasing the user input window;",
            ""
        ],
        "context_after": [
            "#if entered value is X or O; get out of the loop;",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 69,
        "column": 4,
        "message_id": "C0415",
        "message_type": "convention",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (random)",
        "module": "tic-tac-toe-AI",
        "line_content": "import random",
        "line_number": 69,
        "context_before": [
            "def first_player():",
            "#This function will randomly decide who will go first;"
        ],
        "context_after": [
            "return random.choice((0, 1))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 74,
        "column": 19,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[7],board[8],board[9]) + \"            \" + \" {} | {} | {} \".format(avail[7],avail[8],avail[9]))",
        "line_number": 74,
        "context_before": [
            "",
            "def display_board(board, avail):"
        ],
        "context_after": [
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")",
            "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 74,
        "column": 90,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[7],board[8],board[9]) + \"            \" + \" {} | {} | {} \".format(avail[7],avail[8],avail[9]))",
        "line_number": 74,
        "context_before": [
            "",
            "def display_board(board, avail):"
        ],
        "context_after": [
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")",
            "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 76,
        "column": 19,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))",
        "line_number": 76,
        "context_before": [
            "print(\"    \" + \" {} | {} | {} \".format(board[7],board[8],board[9]) + \"            \" + \" {} | {} | {} \".format(avail[7],avail[8],avail[9]))",
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")"
        ],
        "context_after": [
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")",
            "print(\"    \" + \" {} | {} | {} \".format(board[1],board[2],board[3]) + \"            \" + \" {} | {} | {} \".format(avail[1],avail[2],avail[3]))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 76,
        "column": 90,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))",
        "line_number": 76,
        "context_before": [
            "print(\"    \" + \" {} | {} | {} \".format(board[7],board[8],board[9]) + \"            \" + \" {} | {} | {} \".format(avail[7],avail[8],avail[9]))",
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")"
        ],
        "context_after": [
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")",
            "print(\"    \" + \" {} | {} | {} \".format(board[1],board[2],board[3]) + \"            \" + \" {} | {} | {} \".format(avail[1],avail[2],avail[3]))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 78,
        "column": 19,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[1],board[2],board[3]) + \"            \" + \" {} | {} | {} \".format(avail[1],avail[2],avail[3]))",
        "line_number": 78,
        "context_before": [
            "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))",
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 78,
        "column": 90,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "tic-tac-toe-AI",
        "line_content": "print(\"    \" + \" {} | {} | {} \".format(board[1],board[2],board[3]) + \"            \" + \" {} | {} | {} \".format(avail[1],avail[2],avail[3]))",
        "line_number": 78,
        "context_before": [
            "print(\"    \" + \" {} | {} | {} \".format(board[4],board[5],board[6]) + \"            \" + \" {} | {} | {} \".format(avail[4],avail[5],avail[6]))",
            "print(\"    \" + \"-----------\" + \"            \" + \"-----------\")"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 81,
        "column": 31,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'choice' from outer scope (line 37)",
        "module": "tic-tac-toe-AI",
        "line_content": "def player_choice(board, name, choice):",
        "line_number": 81,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "position = 0",
            "#Initialising position as 0^; so it passes through the while loop;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 82,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'position' from outer scope (line 259)",
        "module": "tic-tac-toe-AI",
        "line_content": "position = 0",
        "line_number": 82,
        "context_before": [
            "",
            "def player_choice(board, name, choice):"
        ],
        "context_after": [
            "#Initialising position as 0^; so it passes through the while loop;",
            "while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 89,
        "column": 18,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "tic-tac-toe-AI",
        "line_content": "print(f\"INVALID INPUT. Please Try Again!\\n\")",
        "line_number": 89,
        "context_before": [
            "if position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position) or position == \"\":",
            "#To check whether the given position is in the set [1-9] or whether it is empty or occupied;"
        ],
        "context_after": [
            "print(\"\\n\")",
            "return position"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 95,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"CompAI\" doesn't conform to snake_case naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "def CompAI(board, name, choice):",
        "line_number": 95,
        "context_before": [
            "",
            "# THIS IS THEFUNCTION WHERE AI IS ADDED:"
        ],
        "context_after": [
            "position = 0",
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 95,
        "column": 24,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'choice' from outer scope (line 37)",
        "module": "tic-tac-toe-AI",
        "line_content": "def CompAI(board, name, choice):",
        "line_number": 95,
        "context_before": [
            "",
            "# THIS IS THEFUNCTION WHERE AI IS ADDED:"
        ],
        "context_after": [
            "position = 0",
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 96,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'position' from outer scope (line 259)",
        "module": "tic-tac-toe-AI",
        "line_content": "position = 0",
        "line_number": 96,
        "context_before": [
            "# THIS IS THEFUNCTION WHERE AI IS ADDED:",
            "def CompAI(board, name, choice):"
        ],
        "context_after": [
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 104,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"boardCopy\" doesn't conform to snake_case naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "boardCopy = board[:]",
        "line_number": 104,
        "context_before": [
            "# Creating a copy of the board everytime, placing the move and checking if it wins;",
            "# Creating a copy like this  and not this boardCopy = board, since changes to boardCopy changes the original board;"
        ],
        "context_after": [
            "boardCopy[i] = let",
            "if(win_check(boardCopy, let)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 110,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"openCorners\" doesn't conform to snake_case naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "openCorners = [x for x in possibilities if x in [1, 3, 7, 9]]",
        "line_number": 110,
        "context_before": [
            "return position",
            ""
        ],
        "context_after": [
            "",
            "if len(openCorners) > 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 120,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"openEdges\" doesn't conform to snake_case naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "openEdges = [x for x in possibilities if x in [2, 4, 6, 8]]",
        "line_number": 120,
        "context_before": [
            "return position",
            ""
        ],
        "context_after": [
            "",
            "if len(openEdges) > 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 95,
        "column": 0,
        "message_id": "R1710",
        "message_type": "refactor",
        "symbol": "inconsistent-return-statements",
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "module": "tic-tac-toe-AI",
        "line_content": "def CompAI(board, name, choice):",
        "line_number": 95,
        "context_before": [
            "",
            "# THIS IS THEFUNCTION WHERE AI IS ADDED:"
        ],
        "context_after": [
            "position = 0",
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 95,
        "column": 18,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'name'",
        "module": "tic-tac-toe-AI",
        "line_content": "def CompAI(board, name, choice):",
        "line_number": 95,
        "context_before": [
            "",
            "# THIS IS THEFUNCTION WHERE AI IS ADDED:"
        ],
        "context_after": [
            "position = 0",
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 95,
        "column": 24,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'choice'",
        "module": "tic-tac-toe-AI",
        "line_content": "def CompAI(board, name, choice):",
        "line_number": 95,
        "context_before": [
            "",
            "# THIS IS THEFUNCTION WHERE AI IS ADDED:"
        ],
        "context_after": [
            "position = 0",
            "possibilities = [x for x, letter in enumerate(board) if letter == ' ' and x != 0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 128,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"selectRandom\" doesn't conform to snake_case naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "def selectRandom(board):",
        "line_number": 128,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "import random",
            "ln = len(board)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 129,
        "column": 4,
        "message_id": "C0415",
        "message_type": "convention",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (random)",
        "module": "tic-tac-toe-AI",
        "line_content": "import random",
        "line_number": 129,
        "context_before": [
            "",
            "def selectRandom(board):"
        ],
        "context_after": [
            "ln = len(board)",
            "r = random.randrange(0,ln)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 135,
        "column": 31,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'choice' from outer scope (line 37)",
        "module": "tic-tac-toe-AI",
        "line_content": "def place_marker(board, avail, choice, position):",
        "line_number": 135,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "#To mark/replace the position on the board list;",
            "board[position] = choice"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 135,
        "column": 39,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'position' from outer scope (line 259)",
        "module": "tic-tac-toe-AI",
        "line_content": "def place_marker(board, avail, choice, position):",
        "line_number": 135,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "#To mark/replace the position on the board list;",
            "board[position] = choice"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 141,
        "column": 23,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'position' from outer scope (line 259)",
        "module": "tic-tac-toe-AI",
        "line_content": "def space_check(board, position):",
        "line_number": 141,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "#To check whether the given position is empty or occupied;",
            "return board[position] == ' '"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 154,
        "column": 21,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'choice' from outer scope (line 37)",
        "module": "tic-tac-toe-AI",
        "line_content": "def win_check(board, choice):",
        "line_number": 154,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "#To check if one of the following patterns are true; then the respective player has won!;",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 170,
        "column": 10,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'mode' from outer scope (line 207)",
        "module": "tic-tac-toe-AI",
        "line_content": "def delay(mode):",
        "line_number": 170,
        "context_before": [
            "or ( board[3] == choice and board[5] == choice and board[7] == choice )  )",
            ""
        ],
        "context_after": [
            "if mode == 2:",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 172,
        "column": 8,
        "message_id": "C0415",
        "message_type": "convention",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (time)",
        "module": "tic-tac-toe-AI",
        "line_content": "import time",
        "line_number": 172,
        "context_before": [
            "def delay(mode):",
            "if mode == 2:"
        ],
        "context_after": [
            "time.sleep(2)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 218,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"p2_name\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "p2_name = \"Computer\"",
        "line_number": 218,
        "context_before": [
            "elif mode == 0:",
            "p1_name = input(\"\\nEnter NAME of PLAYER who will go against the Computer:\\t\").capitalize()"
        ],
        "context_after": [
            "# Asking Choices; Printing choices; X or O;",
            "p1_choice, p2_choice = choice()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 225,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"p1_name\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "p1_name = \"Computer1\"",
        "line_number": 225,
        "context_before": [
            "",
            "else:"
        ],
        "context_after": [
            "p2_name = \"Computer2\"",
            "p1_choice, p2_choice = \"X\", \"O\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 226,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"p2_name\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "p2_name = \"Computer2\"",
        "line_number": 226,
        "context_before": [
            "else:",
            "p1_name = \"Computer1\""
        ],
        "context_after": [
            "p1_choice, p2_choice = \"X\", \"O\"",
            "print(f\"\\n{p1_name}:\", p1_choice)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 244,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"play_game\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "play_game = 1",
        "line_number": 244,
        "context_before": [
            "if(mode == 2):",
            "ent = input(\"\\nThis is going to be fast! Press Enter for the battle to begin!\\n\")"
        ],
        "context_after": [
            "else:",
            "play_game = play()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 259,
        "column": 16,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"position\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "position = player_choice(theBoard, p1_name, p1_choice)",
        "line_number": 259,
        "context_before": [
            "#Position of the input;",
            "if mode != 2:"
        ],
        "context_after": [
            "else:",
            "position = CompAI(theBoard, p1_name, p1_choice)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 276,
        "column": 16,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"play_game\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "play_game = False",
        "line_number": 276,
        "context_before": [
            "print('\\n\\nTHE Computer HAS WON THE GAME!\\n\\n')",
            "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")"
        ],
        "context_after": [
            "",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 280,
        "column": 16,
        "message_id": "R1723",
        "message_type": "refactor",
        "symbol": "no-else-break",
        "message": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
        "module": "tic-tac-toe-AI",
        "line_content": "if full_board_check(theBoard):",
        "line_number": 280,
        "context_before": [
            "else:",
            "#To check if the board is full; if yes, the game is a draw;"
        ],
        "context_after": [
            "display_board(theBoard, available)",
            "print(\"~~~~~~~~~~~~~~~~~~\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 300,
        "column": 16,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"position\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "position = player_choice(theBoard, p2_name, p2_choice)",
        "line_number": 300,
        "context_before": [
            "#Position of the input;",
            "if(mode == 1):"
        ],
        "context_after": [
            "else:",
            "position = CompAI(theBoard, p2_name, p2_choice)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 317,
        "column": 16,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"play_game\" doesn't conform to UPPER_CASE naming style",
        "module": "tic-tac-toe-AI",
        "line_content": "play_game = False",
        "line_number": 317,
        "context_before": [
            "print('\\n\\nTHE Computer HAS WON THE GAME!\\n\\n')",
            "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")"
        ],
        "context_after": [
            "",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 321,
        "column": 16,
        "message_id": "R1723",
        "message_type": "refactor",
        "symbol": "no-else-break",
        "message": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
        "module": "tic-tac-toe-AI",
        "line_content": "if full_board_check(theBoard):",
        "line_number": 321,
        "context_before": [
            "else:",
            "#To check if the board is full; if yes, the game is a draw;"
        ],
        "context_after": [
            "display_board(theBoard, available)",
            "print(\"~~~~~~~~~~~~~~~~~~\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe_with_ai/tic-tac-toe-AI.py",
        "line": 333,
        "column": 4,
        "message_id": "R1724",
        "message_type": "refactor",
        "symbol": "no-else-continue",
        "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
        "module": "tic-tac-toe-AI",
        "line_content": "if replay():",
        "line_number": 333,
        "context_before": [
            "",
            "#If the users want to play the game again?"
        ],
        "context_after": [
            "#if Yes;",
            "continue"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pandas'",
        "module": "proxytest",
        "line_content": "import pandas as pd",
        "line_number": 5,
        "context_before": [
            "from pathlib import Path",
            ""
        ],
        "context_after": [
            "import requests",
            "from requests.exceptions import ProxyError"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "proxytest",
        "line_content": "import requests",
        "line_number": 6,
        "context_before": [
            "",
            "import pandas as pd"
        ],
        "context_after": [
            "from requests.exceptions import ProxyError",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests.exceptions'",
        "module": "proxytest",
        "line_content": "from requests.exceptions import ProxyError",
        "line_number": 7,
        "context_before": [
            "import pandas as pd",
            "import requests"
        ],
        "context_after": [
            "",
            "logging.basicConfig(level=logging.INFO)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 47,
        "column": 4,
        "message_id": "W1203",
        "message_type": "warning",
        "symbol": "logging-fstring-interpolation",
        "message": "Use lazy % formatting in logging functions",
        "module": "proxytest",
        "line_content": "logging.info(f'Testing proxy: {proxy_address}')",
        "line_number": 47,
        "context_before": [
            "and tests it against a given iptest adress.'''",
            ""
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 64,
        "column": 16,
        "message_id": "W1203",
        "message_type": "warning",
        "symbol": "logging-fstring-interpolation",
        "message": "Use lazy % formatting in logging functions",
        "module": "proxytest",
        "line_content": "logging.warning(f'Proxy \"{proxy_address}\"'",
        "line_number": 64,
        "context_before": [
            "proxy_status = 'Proxy functional'",
            "else:"
        ],
        "context_after": [
            "f'returned {json_response}')",
            "proxy_status = 'Proxy not functional'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 72,
        "column": 4,
        "message_id": "W1203",
        "message_type": "warning",
        "symbol": "logging-fstring-interpolation",
        "message": "Use lazy % formatting in logging functions",
        "module": "proxytest",
        "line_content": "logging.info(f'Proxy {proxy_address}: {proxy_status}')",
        "line_number": 72,
        "context_before": [
            "proxy_status = 'Proxy error'",
            ""
        ],
        "context_after": [
            "return {'proxy_type': proxy_type,",
            "'proxy_address': proxy_address,"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 98,
        "column": 8,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'index'",
        "module": "proxytest",
        "line_content": "for index, proxy in pr_file.iterrows():",
        "line_number": 98,
        "context_before": [
            "proxies: list = []",
            ""
        ],
        "context_after": [
            "proxies.append(test_proxy(proxy['proxy_type'],",
            "proxy['proxy_address'],"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 112,
        "column": 24,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "proxytest",
        "line_content": "proxies: list = text_path.read_text().splitlines()",
        "line_number": 112,
        "context_before": [
            "",
            "if text_path.exists():"
        ],
        "context_after": [
            "",
            "for proxy in proxies:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/proxytest.py",
        "line": 115,
        "column": 12,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "proxytest",
        "line_content": "'''We will treat each proxy as a single proxy",
        "line_number": 115,
        "context_before": [
            "",
            "for proxy in proxies:"
        ],
        "context_after": [
            "and leverage the existing function'''",
            "test_single_proxy(proxy, iptest, csv_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/cli.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'click'",
        "module": "cli",
        "line_content": "import click",
        "line_number": 3,
        "context_before": [
            "import re",
            ""
        ],
        "context_after": [
            "",
            "from proxytest import add_from_text_file"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/cli.py",
        "line": 16,
        "column": 4,
        "message_id": "R1720",
        "message_type": "refactor",
        "symbol": "no-else-raise",
        "message": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
        "module": "cli",
        "line_content": "if not validator.match(value):",
        "line_number": 16,
        "context_before": [
            "r'|([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?)')",
            ""
        ],
        "context_after": [
            "raise click.BadParameter('Please provide a proxy in the format'",
            "'type://address (e.g., https://42.42.42.42)')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/cli.py",
        "line": 10,
        "column": 19,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'ctx'",
        "module": "cli",
        "line_content": "def validate_proxy(ctx, param, value):",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''Validate proxy input. The RegEx crudely matches both IPv4 and URLs.'''",
            "validator = re.compile(r'(https|http|socks4|socks5):\\/\\/'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cli_proxy_tester/cli.py",
        "line": 10,
        "column": 24,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'param'",
        "module": "cli",
        "line_content": "def validate_proxy(ctx, param, value):",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''Validate proxy input. The RegEx crudely matches both IPv4 and URLs.'''",
            "validator = re.compile(r'(https|http|socks4|socks5):\\/\\/'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_a_image_to_pdf/convert_image_to_pdf.py",
        "line": 23,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "convert_image_to_pdf",
        "line_content": "",
        "line_number": 23,
        "context_before": [
            "else:",
            "print(\"please input file or dir\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Convert_a_image_to_pdf/convert_image_to_pdf.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'img2pdf'",
        "module": "convert_image_to_pdf",
        "line_content": "import img2pdf",
        "line_number": 2,
        "context_before": [
            "import sys"
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_a_image_to_pdf/convert_image_to_pdf.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"img2pdf\"",
        "module": "convert_image_to_pdf",
        "line_content": "import os",
        "line_number": 3,
        "context_before": [
            "import sys",
            "import img2pdf"
        ],
        "context_after": [
            "",
            "filepath = sys.argv[1]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_File/split_files.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pandas'",
        "module": "split_files",
        "line_content": "import pandas as pd",
        "line_number": 4,
        "context_before": [
            "import os",
            "import shutil"
        ],
        "context_after": [
            "",
            "class Split_Files:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_File/split_files.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"Split_Files\" doesn't conform to PascalCase naming style",
        "module": "split_files",
        "line_content": "class Split_Files:",
        "line_number": 6,
        "context_before": [
            "import pandas as pd",
            ""
        ],
        "context_after": [
            "'''",
            "Class file for split file program"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_File/split_files.py",
        "line": 10,
        "column": 33,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'split_number' from outer scope (line 53)",
        "module": "split_files",
        "line_content": "def __init__(self, filename, split_number):",
        "line_number": 10,
        "context_before": [
            "Class file for split file program",
            "'''"
        ],
        "context_after": [
            "'''",
            "Getting the file name and the split index"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_File/split_files.py",
        "line": 6,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "module": "split_files",
        "line_content": "class Split_Files:",
        "line_number": 6,
        "context_before": [
            "import pandas as pd",
            ""
        ],
        "context_after": [
            "'''",
            "Class file for split file program"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convert.py",
        "line": 5,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "convert",
        "line_content": "img.save('output.ico')",
        "line_number": 5,
        "context_before": [
            "img = Image.open('input.png')",
            "# Generate and save output image to present folder"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convert.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "convert",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "# Take input image from present folder",
            "img = Image.open('input.png')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 22,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (106/100)",
        "module": "convertUI",
        "line_content": "'''Function to convert image from png to ico format with pillow and save to user specified location'''",
        "line_number": 22,
        "context_before": [
            "def convertToICO():",
            "global img"
        ],
        "context_after": [
            "if img is None:",
            "tk.messagebox.showerror(\"Error\", \"No File selected\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 39,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (102/100)",
        "module": "convertUI",
        "line_content": "browseButton = tk.Button(text=\"Import PNG File\", command=getPNG, bg=bg, fg=fg, font=font, width=width)",
        "line_number": 39,
        "context_before": [
            "canvas1.create_window(250, 100, window=label1)",
            "# Browse button to browse for image"
        ],
        "context_after": [
            "canvas1.create_window(250, 150, window=browseButton)",
            "# Convert button to convert selected image and save"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 42,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (111/100)",
        "module": "convertUI",
        "line_content": "saveAsButton = tk.Button(text='Convert PNG to ICO', command=convertToICO, bg=bg, fg=fg, font=font, width=width)",
        "line_number": 42,
        "context_before": [
            "canvas1.create_window(250, 150, window=browseButton)",
            "# Convert button to convert selected image and save"
        ],
        "context_after": [
            "canvas1.create_window(250, 200, window=saveAsButton)",
            "root.mainloop()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"convertUI\" doesn't conform to snake_case naming style",
        "module": "convertUI",
        "line_content": "import tkinter as tk",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from PIL import Image",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "convertUI",
        "line_content": "from PIL import Image",
        "line_number": 2,
        "context_before": [
            "import tkinter as tk"
        ],
        "context_after": [
            "",
            "# Initialize Tkinter window"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"img\" doesn't conform to UPPER_CASE naming style",
        "module": "convertUI",
        "line_content": "img = None",
        "line_number": 7,
        "context_before": [
            "root = tk.Tk()",
            "# Initialize variable to store image path"
        ],
        "context_after": [
            "# Initialize font, background color, foreground color and width for the buttons",
            "font = ('helvetica', 12, 'bold')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 10,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bg\" doesn't conform to UPPER_CASE naming style",
        "module": "convertUI",
        "line_content": "bg = 'blue'",
        "line_number": 10,
        "context_before": [
            "# Initialize font, background color, foreground color and width for the buttons",
            "font = ('helvetica', 12, 'bold')"
        ],
        "context_after": [
            "fg = 'white'",
            "width = 15"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 11,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"fg\" doesn't conform to UPPER_CASE naming style",
        "module": "convertUI",
        "line_content": "fg = 'white'",
        "line_number": 11,
        "context_before": [
            "font = ('helvetica', 12, 'bold')",
            "bg = 'blue'"
        ],
        "context_after": [
            "width = 15",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 12,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"width\" doesn't conform to UPPER_CASE naming style",
        "module": "convertUI",
        "line_content": "width = 15",
        "line_number": 12,
        "context_before": [
            "bg = 'blue'",
            "fg = 'white'"
        ],
        "context_after": [
            "",
            "def getPNG():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 14,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"getPNG\" doesn't conform to snake_case naming style",
        "module": "convertUI",
        "line_content": "def getPNG():",
        "line_number": 14,
        "context_before": [
            "width = 15",
            ""
        ],
        "context_after": [
            "'''Function to get png image location and open it with pillow'''",
            "global img"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 16,
        "column": 4,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "convertUI",
        "line_content": "global img",
        "line_number": 16,
        "context_before": [
            "def getPNG():",
            "'''Function to get png image location and open it with pillow'''"
        ],
        "context_after": [
            "import_file_path = tk.filedialog.askopenfilename(filetypes=[(\"PNG File\",'.png')])",
            "img = Image.open(import_file_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 20,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"convertToICO\" doesn't conform to snake_case naming style",
        "module": "convertUI",
        "line_content": "def convertToICO():",
        "line_number": 20,
        "context_before": [
            "img = Image.open(import_file_path)",
            ""
        ],
        "context_after": [
            "global img",
            "'''Function to convert image from png to ico format with pillow and save to user specified location'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 21,
        "column": 4,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'img' but no assignment is done",
        "module": "convertUI",
        "line_content": "global img",
        "line_number": 21,
        "context_before": [
            "",
            "def convertToICO():"
        ],
        "context_after": [
            "'''Function to convert image from png to ico format with pillow and save to user specified location'''",
            "if img is None:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_png_images_to_ico_format/convertUI.py",
        "line": 22,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "convertUI",
        "line_content": "'''Function to convert image from png to ico format with pillow and save to user specified location'''",
        "line_number": 22,
        "context_before": [
            "def convertToICO():",
            "global img"
        ],
        "context_after": [
            "if img is None:",
            "tk.messagebox.showerror(\"Error\", \"No File selected\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_XML_To_JSON/converter.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'xmltodict'",
        "module": "converter",
        "line_content": "import xmltodict",
        "line_number": 2,
        "context_before": [
            "import json"
        ],
        "context_after": [
            "",
            "with open('input.xml') as xml_file:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_XML_To_JSON/converter.py",
        "line": 4,
        "column": 5,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "converter",
        "line_content": "with open('input.xml') as xml_file:",
        "line_number": 4,
        "context_before": [
            "import xmltodict",
            ""
        ],
        "context_after": [
            "parsed_data = xmltodict.parse(xml_file.read())",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_XML_To_JSON/converter.py",
        "line": 11,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "converter",
        "line_content": "with open('output.json', 'w') as json_file:",
        "line_number": 11,
        "context_before": [
            "json_conversion = json.dumps(parsed_data)",
            ""
        ],
        "context_after": [
            "json_file.write(json_conversion)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "background_windows",
        "line_content": "from requests import get",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "import ctypes"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"url\" doesn't conform to UPPER_CASE naming style",
        "module": "background_windows",
        "line_content": "url = \"https://source.unsplash.com/random\"",
        "line_number": 6,
        "context_before": [
            "import sys",
            ""
        ],
        "context_after": [
            "file_name = \"random.jpg\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"file_name\" doesn't conform to UPPER_CASE naming style",
        "module": "background_windows",
        "line_content": "file_name = \"random.jpg\"",
        "line_number": 7,
        "context_before": [
            "",
            "url = \"https://source.unsplash.com/random\""
        ],
        "context_after": [
            "",
            "def is_64bit():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 13,
        "column": 13,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'url' from outer scope (line 6)",
        "module": "background_windows",
        "line_content": "def download(url, file_name):",
        "line_number": 13,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''",
            "downloading the file and saving it"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 13,
        "column": 18,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'file_name' from outer scope (line 7)",
        "module": "background_windows",
        "line_content": "def download(url, file_name):",
        "line_number": 13,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''",
            "downloading the file and saving it"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 25,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"SPI_SETDESKWALLPAPER\" doesn't conform to snake_case naming style",
        "module": "background_windows",
        "line_content": "SPI_SETDESKWALLPAPER = 20",
        "line_number": 25,
        "context_before": [
            "name_of_file = pathtofile",
            "path_to_file = os.path.join(os.getcwd(), name_of_file)"
        ],
        "context_after": [
            "if is_64bit():",
            "ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, path_to_file, 0)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 22,
        "column": 21,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'version'",
        "module": "background_windows",
        "line_content": "def setup(pathtofile,version):",
        "line_number": 22,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "name_of_file = pathtofile",
            "path_to_file = os.path.join(os.getcwd(), name_of_file)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 35,
        "column": 8,
        "message_id": "E1120",
        "message_type": "error",
        "symbol": "no-value-for-parameter",
        "message": "No value for argument 'version' in function call",
        "module": "background_windows",
        "line_content": "setup(file_name)",
        "line_number": 35,
        "context_before": [
            "try:",
            "download(url, file_name)"
        ],
        "context_after": [
            "except Exception as e:",
            "print(f\"Error {e}\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 38,
        "column": 8,
        "message_id": "W0707",
        "message_type": "warning",
        "symbol": "raise-missing-from",
        "message": "Consider explicitly re-raising using 'raise NotImplementedError from e'",
        "module": "background_windows",
        "line_content": "raise NotImplementedError",
        "line_number": 38,
        "context_before": [
            "except Exception as e:",
            "print(f\"Error {e}\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"requests.get\"",
        "module": "background_windows",
        "line_content": "import os",
        "line_number": 2,
        "context_before": [
            "from requests import get"
        ],
        "context_after": [
            "import ctypes",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"ctypes\" should be placed before third party import \"requests.get\"",
        "module": "background_windows",
        "line_content": "import ctypes",
        "line_number": 3,
        "context_before": [
            "from requests import get",
            "import os"
        ],
        "context_after": [
            "import sys",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_windows.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party import \"requests.get\"",
        "module": "background_windows",
        "line_content": "import sys",
        "line_number": 4,
        "context_before": [
            "import os",
            "import ctypes"
        ],
        "context_after": [
            "",
            "url = \"https://source.unsplash.com/random\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_linux.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "background_linux",
        "line_content": "from requests import get  # to make GET request",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from os import system, getcwd, path",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_linux.py",
        "line": 5,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"url\" doesn't conform to UPPER_CASE naming style",
        "module": "background_linux",
        "line_content": "url = \"https://source.unsplash.com/random\"",
        "line_number": 5,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "filename = \"random.jpg\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_linux.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"filename\" doesn't conform to UPPER_CASE naming style",
        "module": "background_linux",
        "line_content": "filename = \"random.jpg\"",
        "line_number": 6,
        "context_before": [
            "",
            "url = \"https://source.unsplash.com/random\""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_linux.py",
        "line": 9,
        "column": 13,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'url' from outer scope (line 5)",
        "module": "background_linux",
        "line_content": "def download(url, file_name):",
        "line_number": 9,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''",
            "downloading the file and saving it"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_linux.py",
        "line": 22,
        "column": 11,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "background_linux",
        "line_content": "system(\"nitrogen --set-auto {}\".format(path.join(getcwd(), pathtofile)))",
        "line_number": 22,
        "context_before": [
            "setting the up file",
            "'''"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_a_script_to_download_a_random_image_from_unsplash_and_set_it_as_wallpaper/background_linux.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os.system\" should be placed before third party import \"requests.get\"",
        "module": "background_linux",
        "line_content": "from os import system, getcwd, path",
        "line_number": 2,
        "context_before": [
            "from requests import get  # to make GET request"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 56,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "wl_label.config(text=\"YOU Loose - \"+\" Computer: I am playing this game since i was born\")",
        "line_number": 56,
        "context_before": [
            "wl_label.config(text=\"Tie!\")",
            "elif choose_number == 0:"
        ],
        "context_after": [
            "elif choose_number == 1 :",
            "wl_label.config(text=\"YOU Won\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Rock-Paper-Scissors Game\" doesn't conform to snake_case naming style",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "# Import Required Library",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from tkinter import *",
            "from tkinter import ttk"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 15,
        "column": 0,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'list'",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "list = [\"rock\",\"paper\",\"scissors\"]",
        "line_number": 15,
        "context_before": [
            "",
            "# List of players"
        ],
        "context_after": [
            "",
            "choose_number = randint(0,2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 2,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "from tkinter import *",
        "line_number": 2,
        "context_before": [
            "# Import Required Library"
        ],
        "context_after": [
            "from tkinter import ttk",
            "from random import *"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 4,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import random",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "from random import *",
        "line_number": 4,
        "context_before": [
            "from tkinter import *",
            "from tkinter import ttk"
        ],
        "context_after": [
            "",
            "# Create Object"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 24,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'choose_number' from outer scope (line 17)",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "choose_number = randint(0,2)",
        "line_number": 24,
        "context_before": [
            "",
            "def spin():"
        ],
        "context_after": [
            "label.config(text=list[choose_number])",
            "if user_select.get() == \"Rock\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 23,
        "column": 0,
        "message_id": "R0912",
        "message_type": "refactor",
        "symbol": "too-many-branches",
        "message": "Too many branches (15/12)",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "def spin():",
        "line_number": 23,
        "context_before": [
            "label.pack()",
            ""
        ],
        "context_after": [
            "choose_number = randint(0,2)",
            "label.config(text=list[choose_number])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 2,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, StringVar, IntVar, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, Grid, BaseWidget, Widget, Toplevel, Canvas, Checkbutton, Entry, Frame, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, Scrollbar, Text, OptionMenu, Image, PhotoImage, BitmapImage, image_names, image_types, Spinbox, LabelFrame, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, E, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, X, Y, BOTH, LEFT, TOP, RIGHT, BOTTOM, RAISED, SUNKEN, FLAT, RIDGE, GROOVE, SOLID, HORIZONTAL, VERTICAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, END, INSERT, CURRENT, ANCHOR, ALL, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "from tkinter import *",
        "line_number": 2,
        "context_before": [
            "# Import Required Library"
        ],
        "context_after": [
            "from tkinter import ttk",
            "from random import *"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/GUI Rock-Paper-Scissors Game/Rock-Paper-Scissors Game.py",
        "line": 4,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) NV_MAGICCONST, LOG4, SG_MAGICCONST, BPF, RECIP_BPF, Random, SystemRandom, seed, random, uniform, triangular, choice, randrange, sample, shuffle, choices, normalvariate, lognormvariate, expovariate, vonmisesvariate, gammavariate, gauss, betavariate, binomialvariate, paretovariate, weibullvariate, getstate, setstate, getrandbits, randbytes, main and TWOPI from wildcard import of random",
        "module": "Rock-Paper-Scissors Game",
        "line_content": "from random import *",
        "line_number": 4,
        "context_before": [
            "from tkinter import *",
            "from tkinter import ttk"
        ],
        "context_after": [
            "",
            "# Create Object"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 13,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'while' keyword",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "while(comp_count+user_count<games):",
        "line_number": 13,
        "context_before": [
            "games=int(input(\"\\nEnter the number of games you want to play: \"))",
            ""
        ],
        "context_after": [
            "#WHILE LOOP STARTS;",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 16,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "flag=0",
        "line_number": 16,
        "context_before": [
            "#WHILE LOOP STARTS;",
            ""
        ],
        "context_after": [
            "",
            "user_input=input(\"\\nUser's Input: \")[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 18,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "user_input=input(\"\\nUser's Input: \")[0]",
        "line_number": 18,
        "context_before": [
            "flag=0",
            ""
        ],
        "context_after": [
            "user_input=user_input.upper()",
            "#The [0] after the input() will assign the first charcter of input to the variable;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 19,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "user_input=user_input.upper()",
        "line_number": 19,
        "context_before": [
            "",
            "user_input=input(\"\\nUser's Input: \")[0]"
        ],
        "context_after": [
            "#The [0] after the input() will assign the first charcter of input to the variable;",
            "#Hence, the user can enter anything, anyway;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 21,
        "column": 45,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "#Hence, the user can enter anything, anyway;",
        "line_number": 21,
        "context_before": [
            "user_input=user_input.upper()",
            "#The [0] after the input() will assign the first charcter of input to the variable;"
        ],
        "context_after": [
            "#Example: The user can enter Rock or rock or r or R or ro or any such thing which represents Rock;",
            "#It will always take input as a R"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 26,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "for i in my_dict.keys():",
        "line_number": 26,
        "context_before": [
            "#Thereby, increasing the user input window;",
            ""
        ],
        "context_after": [
            "if(user_input==i):\t\t#If the entered input is confined to Rock, Paper or Scissors;",
            "flag=1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 27,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "if(user_input==i):\t\t#If the entered input is confined to Rock, Paper or Scissors;",
        "line_number": 27,
        "context_before": [
            "",
            "for i in my_dict.keys():"
        ],
        "context_after": [
            "flag=1",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 27,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "if(user_input==i):\t\t#If the entered input is confined to Rock, Paper or Scissors;",
        "line_number": 27,
        "context_before": [
            "",
            "for i in my_dict.keys():"
        ],
        "context_after": [
            "flag=1",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 28,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "flag=1",
        "line_number": 28,
        "context_before": [
            "for i in my_dict.keys():",
            "if(user_input==i):\t\t#If the entered input is confined to Rock, Paper or Scissors;"
        ],
        "context_after": [
            "break",
            "if(flag!=1):\t\t\t\t#If not, run the loop again;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 29,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "break",
        "line_number": 29,
        "context_before": [
            "if(user_input==i):\t\t#If the entered input is confined to Rock, Paper or Scissors;",
            "flag=1"
        ],
        "context_after": [
            "if(flag!=1):\t\t\t\t#If not, run the loop again;",
            "print(\"INVALID INPUT\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 30,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "if(flag!=1):\t\t\t\t#If not, run the loop again;",
        "line_number": 30,
        "context_before": [
            "flag=1",
            "break"
        ],
        "context_after": [
            "print(\"INVALID INPUT\")",
            "continue"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 30,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "if(flag!=1):\t\t\t\t#If not, run the loop again;",
        "line_number": 30,
        "context_before": [
            "flag=1",
            "break"
        ],
        "context_after": [
            "print(\"INVALID INPUT\")",
            "continue"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 31,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"INVALID INPUT\")",
        "line_number": 31,
        "context_before": [
            "break",
            "if(flag!=1):\t\t\t\t#If not, run the loop again;"
        ],
        "context_after": [
            "continue",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 32,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "continue",
        "line_number": 32,
        "context_before": [
            "if(flag!=1):\t\t\t\t#If not, run the loop again;",
            "print(\"INVALID INPUT\")"
        ],
        "context_after": [
            "",
            "comp_input=random.choice(list(my_dict.keys()))\t#Random Key from the dictionary my_dict i.e. R,P or S;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 34,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (102/100)",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "comp_input=random.choice(list(my_dict.keys()))\t#Random Key from the dictionary my_dict i.e. R,P or S;",
        "line_number": 34,
        "context_before": [
            "continue",
            ""
        ],
        "context_after": [
            "",
            "print(\"Computer's Input: \", my_dict[comp_input])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 34,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "comp_input=random.choice(list(my_dict.keys()))\t#Random Key from the dictionary my_dict i.e. R,P or S;",
        "line_number": 34,
        "context_before": [
            "continue",
            ""
        ],
        "context_after": [
            "",
            "print(\"Computer's Input: \", my_dict[comp_input])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 36,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"Computer's Input: \", my_dict[comp_input])",
        "line_number": 36,
        "context_before": [
            "comp_input=random.choice(list(my_dict.keys()))\t#Random Key from the dictionary my_dict i.e. R,P or S;",
            ""
        ],
        "context_after": [
            "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):",
            "comp_count=comp_count+1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 37,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (130/100)",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):",
        "line_number": 37,
        "context_before": [
            "",
            "print(\"Computer's Input: \", my_dict[comp_input])"
        ],
        "context_after": [
            "comp_count=comp_count+1",
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 37,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):",
        "line_number": 37,
        "context_before": [
            "",
            "print(\"Computer's Input: \", my_dict[comp_input])"
        ],
        "context_after": [
            "comp_count=comp_count+1",
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 38,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "comp_count=comp_count+1",
        "line_number": 38,
        "context_before": [
            "print(\"Computer's Input: \", my_dict[comp_input])",
            "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):"
        ],
        "context_after": [
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):",
            "user_count=user_count+1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 39,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (132/100)",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):",
        "line_number": 39,
        "context_before": [
            "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):",
            "comp_count=comp_count+1"
        ],
        "context_after": [
            "user_count=user_count+1",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 39,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):",
        "line_number": 39,
        "context_before": [
            "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):",
            "comp_count=comp_count+1"
        ],
        "context_after": [
            "user_count=user_count+1",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 40,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "user_count=user_count+1",
        "line_number": 40,
        "context_before": [
            "comp_count=comp_count+1",
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):"
        ],
        "context_after": [
            "else:",
            "print(\"TIE\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 41,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "else:",
        "line_number": 41,
        "context_before": [
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):",
            "user_count=user_count+1"
        ],
        "context_after": [
            "print(\"TIE\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 42,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"TIE\")",
        "line_number": 42,
        "context_before": [
            "user_count=user_count+1",
            "else:"
        ],
        "context_after": [
            "",
            "print(\"\\nSCORE:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 44,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"\\nSCORE:\")",
        "line_number": 44,
        "context_before": [
            "print(\"TIE\")",
            ""
        ],
        "context_after": [
            "print(\"User Score:\",user_count,\"\\tComputer Score:\",comp_count,\"\\n\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 45,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"User Score:\",user_count,\"\\tComputer Score:\",comp_count,\"\\n\")",
        "line_number": 45,
        "context_before": [
            "",
            "print(\"\\nSCORE:\")"
        ],
        "context_after": [
            "",
            "#LOOP ENDS;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 52,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"\\n\\tCONGRATULATIONS! YOU WON!\")",
        "line_number": 52,
        "context_before": [
            "print(\"User Score:\",user_count,\"\\t\\t\\tComputer Score:\",comp_count,\"\\n\")",
            "if user_count>comp_count:"
        ],
        "context_after": [
            "elif user_count<comp_count:",
            "print(\"\\n\\t\\tSORRY! YOU LOST!\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 54,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"\\n\\t\\tSORRY! YOU LOST!\")",
        "line_number": 54,
        "context_before": [
            "print(\"\\n\\tCONGRATULATIONS! YOU WON!\")",
            "elif user_count<comp_count:"
        ],
        "context_after": [
            "else:",
            "print(\"\\n\\t\\tOOPS! IT'S A TIE!\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 56,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "print(\"\\n\\t\\tOOPS! IT'S A TIE!\")",
        "line_number": 56,
        "context_before": [
            "print(\"\\n\\t\\tSORRY! YOU LOST!\")",
            "else:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Rock_Paper_Scissors_Game\" doesn't conform to snake_case naming style",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "#START;",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "import random"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"user_count\" doesn't conform to UPPER_CASE naming style",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "user_count=0",
        "line_number": 7,
        "context_before": [
            "#DEFAULT;",
            "my_dict={'R':\"Rock\",'P':\"Paper\",'S':\"Scissors\"}"
        ],
        "context_after": [
            "comp_count=0",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 8,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"comp_count\" doesn't conform to UPPER_CASE naming style",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "comp_count=0",
        "line_number": 8,
        "context_before": [
            "my_dict={'R':\"Rock\",'P':\"Paper\",'S':\"Scissors\"}",
            "user_count=0"
        ],
        "context_after": [
            "",
            "#INPUT;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 16,
        "column": 1,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"flag\" doesn't conform to UPPER_CASE naming style",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "flag=0",
        "line_number": 16,
        "context_before": [
            "#WHILE LOOP STARTS;",
            ""
        ],
        "context_after": [
            "",
            "user_input=input(\"\\nUser's Input: \")[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 26,
        "column": 10,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "for i in my_dict.keys():",
        "line_number": 26,
        "context_before": [
            "#Thereby, increasing the user input window;",
            ""
        ],
        "context_after": [
            "if(user_input==i):\t\t#If the entered input is confined to Rock, Paper or Scissors;",
            "flag=1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 28,
        "column": 3,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"flag\" doesn't conform to UPPER_CASE naming style",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "flag=1",
        "line_number": 28,
        "context_before": [
            "for i in my_dict.keys():",
            "if(user_input==i):\t\t#If the entered input is confined to Rock, Paper or Scissors;"
        ],
        "context_after": [
            "break",
            "if(flag!=1):\t\t\t\t#If not, run the loop again;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 37,
        "column": 4,
        "message_id": "R0916",
        "message_type": "refactor",
        "symbol": "too-many-boolean-expressions",
        "message": "Too many boolean expressions in if statement (6/5)",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):",
        "line_number": 37,
        "context_before": [
            "",
            "print(\"Computer's Input: \", my_dict[comp_input])"
        ],
        "context_after": [
            "comp_count=comp_count+1",
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 38,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"comp_count\" doesn't conform to UPPER_CASE naming style",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "comp_count=comp_count+1",
        "line_number": 38,
        "context_before": [
            "print(\"Computer's Input: \", my_dict[comp_input])",
            "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):"
        ],
        "context_after": [
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):",
            "user_count=user_count+1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 39,
        "column": 6,
        "message_id": "R0916",
        "message_type": "refactor",
        "symbol": "too-many-boolean-expressions",
        "message": "Too many boolean expressions in if statement (6/5)",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):",
        "line_number": 39,
        "context_before": [
            "if ( user_input=='R' and comp_input=='P' ) or ( user_input=='P' and comp_input=='S' ) or ( user_input=='S' and comp_input=='R' ):",
            "comp_count=comp_count+1"
        ],
        "context_after": [
            "user_count=user_count+1",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/RockPaperScissors_Game/Rock_Paper_Scissors_Game.py",
        "line": 40,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"user_count\" doesn't conform to UPPER_CASE naming style",
        "module": "Rock_Paper_Scissors_Game",
        "line_content": "user_count=user_count+1",
        "line_number": 40,
        "context_before": [
            "comp_count=comp_count+1",
            "elif ( user_input=='P' and comp_input=='R' ) or ( user_input=='S' and comp_input=='P' ) or ( user_input=='R' and comp_input=='S' ):"
        ],
        "context_after": [
            "else:",
            "print(\"TIE\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_compress_folder_and_files/zipfiles.py",
        "line": 9,
        "column": 24,
        "message_id": "E0606",
        "message_type": "error",
        "symbol": "possibly-used-before-assignment",
        "message": "Possibly using variable 'path' before assignment",
        "module": "zipfiles",
        "line_content": "compress_file.write(path, compress_type=zipfile.ZIP_DEFLATED)",
        "line_number": 9,
        "context_before": [
            "def zip_file(file_path):",
            "compress_file = zipfile.ZipFile(file_path + '.zip', 'w')"
        ],
        "context_after": [
            "compress_file.close()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_compress_folder_and_files/zipfiles.py",
        "line": 8,
        "column": 20,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "zipfiles",
        "line_content": "compress_file = zipfile.ZipFile(file_path + '.zip', 'w')",
        "line_number": 8,
        "context_before": [
            "# compress file function",
            "def zip_file(file_path):"
        ],
        "context_after": [
            "compress_file.write(path, compress_type=zipfile.ZIP_DEFLATED)",
            "compress_file.close()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_compress_folder_and_files/zipfiles.py",
        "line": 19,
        "column": 14,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'directories'",
        "module": "zipfiles",
        "line_content": "for root, directories, files in os.walk(dir_name):",
        "line_number": 19,
        "context_before": [
            "",
            "# Read all directory, subdirectories and file lists"
        ],
        "context_after": [
            "for filename in files:",
            "# Create the full file path by using os module."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_compress_folder_and_files/zipfiles.py",
        "line": 49,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "zipfiles",
        "line_content": "print('The %s will be zipped:' % path)",
        "line_number": 49,
        "context_before": [
            "zip_dir(path, files_path)",
            "elif os.path.isfile(path):"
        ],
        "context_after": [
            "zip_file(path)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 60,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (108/100)",
        "module": "translator",
        "line_content": "for i in language.items():  # checking if the source language is listed on language dict and printing it",
        "line_number": 60,
        "context_before": [
            "print(f\"Pronunciation : {translated.pronunciation}\")",
            ""
        ],
        "context_after": [
            "if translated.src == i[0]:",
            "print(f\"Translated from : {i[1]}\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'googletrans'",
        "module": "translator",
        "line_content": "from googletrans import Translator",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "translator = Translator()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 23,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"allow\" doesn't conform to UPPER_CASE naming style",
        "module": "translator",
        "line_content": "allow = True  # variable to control correct language code input",
        "line_number": 23,
        "context_before": [
            "}",
            ""
        ],
        "context_after": [
            "",
            "while allow:  # checking if language code is valid"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 28,
        "column": 8,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "translator",
        "line_content": "f\"Please input desired language code. To see the language code list enter 'options' \\n\")",
        "line_number": 28,
        "context_before": [
            "",
            "user_code = input("
        ],
        "context_after": [
            "",
            "if user_code == \"options\":  # showing language options"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 37,
        "column": 8,
        "message_id": "C0206",
        "message_type": "convention",
        "symbol": "consider-using-dict-items",
        "message": "Consider iterating with .items()",
        "module": "translator",
        "line_content": "for lan_code in language.keys():",
        "line_number": 37,
        "context_before": [
            "",
            "else:  # validating user input"
        ],
        "context_after": [
            "if lan_code == user_code:",
            "print(f\"You have selected {language[lan_code]}\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 37,
        "column": 24,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "translator",
        "line_content": "for lan_code in language.keys():",
        "line_number": 37,
        "context_before": [
            "",
            "else:  # validating user input"
        ],
        "context_after": [
            "if lan_code == user_code:",
            "print(f\"You have selected {language[lan_code]}\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 40,
        "column": 16,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"allow\" doesn't conform to UPPER_CASE naming style",
        "module": "translator",
        "line_content": "allow = False",
        "line_number": 40,
        "context_before": [
            "if lan_code == user_code:",
            "print(f\"You have selected {language[lan_code]}\")"
        ],
        "context_after": [
            "if allow:",
            "print(\"It's not a valid language code!\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Language_translator/translator.py",
        "line": 49,
        "column": 14,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "translator",
        "line_content": "print(f\"\\nHave a nice Day!\")",
        "line_number": 49,
        "context_before": [
            "",
            "if string == \"close\":  # exit program command"
        ],
        "context_after": [
            "break",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 11,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "alarm",
        "line_content": "os.rename(os.path.join(cd, extra_path, file), os.path.join(cd, extra_path, renamed_file))",
        "line_number": 11,
        "context_before": [
            "if \" \" in file:",
            "renamed_file = file.replace(\" \", \"_\")"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 22,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "alarm",
        "line_content": "user_set_time = \":\".join(map(lambda x: str(x).zfill(2), input(\"\\nSet the alarm time (e.g. 01:10): \").split(\":\")))",
        "line_number": 22,
        "context_before": [
            "error = True",
            "while error:"
        ],
        "context_after": [
            "",
            "if re.match(r\"^[0-9]{2}:[0-9]{2}$\", user_set_time):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 29,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "alarm",
        "line_content": "",
        "line_number": 29,
        "context_before": [
            "else:",
            "print(\">>> Error: Time format invalid! Please try again!\\n\")"
        ],
        "context_after": [
            "cd = os.path.dirname(os.path.realpath(__file__))",
            "musics_path = os.path.join(cd, \"musics\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 32,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "alarm",
        "line_content": "",
        "line_number": 32,
        "context_before": [
            "cd = os.path.dirname(os.path.realpath(__file__))",
            "musics_path = os.path.join(cd, \"musics\")"
        ],
        "context_after": [
            "rename_files_with_whitespaces(cd, os.listdir(musics_path), \"musics\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 43,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "alarm",
        "line_content": "",
        "line_number": 43,
        "context_before": [
            "print(\">> Alarm music has been set default --> \" + clean_filename(musics[0]))",
            "selected_music = musics[0]"
        ],
        "context_after": [
            "else:",
            "error = True"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 51,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "alarm",
        "line_content": "",
        "line_number": 51,
        "context_before": [
            "for i in range(1, len(musics) + 1):",
            "print(f\"{i}. {clean_filename(musics[i - 1])}\")"
        ],
        "context_after": [
            "user_input = int(input(\"\\nEnter the index of the listed musics (e.g. 1): \"))",
            "selected_music = musics[user_input - 1]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 59,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "alarm",
        "line_content": "",
        "line_number": 59,
        "context_before": [
            "except:",
            "print(\">>> Error: Invalid Index! Please try again!\\n\")"
        ],
        "context_after": [
            "print(f\"\\n>>> Alarm has been set successfully for {user_set_time}! Please dont close the program! <<<\")",
            "while stop == False:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 60,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "alarm",
        "line_content": "print(f\"\\n>>> Alarm has been set successfully for {user_set_time}! Please dont close the program! <<<\")",
        "line_number": 60,
        "context_before": [
            "print(\">>> Error: Invalid Index! Please try again!\\n\")",
            ""
        ],
        "context_after": [
            "while stop == False:",
            "current_time = str(datetime.datetime.now().time())"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 76,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "alarm",
        "line_content": "set_alarm()",
        "line_number": 76,
        "context_before": [
            "if __name__ == \"__main__\":",
            "display_header(\"Alarm Program\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 38,
        "column": 8,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "alarm",
        "line_content": "exit()",
        "line_number": 38,
        "context_before": [
            "if len(musics) < 1:",
            "print(\">>> Error: No music in the musics folder! Please add music first!\\n\")"
        ],
        "context_after": [
            "",
            "elif len(musics) == 1:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 57,
        "column": 12,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "alarm",
        "line_content": "except:",
        "line_number": 57,
        "context_before": [
            "error = False",
            ""
        ],
        "context_after": [
            "print(\">>> Error: Invalid Index! Please try again!\\n\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 61,
        "column": 10,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'stop == False' should be 'stop is False' if checking for the singleton value False, or 'not stop' if testing for falsiness",
        "module": "alarm",
        "line_content": "while stop == False:",
        "line_number": 61,
        "context_before": [
            "",
            "print(f\"\\n>>> Alarm has been set successfully for {user_set_time}! Please dont close the program! <<<\")"
        ],
        "context_after": [
            "current_time = str(datetime.datetime.now().time())",
            "if current_time >= playback_time:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 63,
        "column": 27,
        "message_id": "E0606",
        "message_type": "error",
        "symbol": "possibly-used-before-assignment",
        "message": "Possibly using variable 'playback_time' before assignment",
        "module": "alarm",
        "line_content": "if current_time >= playback_time:",
        "line_number": 63,
        "context_before": [
            "while stop == False:",
            "current_time = str(datetime.datetime.now().time())"
        ],
        "context_after": [
            "stop = True",
            "subprocess.run(('cmd', '/C', 'start', f\"{cd}\\\\musics\\\\{selected_music}\"))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Set_Alarm/alarm.py",
        "line": 65,
        "column": 12,
        "message_id": "W1510",
        "message_type": "warning",
        "symbol": "subprocess-run-check",
        "message": "'subprocess.run' used without explicitly defining the value for 'check'.",
        "module": "alarm",
        "line_content": "subprocess.run(('cmd', '/C', 'start', f\"{cd}\\\\musics\\\\{selected_music}\"))",
        "line_number": 65,
        "context_before": [
            "if current_time >= playback_time:",
            "stop = True"
        ],
        "context_after": [
            "print(\">>> Alarm ringing! Closing the program!! Bye Bye!!! <<<\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 26,
        "column": 23,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "moneycontrol_scrapper",
        "line_content": "#scraps passed page url",
        "line_number": 26,
        "context_before": [
            "scrap('https://www.moneycontrol.com'+link, idx)",
            ""
        ],
        "context_after": [
            "def scrap(url, idx):",
            "src_page = requests.get(url).text"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 34,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "moneycontrol_scrapper",
        "line_content": "#<img> has alt text attr set as heading of news, therefore get img link and heading from same tag",
        "line_number": 34,
        "context_before": [
            "img = src.find(\"ul\", {\"id\": \"cagetory\"}).findAll('img')",
            ""
        ],
        "context_after": [
            "imgs = [i.attrs['src'] for i in img]",
            "titles = [i.attrs['alt'] for i in img]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 52,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "moneycontrol_scrapper",
        "line_content": "",
        "line_number": 52,
        "context_before": [
            "setup(src_url)",
            "json_dump(submission)"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "moneycontrol_scrapper",
        "line_content": "import requests",
        "line_number": 3,
        "context_before": [
            "import re",
            "import json"
        ],
        "context_after": [
            "import datetime",
            "from tqdm import tqdm"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tqdm'",
        "module": "moneycontrol_scrapper",
        "line_content": "from tqdm import tqdm",
        "line_number": 5,
        "context_before": [
            "import requests",
            "import datetime"
        ],
        "context_after": [
            "from bs4 import BeautifulSoup",
            "from collections import defaultdict"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "moneycontrol_scrapper",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 6,
        "context_before": [
            "import datetime",
            "from tqdm import tqdm"
        ],
        "context_after": [
            "from collections import defaultdict",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 11,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"src_url\" doesn't conform to UPPER_CASE naming style",
        "module": "moneycontrol_scrapper",
        "line_content": "src_url = 'https://www.moneycontrol.com/news/technical-call-221.html'",
        "line_number": 11,
        "context_before": [
            "submission = defaultdict(list)",
            "#main url"
        ],
        "context_after": [
            "",
            "#get next page links and call scrap() on each link"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 47,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "moneycontrol_scrapper",
        "line_content": "with open('moneycontrol_'+str(date)+'.json', 'w') as outfile:",
        "line_number": 47,
        "context_before": [
            "def json_dump(data):",
            "date = datetime.date.today().strftime(\"%B %d, %Y\")"
        ],
        "context_after": [
            "json.dump(submission, outfile)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 45,
        "column": 14,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'data'",
        "module": "moneycontrol_scrapper",
        "line_content": "def json_dump(data):",
        "line_number": 45,
        "context_before": [
            "",
            "#save data as json named by current date"
        ],
        "context_after": [
            "date = datetime.date.today().strftime(\"%B %d, %Y\")",
            "with open('moneycontrol_'+str(date)+'.json', 'w') as outfile:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"datetime\" should be placed before third party import \"requests\"",
        "module": "moneycontrol_scrapper",
        "line_content": "import datetime",
        "line_number": 4,
        "context_before": [
            "import json",
            "import requests"
        ],
        "context_after": [
            "from tqdm import tqdm",
            "from bs4 import BeautifulSoup"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/News_website_scraper/moneycontrol_scrapper.py",
        "line": 7,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"collections.defaultdict\" should be placed before third party imports \"requests\", \"tqdm.tqdm\", \"bs4.BeautifulSoup\"",
        "module": "moneycontrol_scrapper",
        "line_content": "from collections import defaultdict",
        "line_number": 7,
        "context_before": [
            "from tqdm import tqdm",
            "from bs4 import BeautifulSoup"
        ],
        "context_after": [
            "",
            "submission = defaultdict(list)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Multi_language_OCR/multi_language_OCR.py",
        "line": 2,
        "column": 21,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "multi_language_OCR",
        "line_content": "# Datetime: 2021/9/14",
        "line_number": 2,
        "context_before": [
            "# Author: Acer Zhang"
        ],
        "context_after": [
            "# Copyright belongs to the author.",
            "# Please indicate the source for reprinting."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Multi_language_OCR/multi_language_OCR.py",
        "line": 63,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "multi_language_OCR",
        "line_content": "print(info)",
        "line_number": 63,
        "context_before": [
            "results = ocr.ocr(img)",
            "for info in results:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Multi_language_OCR/multi_language_OCR.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"multi_language_OCR\" doesn't conform to snake_case naming style",
        "module": "multi_language_OCR",
        "line_content": "# Author: Acer Zhang",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "# Datetime: 2021/9/14",
            "# Copyright belongs to the author."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Multi_language_OCR/multi_language_OCR.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"language\" doesn't conform to UPPER_CASE naming style",
        "module": "multi_language_OCR",
        "line_content": "language = \"\"\"",
        "line_number": 6,
        "context_before": [
            "# Please indicate the source for reprinting.",
            ""
        ],
        "context_after": [
            "Language \t        Abbreviation \t\tLanguage \tAbbreviation",
            "Chinese & English \tch \t\t            Arabic \t    ar"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Multi_language_OCR/multi_language_OCR.py",
        "line": 49,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'agentocr'",
        "module": "multi_language_OCR",
        "line_content": "from agentocr import OCRSystem",
        "line_number": 49,
        "context_before": [
            "",
            "# Import AgentOCR python module"
        ],
        "context_after": [
            "",
            "# Choose OCR language"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Multi_language_OCR/multi_language_OCR.py",
        "line": 49,
        "column": 0,
        "message_id": "C0413",
        "message_type": "convention",
        "symbol": "wrong-import-position",
        "message": "Import \"from agentocr import OCRSystem\" should be placed at the top of the module",
        "module": "multi_language_OCR",
        "line_content": "from agentocr import OCRSystem",
        "line_number": 49,
        "context_before": [
            "",
            "# Import AgentOCR python module"
        ],
        "context_after": [
            "",
            "# Choose OCR language"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 74,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "main",
        "line_content": "main()",
        "line_number": 74,
        "context_before": [
            "if __name__ == '__main__':",
            "print('[Telegram simple bot] Start...')"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'telegram'",
        "module": "main",
        "line_content": "from telegram import (ParseMode)",
        "line_number": 7,
        "context_before": [
            "import random",
            "import logging"
        ],
        "context_after": [
            "from telegram.ext import (Updater, CommandHandler)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 8,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'telegram.ext'",
        "module": "main",
        "line_content": "from telegram.ext import (Updater, CommandHandler)",
        "line_number": 8,
        "context_before": [
            "import logging",
            "from telegram import (ParseMode)"
        ],
        "context_after": [
            "",
            "logging.basicConfig("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 26,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "main",
        "line_content": "'''",
        "line_number": 26,
        "context_before": [
            "\"Welcome! to simple telegram bot\", parse_mode=ParseMode.HTML)",
            ""
        ],
        "context_after": [
            "We can call other commands, without it being activated in the chat (/ help).",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 40,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "main",
        "line_content": "'''",
        "line_number": 40,
        "context_before": [
            "",
            "msg = \"⚫️ face \" if random.randint(1, 2) == 1 else \"⚪️ cross\""
        ],
        "context_after": [
            "He responds directly on the channel where he has been spoken to.",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 32,
        "column": 17,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'context'",
        "module": "main",
        "line_content": "def coin(update, context):",
        "line_number": 32,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''",
            "⚪️ / ⚫️ Currency"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 37,
        "column": 4,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'cid'",
        "module": "main",
        "line_content": "cid = update.message.chat_id",
        "line_number": 37,
        "context_before": [
            "Generate an elatory number between 1 and 2.",
            "'''"
        ],
        "context_after": [
            "",
            "msg = \"⚫️ face \" if random.randint(1, 2) == 1 else \"⚪️ cross\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 47,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"TOKEN\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "TOKEN = \"1914536904:AAF4ZnqNvyg1pk-1pCPzTqhDYggAyf-1CF8\"",
        "line_number": 47,
        "context_before": [
            "",
            "def main():"
        ],
        "context_after": [
            "",
            "updater = Updater(TOKEN, use_context=True)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 53,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "main",
        "line_content": "'''",
        "line_number": 53,
        "context_before": [
            "dp = updater.dispatcher",
            ""
        ],
        "context_after": [
            "Events that will activate our bot.",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 61,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "main",
        "line_content": "'''",
        "line_number": 61,
        "context_before": [
            "dp.add_error_handler(error_callback)",
            ""
        ],
        "context_after": [
            "The bot starts",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/telegram_bot/main.py",
        "line": 66,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "main",
        "line_content": "'''",
        "line_number": 66,
        "context_before": [
            "updater.start_polling()",
            ""
        ],
        "context_after": [
            "or leave listening. Keep it from stopping.",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 54,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(playeimg,(x,y))",
        "line_number": 54,
        "context_before": [
            "",
            "def player(x,y):"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 63,
        "column": 42,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "# for this we will use cordinate movement",
        "line_number": 63,
        "context_before": [
            "",
            "# moving the playerimag"
        ],
        "context_after": [
            "# we will pass arugument to the function",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 64,
        "column": 41,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "# we will pass arugument to the function",
        "line_number": 64,
        "context_before": [
            "# moving the playerimag",
            "# for this we will use cordinate movement"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 78,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "enemyimg.append(pygame.image.load(\"ens.png\"))",
        "line_number": 78,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "enemyX.append(random.randint(0,736))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 80,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "enemyX.append(random.randint(0,736))",
        "line_number": 80,
        "context_before": [
            "enemyimg.append(pygame.image.load(\"ens.png\"))",
            ""
        ],
        "context_after": [
            "enemyY.append(random.randint(50,150))",
            "enemyX_change.append(4)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 81,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "enemyY.append(random.randint(50,150))",
        "line_number": 81,
        "context_before": [
            "",
            "enemyX.append(random.randint(0,736))"
        ],
        "context_after": [
            "enemyX_change.append(4)",
            "enemyY_change.append(30)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 82,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "enemyX_change.append(4)",
        "line_number": 82,
        "context_before": [
            "enemyX.append(random.randint(0,736))",
            "enemyY.append(random.randint(50,150))"
        ],
        "context_after": [
            "enemyY_change.append(30)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 83,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "enemyY_change.append(30)",
        "line_number": 83,
        "context_before": [
            "enemyY.append(random.randint(50,150))",
            "enemyX_change.append(4)"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 96,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(enemyimg[i],(x,y))",
        "line_number": 96,
        "context_before": [
            "",
            "def enemy(x,y,i):"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 102,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "global bullet_state",
        "line_number": 102,
        "context_before": [
            "",
            "def fire_bullet(x,y):"
        ],
        "context_after": [
            "bullet_state = \"fire\"",
            "screen.blit(bulletimg,(x+53,y+10))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 103,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "bullet_state = \"fire\"",
        "line_number": 103,
        "context_before": [
            "def fire_bullet(x,y):",
            "global bullet_state"
        ],
        "context_after": [
            "screen.blit(bulletimg,(x+53,y+10))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 104,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(bulletimg,(x+53,y+10))",
        "line_number": 104,
        "context_before": [
            "global bullet_state",
            "bullet_state = \"fire\""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 111,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))",
        "line_number": 111,
        "context_before": [
            "def is_collision(enemyX,enemyY,playerx,playery):",
            ""
        ],
        "context_after": [
            "if distance < 27:",
            "return True"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 112,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "if distance < 27:",
        "line_number": 112,
        "context_before": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ],
        "context_after": [
            "return True",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 113,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "return True",
        "line_number": 113,
        "context_before": [
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))",
            "if distance < 27:"
        ],
        "context_after": [
            "",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 115,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "else:",
        "line_number": 115,
        "context_before": [
            "return True",
            ""
        ],
        "context_after": [
            "return False",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 116,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "return False",
        "line_number": 116,
        "context_before": [
            "",
            "else:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 126,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "score = font.render(\"Score : \" + str(score_value),True,(255,255,255))",
        "line_number": 126,
        "context_before": [
            "Score_cordinate_Y=10",
            "def showscore(x,y):"
        ],
        "context_after": [
            "screen.blit(score,(x,y))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 127,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(score,(x,y))",
        "line_number": 127,
        "context_before": [
            "def showscore(x,y):",
            "score = font.render(\"Score : \" + str(score_value),True,(255,255,255))"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 132,
        "column": 11,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "# game over",
        "line_number": 132,
        "context_before": [
            "",
            "OVER = pygame.font.Font(\"freesansbold.ttf\",60)"
        ],
        "context_after": [
            "def game_over():",
            "over = OVER.render(\"GAME OVER   \""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 134,
        "column": 34,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "over = OVER.render(\"GAME OVER   \"",
        "line_number": 134,
        "context_before": [
            "# game over",
            "def game_over():"
        ],
        "context_after": [
            ",True,(0,0,255))",
            "screen.blit(over,(250,250))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 134,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "over = OVER.render(\"GAME OVER   \"",
        "line_number": 134,
        "context_before": [
            "# game over",
            "def game_over():"
        ],
        "context_after": [
            ",True,(0,0,255))",
            "screen.blit(over,(250,250))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 136,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(over,(250,250))",
        "line_number": 136,
        "context_before": [
            "over = OVER.render(\"GAME OVER   \"",
            ",True,(0,0,255))"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 141,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "finalscore = final.render(\"Total Score : \" +str(score_value) ,True,(0,255,0))",
        "line_number": 141,
        "context_before": [
            "final = pygame.font.Font(\"freesansbold.ttf\",50)",
            "def final_score():"
        ],
        "context_after": [
            "screen.blit(finalscore,(280,350))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 142,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(finalscore,(280,350))",
        "line_number": 142,
        "context_before": [
            "def final_score():",
            "finalscore = final.render(\"Total Score : \" +str(score_value) ,True,(0,255,0))"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 143,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 143,
        "context_before": [
            "finalscore = final.render(\"Total Score : \" +str(score_value) ,True,(0,255,0))",
            "screen.blit(finalscore,(280,350))"
        ],
        "context_after": [
            "",
            "author = pygame.font.Font(\"freesansbold.ttf\",16)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 149,
        "column": 84,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "subject = author.render(\"Copyright ©2020 TheKnight All Right Reseved By TheKnight \"",
        "line_number": 149,
        "context_before": [
            "",
            "def author_name():"
        ],
        "context_after": [
            ",True,(0,255,0))",
            "screen.blit(subject,(170,580))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 149,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "subject = author.render(\"Copyright ©2020 TheKnight All Right Reseved By TheKnight \"",
        "line_number": 149,
        "context_before": [
            "",
            "def author_name():"
        ],
        "context_after": [
            ",True,(0,255,0))",
            "screen.blit(subject,(170,580))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 150,
        "column": 18,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": ",True,(0,255,0))",
        "line_number": 150,
        "context_before": [
            "def author_name():",
            "subject = author.render(\"Copyright ©2020 TheKnight All Right Reseved By TheKnight \""
        ],
        "context_after": [
            "screen.blit(subject,(170,580))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 151,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(subject,(170,580))",
        "line_number": 151,
        "context_before": [
            "subject = author.render(\"Copyright ©2020 TheKnight All Right Reseved By TheKnight \"",
            ",True,(0,255,0))"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 158,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.fill((0,0,0))",
        "line_number": 158,
        "context_before": [
            "",
            "while running:"
        ],
        "context_after": [
            "screen.blit(bg,(0,0))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 159,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "screen.blit(bg,(0,0))",
        "line_number": 159,
        "context_before": [
            "while running:",
            "screen.fill((0,0,0))"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 162,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "for event in pygame.event.get():",
        "line_number": 162,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "if event.type == pygame.QUIT:",
            "running = False"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 163,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "if event.type == pygame.QUIT:",
        "line_number": 163,
        "context_before": [
            "",
            "for event in pygame.event.get():"
        ],
        "context_after": [
            "running = False",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 164,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "running = False",
        "line_number": 164,
        "context_before": [
            "for event in pygame.event.get():",
            "if event.type == pygame.QUIT:"
        ],
        "context_after": [
            "",
            "# controlling the bird by arrow keys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 168,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "if event.type == pygame.KEYDOWN:",
        "line_number": 168,
        "context_before": [
            "# controlling the bird by arrow keys",
            ""
        ],
        "context_after": [
            "if event.key == pygame.K_LEFT:",
            "playerx_change = -5"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 169,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "if event.key == pygame.K_LEFT:",
        "line_number": 169,
        "context_before": [
            "",
            "if event.type == pygame.KEYDOWN:"
        ],
        "context_after": [
            "playerx_change = -5",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 170,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "space_bullet_shooter",
        "line_content": "playerx_change = -5",
        "line_number": 170,
        "context_before": [
            "if event.type == pygame.KEYDOWN:",
            "if event.key == pygame.K_LEFT:"
        ],
        "context_after": [
            "",
            "if event.key == pygame.K_RIGHT:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 172,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "if event.key == pygame.K_RIGHT:",
        "line_number": 172,
        "context_before": [
            "playerx_change = -5",
            ""
        ],
        "context_after": [
            "playerx_change = 5",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 173,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "space_bullet_shooter",
        "line_content": "playerx_change = 5",
        "line_number": 173,
        "context_before": [
            "",
            "if event.key == pygame.K_RIGHT:"
        ],
        "context_after": [
            "",
            "if event.key == pygame.K_SPACE:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 175,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "if event.key == pygame.K_SPACE:",
        "line_number": 175,
        "context_before": [
            "playerx_change = 5",
            ""
        ],
        "context_after": [
            "if bullet_state == \"ready\":",
            "bulletX = playerx"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 176,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "space_bullet_shooter",
        "line_content": "if bullet_state == \"ready\":",
        "line_number": 176,
        "context_before": [
            "",
            "if event.key == pygame.K_SPACE:"
        ],
        "context_after": [
            "bulletX = playerx",
            "bulletsound = mixer.Sound(\"bulletout.wav\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 177,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 20",
        "module": "space_bullet_shooter",
        "line_content": "bulletX = playerx",
        "line_number": 177,
        "context_before": [
            "if event.key == pygame.K_SPACE:",
            "if bullet_state == \"ready\":"
        ],
        "context_after": [
            "bulletsound = mixer.Sound(\"bulletout.wav\")",
            "bulletsound.play()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 178,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 20",
        "module": "space_bullet_shooter",
        "line_content": "bulletsound = mixer.Sound(\"bulletout.wav\")",
        "line_number": 178,
        "context_before": [
            "if bullet_state == \"ready\":",
            "bulletX = playerx"
        ],
        "context_after": [
            "bulletsound.play()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 179,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 20",
        "module": "space_bullet_shooter",
        "line_content": "bulletsound.play()",
        "line_number": 179,
        "context_before": [
            "bulletX = playerx",
            "bulletsound = mixer.Sound(\"bulletout.wav\")"
        ],
        "context_after": [
            "",
            "fire_bullet(bulletX,bulletY)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 180,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 180,
        "context_before": [
            "bulletsound = mixer.Sound(\"bulletout.wav\")",
            "bulletsound.play()"
        ],
        "context_after": [
            "fire_bullet(bulletX,bulletY)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 181,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 20",
        "module": "space_bullet_shooter",
        "line_content": "fire_bullet(bulletX,bulletY)",
        "line_number": 181,
        "context_before": [
            "bulletsound.play()",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 183,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 183,
        "context_before": [
            "fire_bullet(bulletX,bulletY)",
            ""
        ],
        "context_after": [
            "",
            "if event.type == pygame.KEYUP:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 185,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "if event.type == pygame.KEYUP:",
        "line_number": 185,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "if event.key == pygame.K_LEFT or event.key == pygame.K_LEFT:",
            "playerx_change = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 186,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "if event.key == pygame.K_LEFT or event.key == pygame.K_LEFT:",
        "line_number": 186,
        "context_before": [
            "",
            "if event.type == pygame.KEYUP:"
        ],
        "context_after": [
            "playerx_change = 0",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 187,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "space_bullet_shooter",
        "line_content": "playerx_change = 0",
        "line_number": 187,
        "context_before": [
            "if event.type == pygame.KEYUP:",
            "if event.key == pygame.K_LEFT or event.key == pygame.K_LEFT:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 191,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "for i in range(number_of_enemy):",
        "line_number": 191,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "# game over"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 194,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "if enemyY[i] >440:",
        "line_number": 194,
        "context_before": [
            "",
            "# game over"
        ],
        "context_after": [
            "",
            "for j in range(number_of_enemy):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 196,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "for j in range(number_of_enemy):",
        "line_number": 196,
        "context_before": [
            "if enemyY[i] >440:",
            ""
        ],
        "context_after": [
            "enemyY[j] =2000",
            "game_over()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 197,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "space_bullet_shooter",
        "line_content": "enemyY[j] =2000",
        "line_number": 197,
        "context_before": [
            "",
            "for j in range(number_of_enemy):"
        ],
        "context_after": [
            "game_over()",
            "time.sleep(2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 198,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "game_over()",
        "line_number": 198,
        "context_before": [
            "for j in range(number_of_enemy):",
            "enemyY[j] =2000"
        ],
        "context_after": [
            "time.sleep(2)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 199,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "time.sleep(2)",
        "line_number": 199,
        "context_before": [
            "enemyY[j] =2000",
            "game_over()"
        ],
        "context_after": [
            "",
            "final_score()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 201,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "final_score()",
        "line_number": 201,
        "context_before": [
            "time.sleep(2)",
            ""
        ],
        "context_after": [
            "",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 202,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 202,
        "context_before": [
            "",
            "final_score()"
        ],
        "context_after": [
            "break",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 203,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "break",
        "line_number": 203,
        "context_before": [
            "final_score()",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 209,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 209,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "enemyX[i] += enemyX_change[i]",
            "if enemyX[i] <=0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 210,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "enemyX[i] += enemyX_change[i]",
        "line_number": 210,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "if enemyX[i] <=0:",
            "enemyX_change[i]= 4"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 211,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "if enemyX[i] <=0:",
        "line_number": 211,
        "context_before": [
            "",
            "enemyX[i] += enemyX_change[i]"
        ],
        "context_after": [
            "enemyX_change[i]= 4",
            "enemyY[i] += enemyY_change[i]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 212,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "enemyX_change[i]= 4",
        "line_number": 212,
        "context_before": [
            "enemyX[i] += enemyX_change[i]",
            "if enemyX[i] <=0:"
        ],
        "context_after": [
            "enemyY[i] += enemyY_change[i]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 213,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "enemyY[i] += enemyY_change[i]",
        "line_number": 213,
        "context_before": [
            "if enemyX[i] <=0:",
            "enemyX_change[i]= 4"
        ],
        "context_after": [
            "",
            "elif enemyX[i]>=736:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 215,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "elif enemyX[i]>=736:",
        "line_number": 215,
        "context_before": [
            "enemyY[i] += enemyY_change[i]",
            ""
        ],
        "context_after": [
            "enemyX_change[i] = -4",
            "enemyY[i] += enemyY_change[i]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 216,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "enemyX_change[i] = -4",
        "line_number": 216,
        "context_before": [
            "",
            "elif enemyX[i]>=736:"
        ],
        "context_after": [
            "enemyY[i] += enemyY_change[i]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 217,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "enemyY[i] += enemyY_change[i]",
        "line_number": 217,
        "context_before": [
            "elif enemyX[i]>=736:",
            "enemyX_change[i] = -4"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 222,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "collision = is_collision(enemyX[i],enemyY[i],bulletX,bulletY)",
        "line_number": 222,
        "context_before": [
            "# collision",
            ""
        ],
        "context_after": [
            "if collision:",
            "bulletsound = mixer.Sound(\"bulletshoot.wav\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 223,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "if collision:",
        "line_number": 223,
        "context_before": [
            "",
            "collision = is_collision(enemyX[i],enemyY[i],bulletX,bulletY)"
        ],
        "context_after": [
            "bulletsound = mixer.Sound(\"bulletshoot.wav\")",
            "bulletsound.play()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 224,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "bulletsound = mixer.Sound(\"bulletshoot.wav\")",
        "line_number": 224,
        "context_before": [
            "collision = is_collision(enemyX[i],enemyY[i],bulletX,bulletY)",
            "if collision:"
        ],
        "context_after": [
            "bulletsound.play()",
            "bulletY = 480"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 225,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "bulletsound.play()",
        "line_number": 225,
        "context_before": [
            "if collision:",
            "bulletsound = mixer.Sound(\"bulletshoot.wav\")"
        ],
        "context_after": [
            "bulletY = 480",
            "bullet_state = \"ready\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 226,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "bulletY = 480",
        "line_number": 226,
        "context_before": [
            "bulletsound = mixer.Sound(\"bulletshoot.wav\")",
            "bulletsound.play()"
        ],
        "context_after": [
            "bullet_state = \"ready\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 227,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "bullet_state = \"ready\"",
        "line_number": 227,
        "context_before": [
            "bulletsound.play()",
            "bulletY = 480"
        ],
        "context_after": [
            "",
            "score_value +=1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 229,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "score_value +=1",
        "line_number": 229,
        "context_before": [
            "bullet_state = \"ready\"",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 231,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 231,
        "context_before": [
            "score_value +=1",
            ""
        ],
        "context_after": [
            "enemyX[i] = random.randint(0,736)",
            "enemyY[i] = random.randint(50,150)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 232,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "enemyX[i] = random.randint(0,736)",
        "line_number": 232,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "enemyY[i] = random.randint(50,150)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 233,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "space_bullet_shooter",
        "line_content": "enemyY[i] = random.randint(50,150)",
        "line_number": 233,
        "context_before": [
            "",
            "enemyX[i] = random.randint(0,736)"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 236,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "enemy(enemyX[i],enemyY[i],i)",
        "line_number": 236,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 241,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 241,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 244,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 244,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 245,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 245,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 247,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 247,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 248,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 248,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 249,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 249,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 250,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 250,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 254,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 254,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 276,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 276,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "# checking boundries of spacechip"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 279,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "playerx+=playerx_change",
        "line_number": 279,
        "context_before": [
            "",
            "# checking boundries of spacechip"
        ],
        "context_after": [
            "",
            "if playerx <=0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 281,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "if playerx <=0:",
        "line_number": 281,
        "context_before": [
            "playerx+=playerx_change",
            ""
        ],
        "context_after": [
            "playerx = 0",
            "elif playerx>=730:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 282,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "playerx = 0",
        "line_number": 282,
        "context_before": [
            "",
            "if playerx <=0:"
        ],
        "context_after": [
            "elif playerx>=730:",
            "playerx = 730"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 283,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "elif playerx>=730:",
        "line_number": 283,
        "context_before": [
            "if playerx <=0:",
            "playerx = 0"
        ],
        "context_after": [
            "playerx = 730",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 284,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "playerx = 730",
        "line_number": 284,
        "context_before": [
            "playerx = 0",
            "elif playerx>=730:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 285,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 285,
        "context_before": [
            "elif playerx>=730:",
            "playerx = 730"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 287,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 287,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# playerx -=0.2",
            "# playery -=.2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 291,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 291,
        "context_before": [
            "# playery -=.2",
            ""
        ],
        "context_after": [
            "",
            "# bullet movement"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 294,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "if bulletY <=0:",
        "line_number": 294,
        "context_before": [
            "",
            "# bullet movement"
        ],
        "context_after": [
            "bulletY=480",
            "bullet_state = \"ready\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 295,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "bulletY=480",
        "line_number": 295,
        "context_before": [
            "# bullet movement",
            "if bulletY <=0:"
        ],
        "context_after": [
            "bullet_state = \"ready\"",
            "if bullet_state == \"fire\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 296,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "bullet_state = \"ready\"",
        "line_number": 296,
        "context_before": [
            "if bulletY <=0:",
            "bulletY=480"
        ],
        "context_after": [
            "if bullet_state == \"fire\":",
            "fire_bullet(bulletX,bulletY)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 297,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "if bullet_state == \"fire\":",
        "line_number": 297,
        "context_before": [
            "bulletY=480",
            "bullet_state = \"ready\""
        ],
        "context_after": [
            "fire_bullet(bulletX,bulletY)",
            "bulletY -= bulletY_change"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 298,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "fire_bullet(bulletX,bulletY)",
        "line_number": 298,
        "context_before": [
            "bullet_state = \"ready\"",
            "if bullet_state == \"fire\":"
        ],
        "context_after": [
            "bulletY -= bulletY_change",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 299,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "space_bullet_shooter",
        "line_content": "bulletY -= bulletY_change",
        "line_number": 299,
        "context_before": [
            "if bullet_state == \"fire\":",
            "fire_bullet(bulletX,bulletY)"
        ],
        "context_after": [
            "",
            "player(playerx,playery)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 300,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 300,
        "context_before": [
            "fire_bullet(bulletX,bulletY)",
            "bulletY -= bulletY_change"
        ],
        "context_after": [
            "player(playerx,playery)",
            "showscore(score_cordinate_X,Score_cordinate_Y)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 301,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "player(playerx,playery)",
        "line_number": 301,
        "context_before": [
            "bulletY -= bulletY_change",
            ""
        ],
        "context_after": [
            "showscore(score_cordinate_X,Score_cordinate_Y)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 302,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "showscore(score_cordinate_X,Score_cordinate_Y)",
        "line_number": 302,
        "context_before": [
            "",
            "player(playerx,playery)"
        ],
        "context_after": [
            "",
            "author_name()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 304,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "author_name()",
        "line_number": 304,
        "context_before": [
            "showscore(score_cordinate_X,Score_cordinate_Y)",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 305,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 305,
        "context_before": [
            "",
            "author_name()"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 311,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "space_bullet_shooter",
        "line_content": "pygame.display.update()",
        "line_number": 311,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 312,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "space_bullet_shooter",
        "line_content": "",
        "line_number": 312,
        "context_before": [
            "",
            "pygame.display.update()"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 11,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pygame'",
        "module": "space_bullet_shooter",
        "line_content": "import pygame",
        "line_number": 11,
        "context_before": [
            "\"\"\"",
            ""
        ],
        "context_after": [
            "import random",
            "import math"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 16,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pygame'",
        "module": "space_bullet_shooter",
        "line_content": "from pygame import mixer",
        "line_number": 16,
        "context_before": [
            "import time",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 29,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score_value\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "score_value = 0",
        "line_number": 29,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 48,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playerx\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playerx = 370",
        "line_number": 48,
        "context_before": [
            "# showing the bird imageo",
            "playeimg = pygame.image.load(\"pl4.png\")"
        ],
        "context_after": [
            "playery = 460",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 49,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playery\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playery = 460",
        "line_number": 49,
        "context_before": [
            "playeimg = pygame.image.load(\"pl4.png\")",
            "playerx = 370"
        ],
        "context_after": [
            "",
            "playerx_change = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 51,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playerx_change\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playerx_change = 0",
        "line_number": 51,
        "context_before": [
            "playery = 460",
            ""
        ],
        "context_after": [
            "",
            "def player(x,y):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 74,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"number_of_enemy\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "number_of_enemy = 6",
        "line_number": 74,
        "context_before": [
            "enemyY_change = []",
            ""
        ],
        "context_after": [
            "for i in range(number_of_enemy):",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 88,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bulletX\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bulletX = 0",
        "line_number": 88,
        "context_before": [
            "# bullet",
            "bulletimg = pygame.image.load(\"bullet.png\")"
        ],
        "context_after": [
            "bulletY = 480",
            "bulletX_change = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 89,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bulletY\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bulletY = 480",
        "line_number": 89,
        "context_before": [
            "bulletimg = pygame.image.load(\"bullet.png\")",
            "bulletX = 0"
        ],
        "context_after": [
            "bulletX_change = 0",
            "bulletY_change = 20"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 90,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bulletX_change\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bulletX_change = 0",
        "line_number": 90,
        "context_before": [
            "bulletX = 0",
            "bulletY = 480"
        ],
        "context_after": [
            "bulletY_change = 20",
            "bullet_state = \"ready\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 91,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bulletY_change\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bulletY_change = 20",
        "line_number": 91,
        "context_before": [
            "bulletY = 480",
            "bulletX_change = 0"
        ],
        "context_after": [
            "bullet_state = \"ready\"",
            "# function for enemy"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 92,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bullet_state\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bullet_state = \"ready\"",
        "line_number": 92,
        "context_before": [
            "bulletX_change = 0",
            "bulletY_change = 20"
        ],
        "context_after": [
            "# function for enemy",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 95,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'i' from outer scope (line 75)",
        "module": "space_bullet_shooter",
        "line_content": "def enemy(x,y,i):",
        "line_number": 95,
        "context_before": [
            "# function for enemy",
            ""
        ],
        "context_after": [
            "screen.blit(enemyimg[i],(x,y))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 102,
        "column": 1,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "space_bullet_shooter",
        "line_content": "global bullet_state",
        "line_number": 102,
        "context_before": [
            "",
            "def fire_bullet(x,y):"
        ],
        "context_after": [
            "bullet_state = \"fire\"",
            "screen.blit(bulletimg,(x+53,y+10))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 17,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"enemyX\" doesn't conform to snake_case naming style",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 24,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"enemyY\" doesn't conform to snake_case naming style",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 17,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'enemyX' from outer scope (line 69)",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 24,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'enemyY' from outer scope (line 70)",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 31,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'playerx' from outer scope (line 48)",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 39,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'playery' from outer scope (line 49)",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 112,
        "column": 1,
        "message_id": "R1703",
        "message_type": "refactor",
        "symbol": "simplifiable-if-statement",
        "message": "The if statement can be replaced with 'return bool(test)'",
        "module": "space_bullet_shooter",
        "line_content": "if distance < 27:",
        "line_number": 112,
        "context_before": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ],
        "context_after": [
            "return True",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 112,
        "column": 1,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "module": "space_bullet_shooter",
        "line_content": "if distance < 27:",
        "line_number": 112,
        "context_before": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ],
        "context_after": [
            "return True",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 31,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'playerx'",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 109,
        "column": 39,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'playery'",
        "module": "space_bullet_shooter",
        "line_content": "def is_collision(enemyX,enemyY,playerx,playery):",
        "line_number": 109,
        "context_before": [
            "",
            "# checking if collision"
        ],
        "context_after": [
            "",
            "distance = math.sqrt((math.pow(enemyX-bulletX,2))+(math.pow(enemyY-bulletY,2)))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 123,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score_cordinate_X\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "score_cordinate_X = 10",
        "line_number": 123,
        "context_before": [
            "",
            "font = pygame.font.Font(\"freesansbold.ttf\",35)"
        ],
        "context_after": [
            "Score_cordinate_Y=10",
            "def showscore(x,y):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 124,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"Score_cordinate_Y\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "Score_cordinate_Y=10",
        "line_number": 124,
        "context_before": [
            "font = pygame.font.Font(\"freesansbold.ttf\",35)",
            "score_cordinate_X = 10"
        ],
        "context_after": [
            "def showscore(x,y):",
            "score = font.render(\"Score : \" + str(score_value),True,(255,255,255))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 155,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"running\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "running = True",
        "line_number": 155,
        "context_before": [
            "",
            "# game loop"
        ],
        "context_after": [
            "",
            "while running:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 164,
        "column": 3,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"running\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "running = False",
        "line_number": 164,
        "context_before": [
            "for event in pygame.event.get():",
            "if event.type == pygame.QUIT:"
        ],
        "context_after": [
            "",
            "# controlling the bird by arrow keys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 170,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playerx_change\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playerx_change = -5",
        "line_number": 170,
        "context_before": [
            "if event.type == pygame.KEYDOWN:",
            "if event.key == pygame.K_LEFT:"
        ],
        "context_after": [
            "",
            "if event.key == pygame.K_RIGHT:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 173,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playerx_change\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playerx_change = 5",
        "line_number": 173,
        "context_before": [
            "",
            "if event.key == pygame.K_RIGHT:"
        ],
        "context_after": [
            "",
            "if event.key == pygame.K_SPACE:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 177,
        "column": 5,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bulletX\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bulletX = playerx",
        "line_number": 177,
        "context_before": [
            "if event.key == pygame.K_SPACE:",
            "if bullet_state == \"ready\":"
        ],
        "context_after": [
            "bulletsound = mixer.Sound(\"bulletout.wav\")",
            "bulletsound.play()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 186,
        "column": 6,
        "message_id": "R1714",
        "message_type": "refactor",
        "symbol": "consider-using-in",
        "message": "Consider merging these comparisons with 'in' by using 'event.key in (pygame.K_LEFT,)'. Use a set instead if elements are hashable.",
        "module": "space_bullet_shooter",
        "line_content": "if event.key == pygame.K_LEFT or event.key == pygame.K_LEFT:",
        "line_number": 186,
        "context_before": [
            "",
            "if event.type == pygame.KEYUP:"
        ],
        "context_after": [
            "playerx_change = 0",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 187,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playerx_change\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playerx_change = 0",
        "line_number": 187,
        "context_before": [
            "if event.type == pygame.KEYUP:",
            "if event.key == pygame.K_LEFT or event.key == pygame.K_LEFT:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 222,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"collision\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "collision = is_collision(enemyX[i],enemyY[i],bulletX,bulletY)",
        "line_number": 222,
        "context_before": [
            "# collision",
            ""
        ],
        "context_after": [
            "if collision:",
            "bulletsound = mixer.Sound(\"bulletshoot.wav\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 226,
        "column": 3,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bulletY\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bulletY = 480",
        "line_number": 226,
        "context_before": [
            "bulletsound = mixer.Sound(\"bulletshoot.wav\")",
            "bulletsound.play()"
        ],
        "context_after": [
            "bullet_state = \"ready\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 227,
        "column": 3,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bullet_state\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bullet_state = \"ready\"",
        "line_number": 227,
        "context_before": [
            "bulletsound.play()",
            "bulletY = 480"
        ],
        "context_after": [
            "",
            "score_value +=1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 282,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playerx\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playerx = 0",
        "line_number": 282,
        "context_before": [
            "",
            "if playerx <=0:"
        ],
        "context_after": [
            "elif playerx>=730:",
            "playerx = 730"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 284,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"playerx\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "playerx = 730",
        "line_number": 284,
        "context_before": [
            "playerx = 0",
            "elif playerx>=730:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 295,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bulletY\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bulletY=480",
        "line_number": 295,
        "context_before": [
            "# bullet movement",
            "if bulletY <=0:"
        ],
        "context_after": [
            "bullet_state = \"ready\"",
            "if bullet_state == \"fire\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 296,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bullet_state\" doesn't conform to UPPER_CASE naming style",
        "module": "space_bullet_shooter",
        "line_content": "bullet_state = \"ready\"",
        "line_number": 296,
        "context_before": [
            "if bulletY <=0:",
            "bulletY=480"
        ],
        "context_after": [
            "if bullet_state == \"fire\":",
            "fire_bullet(bulletX,bulletY)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 12,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"random\" should be placed before third party import \"pygame\"",
        "module": "space_bullet_shooter",
        "line_content": "import random",
        "line_number": 12,
        "context_before": [
            "",
            "import pygame"
        ],
        "context_after": [
            "import math",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 13,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"math\" should be placed before third party import \"pygame\"",
        "module": "space_bullet_shooter",
        "line_content": "import math",
        "line_number": 13,
        "context_before": [
            "import pygame",
            "import random"
        ],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Space_bullet_shooter_game/space_bullet_shooter.py",
        "line": 14,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"pygame\"",
        "module": "space_bullet_shooter",
        "line_content": "import time",
        "line_number": 14,
        "context_before": [
            "import random",
            "import math"
        ],
        "context_after": [
            "",
            "from pygame import mixer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 11,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "module": "cat",
        "line_content": "class Logger:",
        "line_number": 11,
        "context_before": [
            "pass",
            ""
        ],
        "context_after": [
            "def __init__(self, verbosity=False):",
            "self.verbose = verbosity"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 26,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"readFile\" doesn't conform to snake_case naming style",
        "module": "cat",
        "line_content": "def readFile(src: Path):",
        "line_number": 26,
        "context_before": [
            "your/path/file.txt",
            "'''"
        ],
        "context_after": [
            "",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 38,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "cat",
        "line_content": "with open(src, 'r') as f:",
        "line_number": 38,
        "context_before": [
            "else:",
            ""
        ],
        "context_after": [
            "for lines in f:",
            "print(lines, end='')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 69,
        "column": 8,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "cat",
        "line_content": "exit(1)",
        "line_number": 69,
        "context_before": [
            "logger.error(e)",
            ""
        ],
        "context_after": [
            "",
            "except KeyboardInterrupt:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 75,
        "column": 0,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "cat",
        "line_content": "'''",
        "line_number": 75,
        "context_before": [
            "logger.error('\\nInterrupt')",
            ""
        ],
        "context_after": [
            "Start the program",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 5,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused stderr imported from sys",
        "module": "cat",
        "line_content": "from sys import stderr, stdout",
        "line_number": 5,
        "context_before": [
            "import argparse",
            "from pathlib import Path"
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 5,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused stdout imported from sys",
        "module": "cat",
        "line_content": "from sys import stderr, stdout",
        "line_number": 5,
        "context_before": [
            "import argparse",
            "from pathlib import Path"
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/cat_command/cat.py",
        "line": 6,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import os",
        "module": "cat",
        "line_content": "import os",
        "line_number": 6,
        "context_before": [
            "from pathlib import Path",
            "from sys import stderr, stdout"
        ],
        "context_after": [
            "",
            "class CatError(Exception):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 11,
        "column": 32,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# To manage the intial delay.",
        "line_number": 11,
        "context_before": [
            "if running:",
            "global counter"
        ],
        "context_after": [
            "if counter == 0:",
            "display = 'Ready!'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 18,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "",
        "line_number": 18,
        "context_before": [
            "string = tt.strftime('%H:%M:%S')",
            "display = string"
        ],
        "context_after": [
            "label['text'] = display",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 20,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "",
        "line_number": 20,
        "context_before": [
            "",
            "label['text'] = display"
        ],
        "context_after": [
            "# label.after(arg1, arg2) delays by",
            "# first argument given in milliseconds"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 21,
        "column": 38,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# label.after(arg1, arg2) delays by",
        "line_number": 21,
        "context_before": [
            "label['text'] = display",
            ""
        ],
        "context_after": [
            "# first argument given in milliseconds",
            "# and then calls the function given as second argument."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 22,
        "column": 41,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# first argument given in milliseconds",
        "line_number": 22,
        "context_before": [
            "",
            "# label.after(arg1, arg2) delays by"
        ],
        "context_after": [
            "# and then calls the function given as second argument.",
            "# Generally like here we need to call the"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 23,
        "column": 58,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# and then calls the function given as second argument.",
        "line_number": 23,
        "context_before": [
            "# label.after(arg1, arg2) delays by",
            "# first argument given in milliseconds"
        ],
        "context_after": [
            "# Generally like here we need to call the",
            "# function in which it is present repeatedly."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 24,
        "column": 44,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# Generally like here we need to call the",
        "line_number": 24,
        "context_before": [
            "# first argument given in milliseconds",
            "# and then calls the function given as second argument."
        ],
        "context_after": [
            "# function in which it is present repeatedly.",
            "# Delays by 1000ms=1 seconds and call count again."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 25,
        "column": 48,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# function in which it is present repeatedly.",
        "line_number": 25,
        "context_before": [
            "# and then calls the function given as second argument.",
            "# Generally like here we need to call the"
        ],
        "context_after": [
            "# Delays by 1000ms=1 seconds and call count again.",
            "label.after(1000, count)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 26,
        "column": 53,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# Delays by 1000ms=1 seconds and call count again.",
        "line_number": 26,
        "context_before": [
            "# Generally like here we need to call the",
            "# function in which it is present repeatedly."
        ],
        "context_after": [
            "label.after(1000, count)",
            "counter += 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 29,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "",
        "line_number": 29,
        "context_before": [
            "label.after(1000, count)",
            "counter += 1"
        ],
        "context_after": [
            "# Triggering the start of the counter.",
            "count()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 30,
        "column": 39,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# Triggering the start of the counter.",
        "line_number": 30,
        "context_before": [
            "counter += 1",
            ""
        ],
        "context_after": [
            "count()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 32,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "",
        "line_number": 32,
        "context_before": [
            "# Triggering the start of the counter.",
            "count()"
        ],
        "context_after": [
            "",
            "# start function of the stopwatch"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 34,
        "column": 33,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# start function of the stopwatch",
        "line_number": 34,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def Start(label):",
            "global running"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 42,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "",
        "line_number": 42,
        "context_before": [
            "stop['state'] = 'normal'",
            "reset['state'] = 'normal'"
        ],
        "context_after": [
            "",
            "# Stop function of the stopwatch"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 44,
        "column": 32,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# Stop function of the stopwatch",
        "line_number": 44,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def Stop():",
            "global running"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 51,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "",
        "line_number": 51,
        "context_before": [
            "reset['state'] = 'normal'",
            "running = False"
        ],
        "context_after": [
            "",
            "# Reset function of the stopwatch"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 53,
        "column": 33,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# Reset function of the stopwatch",
        "line_number": 53,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def Reset(label):",
            "global counter"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 55,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "stopwatch",
        "line_content": "global counter",
        "line_number": 55,
        "context_before": [
            "# Reset function of the stopwatch",
            "def Reset(label):"
        ],
        "context_after": [
            "counter = 0",
            "# If reset is pressed after pressing stop."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 56,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "stopwatch",
        "line_content": "counter = 0",
        "line_number": 56,
        "context_before": [
            "def Reset(label):",
            "global counter"
        ],
        "context_after": [
            "# If reset is pressed after pressing stop.",
            "if not running:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 57,
        "column": 43,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# If reset is pressed after pressing stop.",
        "line_number": 57,
        "context_before": [
            "global counter",
            "counter = 0"
        ],
        "context_after": [
            "if not running:",
            "reset['state'] = 'disabled'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 58,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "stopwatch",
        "line_content": "if not running:",
        "line_number": 58,
        "context_before": [
            "counter = 0",
            "# If reset is pressed after pressing stop."
        ],
        "context_after": [
            "reset['state'] = 'disabled'",
            "label['text'] = '00:00:00'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 59,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "stopwatch",
        "line_content": "reset['state'] = 'disabled'",
        "line_number": 59,
        "context_before": [
            "# If reset is pressed after pressing stop.",
            "if not running:"
        ],
        "context_after": [
            "label['text'] = '00:00:00'",
            "# If reset is pressed while the stopwatch is running."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 60,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "stopwatch",
        "line_content": "label['text'] = '00:00:00'",
        "line_number": 60,
        "context_before": [
            "if not running:",
            "reset['state'] = 'disabled'"
        ],
        "context_after": [
            "# If reset is pressed while the stopwatch is running.",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 61,
        "column": 54,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "stopwatch",
        "line_content": "# If reset is pressed while the stopwatch is running.",
        "line_number": 61,
        "context_before": [
            "reset['state'] = 'disabled'",
            "label['text'] = '00:00:00'"
        ],
        "context_after": [
            "else:",
            "label['text'] = '00:00:00'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 62,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "stopwatch",
        "line_content": "else:",
        "line_number": 62,
        "context_before": [
            "label['text'] = '00:00:00'",
            "# If reset is pressed while the stopwatch is running."
        ],
        "context_after": [
            "label['text'] = '00:00:00'",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 63,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "stopwatch",
        "line_content": "label['text'] = '00:00:00'",
        "line_number": 63,
        "context_before": [
            "# If reset is pressed while the stopwatch is running.",
            "else:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 3,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"counter\" doesn't conform to UPPER_CASE naming style",
        "module": "stopwatch",
        "line_content": "counter = 0",
        "line_number": 3,
        "context_before": [
            "import tkinter as Tkinter",
            "from datetime import datetime"
        ],
        "context_after": [
            "running = False",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"running\" doesn't conform to UPPER_CASE naming style",
        "module": "stopwatch",
        "line_content": "running = False",
        "line_number": 4,
        "context_before": [
            "from datetime import datetime",
            "counter = 0"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 7,
        "column": 18,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'label' from outer scope (line 71)",
        "module": "stopwatch",
        "line_content": "def counter_label(label):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def count():",
            "if running:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 10,
        "column": 12,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "stopwatch",
        "line_content": "global counter",
        "line_number": 10,
        "context_before": [
            "def count():",
            "if running:"
        ],
        "context_after": [
            "# To manage the intial delay.",
            "if counter == 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 35,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"Start\" doesn't conform to snake_case naming style",
        "module": "stopwatch",
        "line_content": "def Start(label):",
        "line_number": 35,
        "context_before": [
            "",
            "# start function of the stopwatch"
        ],
        "context_after": [
            "global running",
            "running = True"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 35,
        "column": 10,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'label' from outer scope (line 71)",
        "module": "stopwatch",
        "line_content": "def Start(label):",
        "line_number": 35,
        "context_before": [
            "",
            "# start function of the stopwatch"
        ],
        "context_after": [
            "global running",
            "running = True"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 36,
        "column": 4,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "stopwatch",
        "line_content": "global running",
        "line_number": 36,
        "context_before": [
            "# start function of the stopwatch",
            "def Start(label):"
        ],
        "context_after": [
            "running = True",
            "counter_label(label)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 45,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"Stop\" doesn't conform to snake_case naming style",
        "module": "stopwatch",
        "line_content": "def Stop():",
        "line_number": 45,
        "context_before": [
            "",
            "# Stop function of the stopwatch"
        ],
        "context_after": [
            "global running",
            "start['state'] = 'normal'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 46,
        "column": 4,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "stopwatch",
        "line_content": "global running",
        "line_number": 46,
        "context_before": [
            "# Stop function of the stopwatch",
            "def Stop():"
        ],
        "context_after": [
            "start['state'] = 'normal'",
            "stop['state'] = 'disabled'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 54,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"Reset\" doesn't conform to snake_case naming style",
        "module": "stopwatch",
        "line_content": "def Reset(label):",
        "line_number": 54,
        "context_before": [
            "",
            "# Reset function of the stopwatch"
        ],
        "context_after": [
            "global counter",
            "counter = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 54,
        "column": 10,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'label' from outer scope (line 71)",
        "module": "stopwatch",
        "line_content": "def Reset(label):",
        "line_number": 54,
        "context_before": [
            "",
            "# Reset function of the stopwatch"
        ],
        "context_after": [
            "global counter",
            "counter = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_simple_stopwatch/stopwatch.py",
        "line": 55,
        "column": 1,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "stopwatch",
        "line_content": "global counter",
        "line_number": 55,
        "context_before": [
            "# Reset function of the stopwatch",
            "def Reset(label):"
        ],
        "context_after": [
            "counter = 0",
            "# If reset is pressed after pressing stop."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Battery_notification/battery.py",
        "line": 9,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "battery",
        "line_content": "",
        "line_number": 9,
        "context_before": [
            "",
            "if percent <= 30 and plugged!=True:"
        ],
        "context_after": [
            "# pip install py-notifier",
            "# pip install win10toast"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Battery_notification/battery.py",
        "line": 18,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "battery",
        "line_content": "",
        "line_number": 18,
        "context_before": [
            "description=str(percent) + \"% Battery remain!!\",",
            "duration=5,  # Duration in seconds"
        ],
        "context_after": [
            ").send()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Battery_notification/battery.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'psutil'",
        "module": "battery",
        "line_content": "import psutil",
        "line_number": 2,
        "context_before": [
            "# pip install psutil"
        ],
        "context_after": [
            "",
            "battery = psutil.sensors_battery()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Battery_notification/battery.py",
        "line": 8,
        "column": 21,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'plugged != True' should be 'plugged is not True' if checking for the singleton value True, or 'not plugged' if testing for falsiness",
        "module": "battery",
        "line_content": "if percent <= 30 and plugged!=True:",
        "line_number": 8,
        "context_before": [
            "percent = battery.percent",
            ""
        ],
        "context_after": [
            "",
            "# pip install py-notifier"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Battery_notification/battery.py",
        "line": 12,
        "column": 4,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pynotifier'",
        "module": "battery",
        "line_content": "from pynotifier import Notification",
        "line_number": 12,
        "context_before": [
            "# pip install py-notifier",
            "# pip install win10toast"
        ],
        "context_after": [
            "",
            "Notification("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 37,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (111/100)",
        "module": "export_mysql_data_to_csv",
        "line_content": "url = \"https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=%(key)s&type=file\" % {\"key\": wecom_key}",
        "line_number": 37,
        "context_before": [
            "",
            "def upload_file_robots(filename):"
        ],
        "context_after": [
            "data = {'file': open(filename, 'rb')}  # post jason",
            "response = requests.post(url=url, files=data)  # post 请求上传文件"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pymysql'",
        "module": "export_mysql_data_to_csv",
        "line_content": "import pymysql",
        "line_number": 7,
        "context_before": [
            "import time",
            ""
        ],
        "context_after": [
            "import requests as requests",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 8,
        "column": 0,
        "message_id": "C0414",
        "message_type": "convention",
        "symbol": "useless-import-alias",
        "message": "Import alias does not rename original package",
        "module": "export_mysql_data_to_csv",
        "line_content": "import requests as requests",
        "line_number": 8,
        "context_before": [
            "",
            "import pymysql"
        ],
        "context_after": [
            "",
            "ini = configparser.ConfigParser()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 8,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "export_mysql_data_to_csv",
        "line_content": "import requests as requests",
        "line_number": 8,
        "context_before": [
            "",
            "import pymysql"
        ],
        "context_after": [
            "",
            "ini = configparser.ConfigParser()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 26,
        "column": 22,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'filename' from outer scope (line 54)",
        "module": "export_mysql_data_to_csv",
        "line_content": "def read_mysql_to_csv(filename):",
        "line_number": 26,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "with codecs.open(filename=filename, mode='w', encoding='utf-8') as f:",
            "write = csv.writer(f, dialect='excel')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 36,
        "column": 23,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'filename' from outer scope (line 54)",
        "module": "export_mysql_data_to_csv",
        "line_content": "def upload_file_robots(filename):",
        "line_number": 36,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "url = \"https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=%(key)s&type=file\" % {\"key\": wecom_key}",
            "data = {'file': open(filename, 'rb')}  # post jason"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 37,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "export_mysql_data_to_csv",
        "line_content": "url = \"https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=%(key)s&type=file\" % {\"key\": wecom_key}",
        "line_number": 37,
        "context_before": [
            "",
            "def upload_file_robots(filename):"
        ],
        "context_after": [
            "data = {'file': open(filename, 'rb')}  # post jason",
            "response = requests.post(url=url, files=data)  # post 请求上传文件"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 38,
        "column": 20,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "export_mysql_data_to_csv",
        "line_content": "data = {'file': open(filename, 'rb')}  # post jason",
        "line_number": 38,
        "context_before": [
            "def upload_file_robots(filename):",
            "url = \"https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=%(key)s&type=file\" % {\"key\": wecom_key}"
        ],
        "context_after": [
            "response = requests.post(url=url, files=data)  # post 请求上传文件",
            "json_res = response.json()  # 返回转为json"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/export_mysql_to_csv_send_to_wocom/export_mysql_data_to_csv.py",
        "line": 46,
        "column": 13,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "export_mysql_data_to_csv",
        "line_content": "wx_url = 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=%(key)s' % {\"key\": wecom_key}",
        "line_number": 46,
        "context_before": [
            "",
            "def send_file_robots(media_id):"
        ],
        "context_after": [
            "data = {\"msgtype\": \"file\",",
            "\"file\": {\"media_id\": media_id}}  # post json"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 17,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (148/100)",
        "module": "converter",
        "line_content": "large_sum_words = [\"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\"]",
        "line_number": 17,
        "context_before": [
            "two_digit_words = [\"ten\", \"eleven\", \"twelve\"]",
            "hundred = \"hundred\""
        ],
        "context_after": [
            "",
            "def converter(n):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 25,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter",
        "line_content": "",
        "line_number": 25,
        "context_before": [
            "word.append(\"(negative)\")",
            "n = n[1:]"
        ],
        "context_after": [
            "if len(n) % 3 != 0 and len(n) > 3:",
            "n = n.zfill(3 * (((len(n)-1) // 3) + 1))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 34,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter",
        "line_content": "",
        "line_number": 34,
        "context_before": [
            "for i, num in enumerate(sum_list):",
            "if num != '000': skip = False"
        ],
        "context_after": [
            "for _ in range(len(num)):",
            "num = num.lstrip('0')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 38,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (173/100)",
        "module": "converter",
        "line_content": "if (len(sum_list) > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3)) and i == len(sum_list) - 1 and (word[-1] in large_sum_words or hundred in word[-1]):",
        "line_number": 38,
        "context_before": [
            "num = num.lstrip('0')",
            "if len(num) == 1:"
        ],
        "context_after": [
            "word.append(\"and\")",
            "word.append(one_digit_words[num][0])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 46,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (120/100)",
        "module": "converter",
        "line_content": "if (len(sum_list) > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3)) and i == len(sum_list) - 1:",
        "line_number": 46,
        "context_before": [
            "if len(num) == 2:",
            "if num[0] != '0':"
        ],
        "context_after": [
            "word.append(\"and\")",
            "if num.startswith('1'):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 52,
        "column": 103,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter",
        "line_content": "number = one_digit_words[num[1]][1 if int(num[1]) in range(3, 6, 2) else 0]",
        "line_number": 52,
        "context_before": [
            "word.append(two_digit_words[int(num[1])])",
            "else:"
        ],
        "context_after": [
            "word.append(number + (\"teen\" if not number[-1] == 't' else \"een\"))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 52,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "converter",
        "line_content": "number = one_digit_words[num[1]][1 if int(num[1]) in range(3, 6, 2) else 0]",
        "line_number": 52,
        "context_before": [
            "word.append(two_digit_words[int(num[1])])",
            "else:"
        ],
        "context_after": [
            "word.append(number + (\"teen\" if not number[-1] == 't' else \"een\"))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 55,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (193/100)",
        "module": "converter",
        "line_content": "word.append(one_digit_words[num[0]][1 if int(num[0]) in range(2, 6) else 0] + (\"ty \" if num[0] != '8' else 'y ') + (one_digit_words[num[1]][0] if num[1] != '0' else \"\"))",
        "line_number": 55,
        "context_before": [
            "word.append(number + (\"teen\" if not number[-1] == 't' else \"een\"))",
            "else:"
        ],
        "context_after": [
            "break",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 60,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter",
        "line_content": "",
        "line_number": 60,
        "context_before": [
            "num = num[1:]",
            "continue"
        ],
        "context_after": [
            "if len(num) == 3:",
            "if num[0] != '0':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 66,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter",
        "line_content": "",
        "line_number": 66,
        "context_before": [
            "if num[1:] == '00': break",
            "num = num[1:]"
        ],
        "context_after": [
            "if len(sum_list[i:]) > 1 and not skip:",
            "word.append(large_sum_words[len(sum_list[i:]) - 2])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 70,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter",
        "line_content": "",
        "line_number": 70,
        "context_before": [
            "word.append(large_sum_words[len(sum_list[i:]) - 2])",
            "skip = True"
        ],
        "context_after": [
            "word = \" \".join(map(str.strip, word))",
            "return word[0].lstrip().upper() + word[1:].rstrip().lower() if \"negative\" not in word else word[:11].lstrip() + word[11].upper() + word[12:].rstrip().lower()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 72,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (161/100)",
        "module": "converter",
        "line_content": "return word[0].lstrip().upper() + word[1:].rstrip().lower() if \"negative\" not in word else word[:11].lstrip() + word[11].upper() + word[12:].rstrip().lower()",
        "line_number": 72,
        "context_before": [
            "",
            "word = \" \".join(map(str.strip, word))"
        ],
        "context_after": [
            "",
            "if __name__ == \"__main__\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 83,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "converter",
        "line_content": "print(\"Error: Invalid Number!\")",
        "line_number": 83,
        "context_before": [
            "print(n, \"-->\", converter(n))",
            "except ValueError:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 16,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"hundred\" doesn't conform to UPPER_CASE naming style",
        "module": "converter",
        "line_content": "hundred = \"hundred\"",
        "line_number": 16,
        "context_before": [
            "",
            "two_digit_words = [\"ten\", \"eleven\", \"twelve\"]"
        ],
        "context_after": [
            "large_sum_words = [\"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\"]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 19,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'n' from outer scope (line 77)",
        "module": "converter",
        "line_content": "def converter(n):",
        "line_number": 19,
        "context_before": [
            "large_sum_words = [\"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\"]",
            ""
        ],
        "context_after": [
            "word = []",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 33,
        "column": 25,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "converter",
        "line_content": "if num != '000': skip = False",
        "line_number": 33,
        "context_before": [
            "",
            "for i, num in enumerate(sum_list):"
        ],
        "context_after": [
            "",
            "for _ in range(len(num)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 38,
        "column": 19,
        "message_id": "R0916",
        "message_type": "refactor",
        "symbol": "too-many-boolean-expressions",
        "message": "Too many boolean expressions in if statement (6/5)",
        "module": "converter",
        "line_content": "if (len(sum_list) > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3)) and i == len(sum_list) - 1 and (word[-1] in large_sum_words or hundred in word[-1]):",
        "line_number": 38,
        "context_before": [
            "num = num.lstrip('0')",
            "if len(num) == 1:"
        ],
        "context_after": [
            "word.append(\"and\")",
            "word.append(one_digit_words[num][0])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 45,
        "column": 16,
        "message_id": "R1723",
        "message_type": "refactor",
        "symbol": "no-else-break",
        "message": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
        "module": "converter",
        "line_content": "if num[0] != '0':",
        "line_number": 45,
        "context_before": [
            "",
            "if len(num) == 2:"
        ],
        "context_after": [
            "if (len(sum_list) > 1 or (len(sum_list) == 1 and len(sum_list[0]) == 3)) and i == len(sum_list) - 1:",
            "word.append(\"and\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 32,
        "column": 4,
        "message_id": "R1702",
        "message_type": "refactor",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (6/5)",
        "module": "converter",
        "line_content": "for i, num in enumerate(sum_list):",
        "line_number": 32,
        "context_before": [
            "skip = False",
            ""
        ],
        "context_after": [
            "if num != '000': skip = False",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 64,
        "column": 40,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "converter",
        "line_content": "if num[1:] == '00': break",
        "line_number": 64,
        "context_before": [
            "if num[0] != '0':",
            "word.append(one_digit_words[num[0]][0] + \" \" + hundred)"
        ],
        "context_after": [
            "num = num[1:]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_numbers_to_word/converter.py",
        "line": 19,
        "column": 0,
        "message_id": "R0912",
        "message_type": "refactor",
        "symbol": "too-many-branches",
        "message": "Too many branches (19/12)",
        "module": "converter",
        "line_content": "def converter(n):",
        "line_number": 19,
        "context_before": [
            "large_sum_words = [\"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\"]",
            ""
        ],
        "context_after": [
            "word = []",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 5,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "internet_connection_check",
        "line_content": "url = 'https://www.google.com/'",
        "line_number": 5,
        "context_before": [
            "",
            "def internet_connection_test():"
        ],
        "context_after": [
            "print(f'Attempting to connect to {url} to determine internet connection status.')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 6,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "internet_connection_check",
        "line_content": "print(f'Attempting to connect to {url} to determine internet connection status.')",
        "line_number": 6,
        "context_before": [
            "def internet_connection_test():",
            "url = 'https://www.google.com/'"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 7,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "internet_connection_check",
        "line_content": "",
        "line_number": 7,
        "context_before": [
            "url = 'https://www.google.com/'",
            "print(f'Attempting to connect to {url} to determine internet connection status.')"
        ],
        "context_after": [
            "try:",
            "print(url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 8,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "internet_connection_check",
        "line_content": "try:",
        "line_number": 8,
        "context_before": [
            "print(f'Attempting to connect to {url} to determine internet connection status.')",
            ""
        ],
        "context_after": [
            "print(url)",
            "resp = requests.get(url, timeout = 10)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 9,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "print(url)",
        "line_number": 9,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "resp = requests.get(url, timeout = 10)",
            "resp.text"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 10,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "resp = requests.get(url, timeout = 10)",
        "line_number": 10,
        "context_before": [
            "try:",
            "print(url)"
        ],
        "context_after": [
            "resp.text",
            "resp.status_code"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 11,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "resp.text",
        "line_number": 11,
        "context_before": [
            "print(url)",
            "resp = requests.get(url, timeout = 10)"
        ],
        "context_after": [
            "resp.status_code",
            "print(f'Connection to {url} was successful.')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 12,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "resp.status_code",
        "line_number": 12,
        "context_before": [
            "resp = requests.get(url, timeout = 10)",
            "resp.text"
        ],
        "context_after": [
            "print(f'Connection to {url} was successful.')",
            "return True"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 13,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "print(f'Connection to {url} was successful.')",
        "line_number": 13,
        "context_before": [
            "resp.text",
            "resp.status_code"
        ],
        "context_after": [
            "return True",
            "except ConnectionError as e:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 14,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "return True",
        "line_number": 14,
        "context_before": [
            "resp.status_code",
            "print(f'Connection to {url} was successful.')"
        ],
        "context_after": [
            "except ConnectionError as e:",
            "requests.ConnectionError"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 15,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "internet_connection_check",
        "line_content": "except ConnectionError as e:",
        "line_number": 15,
        "context_before": [
            "print(f'Connection to {url} was successful.')",
            "return True"
        ],
        "context_after": [
            "requests.ConnectionError",
            "print(f'Failed to connect to {url}.')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 16,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "requests.ConnectionError",
        "line_number": 16,
        "context_before": [
            "return True",
            "except ConnectionError as e:"
        ],
        "context_after": [
            "print(f'Failed to connect to {url}.')",
            "return False"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 17,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "print(f'Failed to connect to {url}.')",
        "line_number": 17,
        "context_before": [
            "except ConnectionError as e:",
            "requests.ConnectionError"
        ],
        "context_after": [
            "return False",
            "except:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 18,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "return False",
        "line_number": 18,
        "context_before": [
            "requests.ConnectionError",
            "print(f'Failed to connect to {url}.')"
        ],
        "context_after": [
            "except:",
            "print(f'Failed with unparsed reason.')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 19,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "internet_connection_check",
        "line_content": "except:",
        "line_number": 19,
        "context_before": [
            "print(f'Failed to connect to {url}.')",
            "return False"
        ],
        "context_after": [
            "print(f'Failed with unparsed reason.')",
            "return False"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 20,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "print(f'Failed with unparsed reason.')",
        "line_number": 20,
        "context_before": [
            "return False",
            "except:"
        ],
        "context_after": [
            "return False",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 21,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "internet_connection_check",
        "line_content": "return False",
        "line_number": 21,
        "context_before": [
            "except:",
            "print(f'Failed with unparsed reason.')"
        ],
        "context_after": [
            "",
            "internet_connection_test()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 2,
        "column": 0,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'ConnectionError'",
        "module": "internet_connection_check",
        "line_content": "from requests.exceptions import ConnectionError",
        "line_number": 2,
        "context_before": [
            "import requests"
        ],
        "context_after": [
            "",
            "def internet_connection_test():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "internet_connection_check",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from requests.exceptions import ConnectionError",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests.exceptions'",
        "module": "internet_connection_check",
        "line_content": "from requests.exceptions import ConnectionError",
        "line_number": 2,
        "context_before": [
            "import requests"
        ],
        "context_after": [
            "",
            "def internet_connection_test():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 19,
        "column": 1,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "internet_connection_check",
        "line_content": "except:",
        "line_number": 19,
        "context_before": [
            "print(f'Failed to connect to {url}.')",
            "return False"
        ],
        "context_after": [
            "print(f'Failed with unparsed reason.')",
            "return False"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 11,
        "column": 2,
        "message_id": "W0104",
        "message_type": "warning",
        "symbol": "pointless-statement",
        "message": "Statement seems to have no effect",
        "module": "internet_connection_check",
        "line_content": "resp.text",
        "line_number": 11,
        "context_before": [
            "print(url)",
            "resp = requests.get(url, timeout = 10)"
        ],
        "context_after": [
            "resp.status_code",
            "print(f'Connection to {url} was successful.')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 12,
        "column": 2,
        "message_id": "W0104",
        "message_type": "warning",
        "symbol": "pointless-statement",
        "message": "Statement seems to have no effect",
        "module": "internet_connection_check",
        "line_content": "resp.status_code",
        "line_number": 12,
        "context_before": [
            "resp = requests.get(url, timeout = 10)",
            "resp.text"
        ],
        "context_after": [
            "print(f'Connection to {url} was successful.')",
            "return True"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 16,
        "column": 2,
        "message_id": "W0104",
        "message_type": "warning",
        "symbol": "pointless-statement",
        "message": "Statement seems to have no effect",
        "module": "internet_connection_check",
        "line_content": "requests.ConnectionError",
        "line_number": 16,
        "context_before": [
            "return True",
            "except ConnectionError as e:"
        ],
        "context_after": [
            "print(f'Failed to connect to {url}.')",
            "return False"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 20,
        "column": 8,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "internet_connection_check",
        "line_content": "print(f'Failed with unparsed reason.')",
        "line_number": 20,
        "context_before": [
            "return False",
            "except:"
        ],
        "context_after": [
            "return False",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Internet_connection_check/internet_connection_check.py",
        "line": 15,
        "column": 1,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'e'",
        "module": "internet_connection_check",
        "line_content": "except ConnectionError as e:",
        "line_number": 15,
        "context_before": [
            "print(f'Connection to {url} was successful.')",
            "return True"
        ],
        "context_after": [
            "requests.ConnectionError",
            "print(f'Failed to connect to {url}.')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/simple-bot.py",
        "line": 7,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "simple-bot",
        "line_content": "",
        "line_number": 7,
        "context_before": [
            "if msg.text() == 'ding':",
            "await msg.say('dong')"
        ],
        "context_after": [
            "async def main():",
            "bot = Wechaty()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/simple-bot.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"simple-bot\" doesn't conform to snake_case naming style",
        "module": "simple-bot",
        "line_content": "import asyncio",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from wechaty import Wechaty, Message",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/simple-bot.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'wechaty'",
        "module": "simple-bot",
        "line_content": "from wechaty import Wechaty, Message",
        "line_number": 2,
        "context_before": [
            "import asyncio"
        ],
        "context_after": [
            "",
            "async def on_message(msg: Message):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/bot.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'wechaty_puppet'",
        "module": "bot",
        "line_content": "from wechaty_puppet import get_logger",
        "line_number": 5,
        "context_before": [
            "import asyncio",
            "from datetime import datetime"
        ],
        "context_after": [
            "from wechaty import (",
            "MessageType,"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/bot.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'wechaty'",
        "module": "bot",
        "line_content": "from wechaty import (",
        "line_number": 6,
        "context_before": [
            "from datetime import datetime",
            "from wechaty_puppet import get_logger"
        ],
        "context_after": [
            "MessageType,",
            "FileBox,"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/bot.py",
        "line": 190,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"MAX_ROOM_MEMBER_COUNT\" doesn't conform to snake_case naming style",
        "module": "bot",
        "line_content": "MAX_ROOM_MEMBER_COUNT = 500",
        "line_number": 190,
        "context_before": [
            "eg: hello text, friend contact object",
            "\"\"\""
        ],
        "context_after": [
            "# 1. receive a new friendship from someone",
            "if friendship.type() == FriendshipType.FRIENDSHIP_TYPE_RECEIVE:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/bot.py",
        "line": 214,
        "column": 27,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'inviter'",
        "module": "bot",
        "line_content": "inviter: Contact, date: datetime) -> None:",
        "line_number": 214,
        "context_before": [
            "",
            "async def on_room_join(self, room: Room, invitees: List[Contact],"
        ],
        "context_after": [
            "\"\"\"on_room_join when there are new contacts to the room",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/chatbot/bot.py",
        "line": 214,
        "column": 45,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'date'",
        "module": "bot",
        "line_content": "inviter: Contact, date: datetime) -> None:",
        "line_number": 214,
        "context_before": [
            "",
            "async def on_room_join(self, room: Room, invitees: List[Contact],"
        ],
        "context_after": [
            "\"\"\"on_room_join when there are new contacts to the room",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 16,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "alarm_clock",
        "line_content": "t1=Thread(target=alarm)",
        "line_number": 16,
        "context_before": [
            "# Use Threading",
            "def Threading():"
        ],
        "context_after": [
            "t1.start()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 17,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "alarm_clock",
        "line_content": "t1.start()",
        "line_number": 17,
        "context_before": [
            "def Threading():",
            "t1=Thread(target=alarm)"
        ],
        "context_after": [
            "",
            "def alarm():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 21,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "alarm_clock",
        "line_content": "while True:",
        "line_number": 21,
        "context_before": [
            "def alarm():",
            "# Infinite Loop"
        ],
        "context_after": [
            "# Set Alarm",
            "set_alarm_time = f\"{hour.get()}:{minute.get()}:{second.get()}\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 23,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "alarm_clock",
        "line_content": "set_alarm_time = f\"{hour.get()}:{minute.get()}:{second.get()}\"",
        "line_number": 23,
        "context_before": [
            "while True:",
            "# Set Alarm"
        ],
        "context_after": [
            "",
            "# Wait for one seconds"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 26,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "alarm_clock",
        "line_content": "time.sleep(1)",
        "line_number": 26,
        "context_before": [
            "",
            "# Wait for one seconds"
        ],
        "context_after": [
            "",
            "# Get current time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 29,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "alarm_clock",
        "line_content": "current_time = datetime.datetime.now().strftime(\"%H:%M:%S\")",
        "line_number": 29,
        "context_before": [
            "",
            "# Get current time"
        ],
        "context_after": [
            "print(current_time,set_alarm_time)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 30,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "alarm_clock",
        "line_content": "print(current_time,set_alarm_time)",
        "line_number": 30,
        "context_before": [
            "# Get current time",
            "current_time = datetime.datetime.now().strftime(\"%H:%M:%S\")"
        ],
        "context_after": [
            "",
            "# Check whether set alarm is equal to current time or not"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 33,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "alarm_clock",
        "line_content": "if current_time == set_alarm_time:",
        "line_number": 33,
        "context_before": [
            "",
            "# Check whether set alarm is equal to current time or not"
        ],
        "context_after": [
            "print(\"Time to Wake up\")",
            "# Playing sound"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 34,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "alarm_clock",
        "line_content": "print(\"Time to Wake up\")",
        "line_number": 34,
        "context_before": [
            "# Check whether set alarm is equal to current time or not",
            "if current_time == set_alarm_time:"
        ],
        "context_after": [
            "# Playing sound",
            "winsound.PlaySound(\"sound.wav\",winsound.SND_ASYNC)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 36,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "alarm_clock",
        "line_content": "winsound.PlaySound(\"sound.wav\",winsound.SND_ASYNC)",
        "line_number": 36,
        "context_before": [
            "print(\"Time to Wake up\")",
            "# Playing sound"
        ],
        "context_after": [
            "",
            "# Add Labels, Frame, Button, Optionmenus"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 40,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after '=' keyword",
        "module": "alarm_clock",
        "line_content": "Label(root,text=\"Set Time\",font=(\"Helvetica 15 bold\")).pack()",
        "line_number": 40,
        "context_before": [
            "# Add Labels, Frame, Button, Optionmenus",
            "Label(root,text=\"Alarm Clock\",font=(\"Helvetica 20 bold\"),fg=\"red\").pack(pady=10)"
        ],
        "context_after": [
            "",
            "frame = Frame(root)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 6,
        "column": 0,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'enumerate'",
        "module": "alarm_clock",
        "line_content": "from threading import *",
        "line_number": 6,
        "context_before": [
            "import time",
            "import winsound"
        ],
        "context_after": [
            "",
            "# Create Object"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 2,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "alarm_clock",
        "line_content": "from tkinter import *",
        "line_number": 2,
        "context_before": [
            "# Import Required Library"
        ],
        "context_after": [
            "import datetime",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'winsound'",
        "module": "alarm_clock",
        "line_content": "import winsound",
        "line_number": 5,
        "context_before": [
            "import datetime",
            "import time"
        ],
        "context_after": [
            "from threading import *",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 6,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import threading",
        "module": "alarm_clock",
        "line_content": "from threading import *",
        "line_number": 6,
        "context_before": [
            "import time",
            "import winsound"
        ],
        "context_after": [
            "",
            "# Create Object"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 15,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"Threading\" doesn't conform to snake_case naming style",
        "module": "alarm_clock",
        "line_content": "def Threading():",
        "line_number": 15,
        "context_before": [
            "",
            "# Use Threading"
        ],
        "context_after": [
            "t1=Thread(target=alarm)",
            "t1.start()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 2,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, IntVar, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, Grid, BaseWidget, Widget, Toplevel, Canvas, Checkbutton, Entry, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, Scrollbar, Text, Image, PhotoImage, BitmapImage, image_names, image_types, Spinbox, LabelFrame, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, E, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, X, Y, BOTH, TOP, RIGHT, BOTTOM, RAISED, SUNKEN, FLAT, RIDGE, GROOVE, SOLID, HORIZONTAL, VERTICAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, END, INSERT, CURRENT, ANCHOR, ALL, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "alarm_clock",
        "line_content": "from tkinter import *",
        "line_number": 2,
        "context_before": [
            "# Import Required Library"
        ],
        "context_after": [
            "import datetime",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Alarm clock/alarm_clock.py",
        "line": 6,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) warnings, get_ident, get_native_id, ThreadError, TIMEOUT_MAX, setprofile, setprofile_all_threads, getprofile, settrace, settrace_all_threads, gettrace, Lock, RLock, Condition, Semaphore, BoundedSemaphore, Barrier, BrokenBarrierError, ExceptHookArgs, excepthook, Timer, current_thread, currentThread, active_count, activeCount, enumerate, main_thread, WeakSet, local, namedtuple, stack_size and lock from wildcard import of threading",
        "module": "alarm_clock",
        "line_content": "from threading import *",
        "line_number": 6,
        "context_before": [
            "import time",
            "import winsound"
        ],
        "context_after": [
            "",
            "# Create Object"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Duplicate files remover/duplicatefileremover.py",
        "line": 8,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (122/100)",
        "module": "duplicatefileremover",
        "line_content": "# For large files, if we read it all together it can lead to memory overflow, So we take a blocksize to read at a time",
        "line_number": 8,
        "context_before": [
            "",
            "def hashFile(filename):"
        ],
        "context_after": [
            "BLOCKSIZE = 65536",
            "hasher = hashlib.md5()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Duplicate files remover/duplicatefileremover.py",
        "line": 14,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'while' keyword",
        "module": "duplicatefileremover",
        "line_content": "while(len(buf) > 0):",
        "line_number": 14,
        "context_before": [
            "# Reads the particular blocksize from file",
            "buf = file.read(BLOCKSIZE)"
        ],
        "context_after": [
            "hasher.update(buf)",
            "buf = file.read(BLOCKSIZE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Duplicate files remover/duplicatefileremover.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"hashFile\" doesn't conform to snake_case naming style",
        "module": "duplicatefileremover",
        "line_content": "def hashFile(filename):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# For large files, if we read it all together it can lead to memory overflow, So we take a blocksize to read at a time",
            "BLOCKSIZE = 65536"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Duplicate files remover/duplicatefileremover.py",
        "line": 9,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"BLOCKSIZE\" doesn't conform to snake_case naming style",
        "module": "duplicatefileremover",
        "line_content": "BLOCKSIZE = 65536",
        "line_number": 9,
        "context_before": [
            "def hashFile(filename):",
            "# For large files, if we read it all together it can lead to memory overflow, So we take a blocksize to read at a time"
        ],
        "context_after": [
            "hasher = hashlib.md5()",
            "with open(filename, 'rb') as file:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Duplicate files remover/duplicatefileremover.py",
        "line": 28,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"key\" doesn't conform to UPPER_CASE naming style",
        "module": "duplicatefileremover",
        "line_content": "key = hashFile(f)",
        "line_number": 28,
        "context_before": [
            "filelist = [f for f in os.listdir() if os.path.isfile(f)]",
            "for f in filelist:"
        ],
        "context_after": [
            "# If key already exists, it deletes the file",
            "if key in hashMap.keys():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Duplicate files remover/duplicatefileremover.py",
        "line": 30,
        "column": 18,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "duplicatefileremover",
        "line_content": "if key in hashMap.keys():",
        "line_number": 30,
        "context_before": [
            "key = hashFile(f)",
            "# If key already exists, it deletes the file"
        ],
        "context_after": [
            "deletedFiles.append(f)",
            "os.remove(f)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 31,
        "column": 63,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "SpeakingDictionary",
        "line_content": "szHello= sRecog.recognize_google(rAudio, language= 'en-US')",
        "line_number": 31,
        "context_before": [
            "rAudio= sRecog.listen(source)",
            ""
        ],
        "context_after": [
            "szHello= szHello.lower()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 41,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "SpeakingDictionary",
        "line_content": "",
        "line_number": 41,
        "context_before": [
            "print(\"Which word do you want to find? Please speak slowly.\")",
            "sSpeak.SpeakWord(\"Which word do you want to find Please speak slowly\")"
        ],
        "context_after": [
            "try:",
            "sRecog2= spr.Recognizer()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 46,
        "column": 67,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "SpeakingDictionary",
        "line_content": "#Capture the word that the user want to find the meaning of",
        "line_number": 46,
        "context_before": [
            "sMic2= spr.Microphone()",
            ""
        ],
        "context_after": [
            "with sMic2 as source2:",
            "sRecog2.adjust_for_ambient_noise(source2, duration= .2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 50,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "SpeakingDictionary",
        "line_content": "",
        "line_number": 50,
        "context_before": [
            "sRecog2.adjust_for_ambient_noise(source2, duration= .2)",
            "rAudio2= sRecog2.listen(source2)"
        ],
        "context_after": [
            "szInput= sRecog2.recognize_google(rAudio2, language= 'en-US')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 52,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "SpeakingDictionary",
        "line_content": "",
        "line_number": 52,
        "context_before": [
            "",
            "szInput= sRecog2.recognize_google(rAudio2, language= 'en-US')"
        ],
        "context_after": [
            "try:",
            "#Make sure that the recognizer got the correct word"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 57,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "SpeakingDictionary",
        "line_content": "",
        "line_number": 57,
        "context_before": [
            "print(\"Did you said \"+ szInput+ \"? Please answer with yes or no.\")",
            "sSpeak.SpeakWord(\"Did you said \"+ szInput+ \"Please answer with yes or no\")"
        ],
        "context_after": [
            "sRecog2.adjust_for_ambient_noise(source2, duration= .2)",
            "rAudioYN= sRecog2.listen(source2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 77,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "SpeakingDictionary",
        "line_content": "except spr.UnknownValueError: sSpeak.SpeakWord(\"Unable to understand the input Please try again\")",
        "line_number": 77,
        "context_before": [
            "",
            "#When the recognizer couldn't understand the answer(yes or no)"
        ],
        "context_after": [
            "except spr.RequestError as e: sSpeak.SpeakWord(\"Unable to provide required output\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 81,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "SpeakingDictionary",
        "line_content": "except spr.UnknownValueError: sSpeak.SpeakWord(\"Unable to understand the input Please try again\")",
        "line_number": 81,
        "context_before": [
            "",
            "#When the recognizer couldn't understand the word"
        ],
        "context_after": [
            "except spr.RequestError as e: sSpeak.SpeakWord(\"Unable to provide required output\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 83,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "SpeakingDictionary",
        "line_content": "",
        "line_number": 83,
        "context_before": [
            "except spr.UnknownValueError: sSpeak.SpeakWord(\"Unable to understand the input Please try again\")",
            "except spr.RequestError as e: sSpeak.SpeakWord(\"Unable to provide required output\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"SpeakingDictionary\" doesn't conform to snake_case naming style",
        "module": "SpeakingDictionary",
        "line_content": "import pyttsx3",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from PyDictionary import PyDictionary",
            "import speech_recognition as spr"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pyttsx3'",
        "module": "SpeakingDictionary",
        "line_content": "import pyttsx3",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from PyDictionary import PyDictionary",
            "import speech_recognition as spr"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PyDictionary'",
        "module": "SpeakingDictionary",
        "line_content": "from PyDictionary import PyDictionary",
        "line_number": 2,
        "context_before": [
            "import pyttsx3"
        ],
        "context_after": [
            "import speech_recognition as spr",
            "from gtts import gTTS"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'speech_recognition'",
        "module": "SpeakingDictionary",
        "line_content": "import speech_recognition as spr",
        "line_number": 3,
        "context_before": [
            "import pyttsx3",
            "from PyDictionary import PyDictionary"
        ],
        "context_after": [
            "from gtts import gTTS",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'gtts'",
        "module": "SpeakingDictionary",
        "line_content": "from gtts import gTTS",
        "line_number": 4,
        "context_before": [
            "from PyDictionary import PyDictionary",
            "import speech_recognition as spr"
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 9,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Method name \"SpeakWord\" doesn't conform to snake_case naming style",
        "module": "SpeakingDictionary",
        "line_content": "def SpeakWord(self, audio):",
        "line_number": 9,
        "context_before": [
            "#Speaking class",
            "class Speak:"
        ],
        "context_after": [
            "#Having initial constructor of pyttsx3",
            "pSpeakEngine= pyttsx3.init('sapi5')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 11,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"pSpeakEngine\" doesn't conform to snake_case naming style",
        "module": "SpeakingDictionary",
        "line_content": "pSpeakEngine= pyttsx3.init('sapi5')",
        "line_number": 11,
        "context_before": [
            "def SpeakWord(self, audio):",
            "#Having initial constructor of pyttsx3"
        ],
        "context_after": [
            "pVoices= pSpeakEngine.getProperty('voices')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 12,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"pVoices\" doesn't conform to snake_case naming style",
        "module": "SpeakingDictionary",
        "line_content": "pVoices= pSpeakEngine.getProperty('voices')",
        "line_number": 12,
        "context_before": [
            "#Having initial constructor of pyttsx3",
            "pSpeakEngine= pyttsx3.init('sapi5')"
        ],
        "context_after": [
            "",
            "#Speaking audio that got as parameter"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 8,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "module": "SpeakingDictionary",
        "line_content": "class Speak:",
        "line_number": 8,
        "context_before": [
            "",
            "#Speaking class"
        ],
        "context_after": [
            "def SpeakWord(self, audio):",
            "#Having initial constructor of pyttsx3"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 77,
        "column": 42,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "SpeakingDictionary",
        "line_content": "except spr.UnknownValueError: sSpeak.SpeakWord(\"Unable to understand the input Please try again\")",
        "line_number": 77,
        "context_before": [
            "",
            "#When the recognizer couldn't understand the answer(yes or no)"
        ],
        "context_after": [
            "except spr.RequestError as e: sSpeak.SpeakWord(\"Unable to provide required output\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 78,
        "column": 42,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "SpeakingDictionary",
        "line_content": "except spr.RequestError as e: sSpeak.SpeakWord(\"Unable to provide required output\")",
        "line_number": 78,
        "context_before": [
            "#When the recognizer couldn't understand the answer(yes or no)",
            "except spr.UnknownValueError: sSpeak.SpeakWord(\"Unable to understand the input Please try again\")"
        ],
        "context_after": [
            "",
            "#When the recognizer couldn't understand the word"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 81,
        "column": 34,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "SpeakingDictionary",
        "line_content": "except spr.UnknownValueError: sSpeak.SpeakWord(\"Unable to understand the input Please try again\")",
        "line_number": 81,
        "context_before": [
            "",
            "#When the recognizer couldn't understand the word"
        ],
        "context_after": [
            "except spr.RequestError as e: sSpeak.SpeakWord(\"Unable to provide required output\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 82,
        "column": 34,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "SpeakingDictionary",
        "line_content": "except spr.RequestError as e: sSpeak.SpeakWord(\"Unable to provide required output\")",
        "line_number": 82,
        "context_before": [
            "#When the recognizer couldn't understand the word",
            "except spr.UnknownValueError: sSpeak.SpeakWord(\"Unable to understand the input Please try again\")"
        ],
        "context_after": [
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party imports \"pyttsx3\", \"PyDictionary.PyDictionary\", \"speech_recognition\", \"gtts.gTTS\"",
        "module": "SpeakingDictionary",
        "line_content": "import os",
        "line_number": 5,
        "context_before": [
            "import speech_recognition as spr",
            "from gtts import gTTS"
        ],
        "context_after": [
            "",
            "#Speaking class"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 4,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused gTTS imported from gtts",
        "module": "SpeakingDictionary",
        "line_content": "from gtts import gTTS",
        "line_number": 4,
        "context_before": [
            "from PyDictionary import PyDictionary",
            "import speech_recognition as spr"
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speaking_Dictionary/SpeakingDictionary.py",
        "line": 5,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import os",
        "module": "SpeakingDictionary",
        "line_content": "import os",
        "line_number": 5,
        "context_before": [
            "import speech_recognition as spr",
            "from gtts import gTTS"
        ],
        "context_after": [
            "",
            "#Speaking class"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/detect_align_faces/main.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "main",
        "line_content": "import numpy as np",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "import os.path as osp",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/detect_align_faces/main.py",
        "line": 10,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "main",
        "line_content": "import cv2",
        "line_number": 10,
        "context_before": [
            "import os.path as osp",
            "import sys"
        ],
        "context_after": [
            "import dlib",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/detect_align_faces/main.py",
        "line": 11,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'dlib'",
        "module": "main",
        "line_content": "import dlib",
        "line_number": 11,
        "context_before": [
            "import sys",
            "import cv2"
        ],
        "context_after": [
            "",
            "OUT_SIZE = (224, 224)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/detect_align_faces/main.py",
        "line": 32,
        "column": 24,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "filename += '_face_{:03}'.format(idx) + ext",
        "line_number": 32,
        "context_before": [
            "face = cv2.cvtColor(face, cv2.COLOR_RGB2BGR)",
            "filename, ext = osp.splitext(file)"
        ],
        "context_after": [
            "cv2.imwrite(filename, face)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/detect_align_faces/main.py",
        "line": 36,
        "column": 0,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (20/15)",
        "module": "main",
        "line_content": "def detect_align_faces(detector, sp, img):",
        "line_number": 36,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "faces = detector(img, 1)",
            "res = []"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/detect_align_faces/main.py",
        "line": 8,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os.path\" should be placed before third party import \"numpy\"",
        "module": "main",
        "line_content": "import os.path as osp",
        "line_number": 8,
        "context_before": [
            "",
            "import numpy as np"
        ],
        "context_after": [
            "import sys",
            "import cv2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/detect_align_faces/main.py",
        "line": 9,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party import \"numpy\"",
        "module": "main",
        "line_content": "import sys",
        "line_number": 9,
        "context_before": [
            "import numpy as np",
            "import os.path as osp"
        ],
        "context_after": [
            "import cv2",
            "import dlib"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JSON_to_CSV/converter.py",
        "line": 14,
        "column": 11,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "converter",
        "line_content": "except Exception as ex:",
        "line_number": 14,
        "context_before": [
            "with open('output.csv', 'w') as f:",
            "f.write(output)"
        ],
        "context_after": [
            "print(f'Error: {str(ex)}')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JSON_to_CSV/converter.py",
        "line": 5,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "converter",
        "line_content": "with open('input.json', 'r') as f:",
        "line_number": 5,
        "context_before": [
            "if __name__ == '__main__':",
            "try:"
        ],
        "context_after": [
            "data = json.loads(f.read())",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JSON_to_CSV/converter.py",
        "line": 8,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"output\" doesn't conform to UPPER_CASE naming style",
        "module": "converter",
        "line_content": "output = ','.join([*data[0]])",
        "line_number": 8,
        "context_before": [
            "data = json.loads(f.read())",
            ""
        ],
        "context_after": [
            "for obj in data:",
            "output += f'\\n{obj[\"Name\"]},{obj[\"age\"]},{obj[\"birthyear\"]}'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JSON_to_CSV/converter.py",
        "line": 12,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "converter",
        "line_content": "with open('output.csv', 'w') as f:",
        "line_number": 12,
        "context_before": [
            "output += f'\\n{obj[\"Name\"]},{obj[\"age\"]},{obj[\"birthyear\"]}'",
            ""
        ],
        "context_after": [
            "f.write(output)",
            "except Exception as ex:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Number_guessing_game/main.py",
        "line": 54,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "main",
        "line_content": "",
        "line_number": 54,
        "context_before": [
            "# Increase the value of chance by 1",
            "chances += 1"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Number_guessing_game/main.py",
        "line": 14,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"chances\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "chances = 0",
        "line_number": 14,
        "context_before": [
            "# into input box here number of",
            "# chances are 5"
        ],
        "context_after": [
            "",
            "print(\"Guess a number (between 1 and 9):\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Number_guessing_game/main.py",
        "line": 27,
        "column": 4,
        "message_id": "R1723",
        "message_type": "refactor",
        "symbol": "no-else-break",
        "message": "Unnecessary \"elif\" after \"break\", remove the leading \"el\" from \"elif\"",
        "module": "main",
        "line_content": "if guess == number:",
        "line_number": 27,
        "context_before": [
            "# Compare the user entered number",
            "# with the number to be guessed"
        ],
        "context_after": [
            "",
            "# if number entered by user"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 9,
        "column": 33,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "Audio-book",
        "line_content": "pdf_File = open('name.pdf', 'rb')",
        "line_number": 9,
        "context_before": [
            "",
            "#Open file Path"
        ],
        "context_after": [
            "",
            "#Create PDF Reader Object"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 18,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 4",
        "module": "Audio-book",
        "line_content": "try:",
        "line_number": 18,
        "context_before": [
            "#Extracting text data from each page of the pdf file",
            "for i in range(count):"
        ],
        "context_after": [
            "page = pdf_Reader.getPage(i)",
            "textList.append(page.extractText())"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 19,
        "column": 32,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "Audio-book",
        "line_content": "page = pdf_Reader.getPage(i)",
        "line_number": 19,
        "context_before": [
            "for i in range(count):",
            "try:"
        ],
        "context_after": [
            "textList.append(page.extractText())",
            "except:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 19,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 8",
        "module": "Audio-book",
        "line_content": "page = pdf_Reader.getPage(i)",
        "line_number": 19,
        "context_before": [
            "for i in range(count):",
            "try:"
        ],
        "context_after": [
            "textList.append(page.extractText())",
            "except:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 20,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 8",
        "module": "Audio-book",
        "line_content": "textList.append(page.extractText())",
        "line_number": 20,
        "context_before": [
            "try:",
            "page = pdf_Reader.getPage(i)"
        ],
        "context_after": [
            "except:",
            "pass"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 21,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 4",
        "module": "Audio-book",
        "line_content": "except:",
        "line_number": 21,
        "context_before": [
            "page = pdf_Reader.getPage(i)",
            "textList.append(page.extractText())"
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 22,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 7 spaces, expected 8",
        "module": "Audio-book",
        "line_content": "pass",
        "line_number": 22,
        "context_before": [
            "textList.append(page.extractText())",
            "except:"
        ],
        "context_after": [
            "",
            "#Converting multiline text to single line text"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Audio-book\" doesn't conform to snake_case naming style",
        "module": "Audio-book",
        "line_content": "#Importing Libraries",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "#Importing Google Text to Speech library",
            "from gtts import gTTS"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'gtts'",
        "module": "Audio-book",
        "line_content": "from gtts import gTTS",
        "line_number": 3,
        "context_before": [
            "#Importing Libraries",
            "#Importing Google Text to Speech library"
        ],
        "context_after": [
            "",
            "#Importing PDF reader PyPDF2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PyPDF2'",
        "module": "Audio-book",
        "line_content": "import PyPDF2",
        "line_number": 6,
        "context_before": [
            "",
            "#Importing PDF reader PyPDF2"
        ],
        "context_after": [
            "",
            "#Open file Path"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 21,
        "column": 3,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "Audio-book",
        "line_content": "except:",
        "line_number": 21,
        "context_before": [
            "page = pdf_Reader.getPage(i)",
            "textList.append(page.extractText())"
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 25,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"textString\" doesn't conform to UPPER_CASE naming style",
        "module": "Audio-book",
        "line_content": "textString = \" \".join(textList)",
        "line_number": 25,
        "context_before": [
            "",
            "#Converting multiline text to single line text"
        ],
        "context_after": [
            "",
            "print(textString)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 30,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"language\" doesn't conform to UPPER_CASE naming style",
        "module": "Audio-book",
        "line_content": "language = 'en'",
        "line_number": 30,
        "context_before": [
            "",
            "#Set language to english (en)"
        ],
        "context_after": [
            "",
            "#Call GTTS"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/AudioBook/Audio-book.py",
        "line": 9,
        "column": 11,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "Audio-book",
        "line_content": "pdf_File = open('name.pdf', 'rb')",
        "line_number": 9,
        "context_before": [
            "",
            "#Open file Path"
        ],
        "context_after": [
            "",
            "#Create PDF Reader Object"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_calculator_app/calculator.py",
        "line": 24,
        "column": 21,
        "message_id": "W0123",
        "message_type": "warning",
        "symbol": "eval-used",
        "message": "Use of eval",
        "module": "calculator",
        "line_content": "output = str(eval(input_info.strip()))",
        "line_number": 24,
        "context_before": [
            "input_info = entry.get()",
            "try:"
        ],
        "context_after": [
            "except ZeroDivisionError:",
            "popupmsg()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_calculator_app/calculator.py",
        "line": 39,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"B1\" doesn't conform to snake_case naming style",
        "module": "calculator",
        "line_content": "B1 = Button(popup, text=\"Okay\", bg=\"#DDDDDD\", command=popup.destroy)",
        "line_number": 39,
        "context_before": [
            "label = Label(popup, text=\"Cannot divide by 0 ! \\n Enter valid values\")",
            "label.pack(side=\"top\", fill=\"x\", pady=10)"
        ],
        "context_after": [
            "B1.pack()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_calculator_app/calculator.py",
        "line": 43,
        "column": 0,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (31/15)",
        "module": "calculator",
        "line_content": "def cal():",
        "line_number": 43,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "root = Tk()",
            "root.title(\"Calc\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_calculator_app/calculator.py",
        "line": 128,
        "column": 4,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'quit'",
        "module": "calculator",
        "line_content": "def quit():",
        "line_number": 128,
        "context_before": [
            "command=lambda: get_input(entry, '**'))",
            "button18.grid(row=5, column=2, pady=5)"
        ],
        "context_after": [
            "exit['command'] = root.quit()",
            "exit = Button(root, text='Quit', fg='white', bg='black', command=quit, height=1, width=7)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_calculator_app/calculator.py",
        "line": 130,
        "column": 4,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'exit'",
        "module": "calculator",
        "line_content": "exit = Button(root, text='Quit', fg='white', bg='black', command=quit, height=1, width=7)",
        "line_number": 130,
        "context_before": [
            "def quit():",
            "exit['command'] = root.quit()"
        ],
        "context_after": [
            "exit.grid(row=6, column=1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_calculator_app/calculator.py",
        "line": 129,
        "column": 8,
        "message_id": "E1111",
        "message_type": "error",
        "symbol": "assignment-from-no-return",
        "message": "Assigning result of a function call, where the function has no return",
        "module": "calculator",
        "line_content": "exit['command'] = root.quit()",
        "line_number": 129,
        "context_before": [
            "button18.grid(row=5, column=2, pady=5)",
            "def quit():"
        ],
        "context_after": [
            "exit = Button(root, text='Quit', fg='white', bg='black', command=quit, height=1, width=7)",
            "exit.grid(row=6, column=1)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_calculator_app/calculator.py",
        "line": 43,
        "column": 0,
        "message_id": "R0915",
        "message_type": "refactor",
        "symbol": "too-many-statements",
        "message": "Too many statements (56/50)",
        "module": "calculator",
        "line_content": "def cal():",
        "line_number": 43,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "root = Tk()",
            "root.title(\"Calc\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "dct",
        "line_content": "import numpy as np",
        "line_number": 7,
        "context_before": [
            "# DCT algorithm has great a robust but lower capacity.",
            ""
        ],
        "context_after": [
            "import os.path as osp",
            "import cv2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 9,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "dct",
        "line_content": "import cv2",
        "line_number": 9,
        "context_before": [
            "import numpy as np",
            "import os.path as osp"
        ],
        "context_after": [
            "",
            "FLAG = '%'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 34,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "dct",
        "line_content": "txt = \"{}{}{}\".format(len(txt), FLAG, txt)",
        "line_number": 34,
        "context_before": [
            "def insert(path, txt):",
            "img = cv2.imread(path, cv2.IMREAD_ANYCOLOR)"
        ],
        "context_after": [
            "row, col = img.shape[:2]",
            "max_bytes = (row // 8) * (col // 8) // 8"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 38,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "dct",
        "line_content": "txt), \"Message overflow the capacity:{}\".format(max_bytes)",
        "line_number": 38,
        "context_before": [
            "max_bytes = (row // 8) * (col // 8) // 8",
            "assert max_bytes >= len("
        ],
        "context_after": [
            "img = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)",
            "# Just use the Y plane to store message, you can use all plane"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 49,
        "column": 4,
        "message_id": "C0200",
        "message_type": "convention",
        "symbol": "consider-using-enumerate",
        "message": "Consider using enumerate instead of iterating with range and len",
        "module": "dct",
        "line_content": "for idx in range(len(txt)):",
        "line_number": 49,
        "context_before": [
            "quantized = cv2.dct(y[r_idx: r_idx+8, c_idx: c_idx+8]) / TABLE",
            "blocks.append(quantized)"
        ],
        "context_after": [
            "encode(blocks[idx*8: (idx+1)*8], txt[idx])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 68,
        "column": 19,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'data' from outer scope (line 124)",
        "module": "dct",
        "line_content": "def encode(blocks, data):",
        "line_number": 68,
        "context_before": [
            "",
            "# Encode a char into the blocks"
        ],
        "context_after": [
            "data = ord(data)",
            "for idx in range(len(blocks)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 70,
        "column": 4,
        "message_id": "C0200",
        "message_type": "convention",
        "symbol": "consider-using-enumerate",
        "message": "Consider using enumerate instead of iterating with range and len",
        "module": "dct",
        "line_content": "for idx in range(len(blocks)):",
        "line_number": 70,
        "context_before": [
            "def encode(blocks, data):",
            "data = ord(data)"
        ],
        "context_after": [
            "bit_val = (data >> idx) & 1",
            "max_val = max(blocks[idx][LOC_MAX], blocks[idx][LOC_MIN])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 87,
        "column": 4,
        "message_id": "C0200",
        "message_type": "convention",
        "symbol": "consider-using-enumerate",
        "message": "Consider using enumerate instead of iterating with range and len",
        "module": "dct",
        "line_content": "for idx in range(len(blocks)):",
        "line_number": 87,
        "context_before": [
            "def decode(blocks):",
            "val = 0"
        ],
        "context_after": [
            "if blocks[idx][LOC_MAX] > blocks[idx][LOC_MIN]:",
            "val |= 1 << idx"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 93,
        "column": 0,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (16/15)",
        "module": "dct",
        "line_content": "def extract(path):",
        "line_number": 93,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "img = cv2.imread(path, cv2.IMREAD_ANYCOLOR)",
            "row, col = img.shape[:2]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 105,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'res' from outer scope (line 126)",
        "module": "dct",
        "line_content": "res = ''",
        "line_number": 105,
        "context_before": [
            "quantized = cv2.dct(y[r_idx: r_idx+8, c_idx: c_idx+8]) / TABLE",
            "blocks.append(quantized)"
        ],
        "context_after": [
            "idx = 0",
            "# Extract the length of the message"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 98,
        "column": 7,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'u'",
        "module": "dct",
        "line_content": "y, u, v = cv2.split(img)",
        "line_number": 98,
        "context_before": [
            "max_bytes = (row // 8) * (col // 8) // 8",
            "img = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)"
        ],
        "context_after": [
            "y = y.astype(np.float32)",
            "blocks = []"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 98,
        "column": 10,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'v'",
        "module": "dct",
        "line_content": "y, u, v = cv2.split(img)",
        "line_number": 98,
        "context_before": [
            "max_bytes = (row // 8) * (col // 8) // 8",
            "img = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)"
        ],
        "context_after": [
            "y = y.astype(np.float32)",
            "blocks = []"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 124,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"data\" doesn't conform to UPPER_CASE naming style",
        "module": "dct",
        "line_content": "data = 'A collection of simple python mini projects to enhance your Python skills.'",
        "line_number": 124,
        "context_before": [
            "",
            "if __name__ == '__main__':"
        ],
        "context_after": [
            "res_path = insert('./example.png', data)",
            "res = extract(res_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/dct.py",
        "line": 8,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os.path\" should be placed before third party import \"numpy\"",
        "module": "dct",
        "line_content": "import os.path as osp",
        "line_number": 8,
        "context_before": [
            "",
            "import numpy as np"
        ],
        "context_after": [
            "import cv2",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "lsb",
        "line_content": "import cv2",
        "line_number": 7,
        "context_before": [
            "# LSB algorithm has a great capacity but fragile.",
            ""
        ],
        "context_after": [
            "import math",
            "import os.path as osp"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 10,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "lsb",
        "line_content": "import numpy as np",
        "line_number": 10,
        "context_before": [
            "import math",
            "import os.path as osp"
        ],
        "context_after": [
            "",
            "# Insert data in the low bit."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 31,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'data' from outer scope (line 81)",
        "module": "lsb",
        "line_content": "data = np.reshape(img, -1)",
        "line_number": 31,
        "context_before": [
            "assert max_bytes >= len(",
            "txt), \"Message overflow the capacity:{}\".format(max_bytes)"
        ],
        "context_after": [
            "for (idx, val) in enumerate(txt):",
            "encode(data[idx*BYTES_PER_BYTE: (idx+1) * BYTES_PER_BYTE], val)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 28,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "lsb",
        "line_content": "txt = '{}{}{}'.format(len(txt), FLAG, txt)",
        "line_number": 28,
        "context_before": [
            "max_bytes = ori_shape[0] * ori_shape[1] // BYTES_PER_BYTE",
            "# Encode message with length"
        ],
        "context_after": [
            "assert max_bytes >= len(",
            "txt), \"Message overflow the capacity:{}\".format(max_bytes)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 30,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "lsb",
        "line_content": "txt), \"Message overflow the capacity:{}\".format(max_bytes)",
        "line_number": 30,
        "context_before": [
            "txt = '{}{}{}'.format(len(txt), FLAG, txt)",
            "assert max_bytes >= len("
        ],
        "context_after": [
            "data = np.reshape(img, -1)",
            "for (idx, val) in enumerate(txt):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 45,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'data' from outer scope (line 81)",
        "module": "lsb",
        "line_content": "data = np.reshape(img, -1)",
        "line_number": 45,
        "context_before": [
            "def extract(path):",
            "img = cv2.imread(path, cv2.IMREAD_ANYCOLOR)"
        ],
        "context_after": [
            "total = data.shape[0]",
            "res = ''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 47,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'res' from outer scope (line 84)",
        "module": "lsb",
        "line_content": "res = ''",
        "line_number": 47,
        "context_before": [
            "data = np.reshape(img, -1)",
            "total = data.shape[0]"
        ],
        "context_after": [
            "idx = 0",
            "# Decode message length"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 66,
        "column": 18,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'data' from outer scope (line 81)",
        "module": "lsb",
        "line_content": "def encode(block, data):",
        "line_number": 66,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "data = ord(data)",
            "for idx in range(len(block)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 68,
        "column": 4,
        "message_id": "C0200",
        "message_type": "convention",
        "symbol": "consider-using-enumerate",
        "message": "Consider using enumerate instead of iterating with range and len",
        "module": "lsb",
        "line_content": "for idx in range(len(block)):",
        "line_number": 68,
        "context_before": [
            "def encode(block, data):",
            "data = ord(data)"
        ],
        "context_after": [
            "block[idx] &= HIGH_BITS",
            "block[idx] |= (data >> (BITS * idx)) & LOW_BITS"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 75,
        "column": 4,
        "message_id": "C0200",
        "message_type": "convention",
        "symbol": "consider-using-enumerate",
        "message": "Consider using enumerate instead of iterating with range and len",
        "module": "lsb",
        "line_content": "for idx in range(len(block)):",
        "line_number": 75,
        "context_before": [
            "def decode(block):",
            "val = 0"
        ],
        "context_after": [
            "val |= (block[idx] & LOW_BITS) << (idx * BITS)",
            "return chr(val)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 81,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"data\" doesn't conform to UPPER_CASE naming style",
        "module": "lsb",
        "line_content": "data = 'A collection of simple python mini projects to enhance your Python skills.'",
        "line_number": 81,
        "context_before": [
            "",
            "if __name__ == '__main__':"
        ],
        "context_after": [
            "input_path = \"./example.png\"",
            "res_path = insert(input_path, data)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 82,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"input_path\" doesn't conform to UPPER_CASE naming style",
        "module": "lsb",
        "line_content": "input_path = \"./example.png\"",
        "line_number": 82,
        "context_before": [
            "if __name__ == '__main__':",
            "data = 'A collection of simple python mini projects to enhance your Python skills.'"
        ],
        "context_after": [
            "res_path = insert(input_path, data)",
            "res = extract(res_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 8,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"math\" should be placed before third party import \"cv2\"",
        "module": "lsb",
        "line_content": "import math",
        "line_number": 8,
        "context_before": [
            "",
            "import cv2"
        ],
        "context_after": [
            "import os.path as osp",
            "import numpy as np"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/steganography/lsb.py",
        "line": 9,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os.path\" should be placed before third party import \"cv2\"",
        "module": "lsb",
        "line_content": "import os.path as osp",
        "line_number": 9,
        "context_before": [
            "import cv2",
            "import math"
        ],
        "context_after": [
            "import numpy as np",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 1,
        "column": 85,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "# Python program to find current weather details of any city using openweathermap api",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 2,
        "column": 15,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "# Python program to find current weather details of any city using openweathermap api"
        ],
        "context_after": [
            "",
            "# Enter your API key here"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 3,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "",
        "line_number": 3,
        "context_before": [
            "# Python program to find current weather details of any city using openweathermap api",
            "import requests"
        ],
        "context_after": [
            "# Enter your API key here",
            "api_key = \"Your_API_Key\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 4,
        "column": 25,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "# Enter your API key here",
        "line_number": 4,
        "context_before": [
            "import requests",
            ""
        ],
        "context_after": [
            "api_key = \"Your_API_Key\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 6,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "",
        "line_number": 6,
        "context_before": [
            "# Enter your API key here",
            "api_key = \"Your_API_Key\""
        ],
        "context_after": [
            "# base_url variable to store url",
            "base_url = \"http://api.openweathermap.org/data/2.5/weather?\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 7,
        "column": 32,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "# base_url variable to store url",
        "line_number": 7,
        "context_before": [
            "api_key = \"Your_API_Key\"",
            ""
        ],
        "context_after": [
            "base_url = \"http://api.openweathermap.org/data/2.5/weather?\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 9,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "",
        "line_number": 9,
        "context_before": [
            "# base_url variable to store url",
            "base_url = \"http://api.openweathermap.org/data/2.5/weather?\""
        ],
        "context_after": [
            "# Give city name",
            "city_name = input(\"Enter city name : \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 10,
        "column": 16,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "# Give city name",
        "line_number": 10,
        "context_before": [
            "base_url = \"http://api.openweathermap.org/data/2.5/weather?\"",
            ""
        ],
        "context_after": [
            "city_name = input(\"Enter city name : \")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 11,
        "column": 39,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "city_name = input(\"Enter city name : \")",
        "line_number": 11,
        "context_before": [
            "",
            "# Give city name"
        ],
        "context_after": [
            "",
            "complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 12,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "",
        "line_number": 12,
        "context_before": [
            "# Give city name",
            "city_name = input(\"Enter city name : \")"
        ],
        "context_after": [
            "complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name",
            "response = requests.get(complete_url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 13,
        "column": 64,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name",
        "line_number": 13,
        "context_before": [
            "city_name = input(\"Enter city name : \")",
            ""
        ],
        "context_after": [
            "response = requests.get(complete_url)",
            "x = response.json()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 14,
        "column": 37,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "response = requests.get(complete_url)",
        "line_number": 14,
        "context_before": [
            "",
            "complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name"
        ],
        "context_after": [
            "x = response.json()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 15,
        "column": 19,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "x = response.json()",
        "line_number": 15,
        "context_before": [
            "complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name",
            "response = requests.get(complete_url)"
        ],
        "context_after": [
            "",
            "if x[\"cod\"] != \"404\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 17,
        "column": 21,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "if x[\"cod\"] != \"404\":",
        "line_number": 17,
        "context_before": [
            "x = response.json()",
            ""
        ],
        "context_after": [
            "",
            "y = x[\"main\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 18,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "",
        "line_number": 18,
        "context_before": [
            "",
            "if x[\"cod\"] != \"404\":"
        ],
        "context_after": [
            "y = x[\"main\"]",
            "current_temperature = y[\"temp\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 19,
        "column": 17,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "y = x[\"main\"]",
        "line_number": 19,
        "context_before": [
            "if x[\"cod\"] != \"404\":",
            ""
        ],
        "context_after": [
            "current_temperature = y[\"temp\"]",
            "current_pressure = y[\"pressure\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 20,
        "column": 35,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "current_temperature = y[\"temp\"]",
        "line_number": 20,
        "context_before": [
            "",
            "y = x[\"main\"]"
        ],
        "context_after": [
            "current_pressure = y[\"pressure\"]",
            "current_humidiy = y[\"humidity\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 21,
        "column": 36,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "current_pressure = y[\"pressure\"]",
        "line_number": 21,
        "context_before": [
            "y = x[\"main\"]",
            "current_temperature = y[\"temp\"]"
        ],
        "context_after": [
            "current_humidiy = y[\"humidity\"]",
            "z = x[\"weather\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 23,
        "column": 20,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "z = x[\"weather\"]",
        "line_number": 23,
        "context_before": [
            "current_pressure = y[\"pressure\"]",
            "current_humidiy = y[\"humidity\"]"
        ],
        "context_after": [
            "weather_description = z[0][\"description\"]",
            "print(\" Temperature (in kelvin unit) = \" +"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 24,
        "column": 45,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "weather_description = z[0][\"description\"]",
        "line_number": 24,
        "context_before": [
            "current_humidiy = y[\"humidity\"]",
            "z = x[\"weather\"]"
        ],
        "context_after": [
            "print(\" Temperature (in kelvin unit) = \" +",
            "str(current_temperature) +"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 26,
        "column": 46,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "str(current_temperature) +",
        "line_number": 26,
        "context_before": [
            "weather_description = z[0][\"description\"]",
            "print(\" Temperature (in kelvin unit) = \" +"
        ],
        "context_after": [
            "\"\\n atmospheric pressure (in hPa unit) = \" +",
            "str(current_pressure) +"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 32,
        "column": 45,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "str(weather_description))",
        "line_number": 32,
        "context_before": [
            "str(current_humidiy) +",
            "\"\\n description = \" +"
        ],
        "context_after": [
            "",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 33,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "",
        "line_number": 33,
        "context_before": [
            "\"\\n description = \" +",
            "str(weather_description))"
        ],
        "context_after": [
            "else:",
            "print(\" City Not Found \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 34,
        "column": 5,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_current_weather",
        "line_content": "else:",
        "line_number": 34,
        "context_before": [
            "str(weather_description))",
            ""
        ],
        "context_after": [
            "print(\" City Not Found \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 35,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "fetch_current_weather",
        "line_content": "print(\" City Not Found \")",
        "line_number": 35,
        "context_before": [
            "",
            "else:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "fetch_current_weather",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "# Python program to find current weather details of any city using openweathermap api"
        ],
        "context_after": [
            "",
            "# Enter your API key here"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 5,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"api_key\" doesn't conform to UPPER_CASE naming style",
        "module": "fetch_current_weather",
        "line_content": "api_key = \"Your_API_Key\"",
        "line_number": 5,
        "context_before": [
            "",
            "# Enter your API key here"
        ],
        "context_after": [
            "",
            "# base_url variable to store url"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_current_weather/fetch_current_weather.py",
        "line": 8,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"base_url\" doesn't conform to UPPER_CASE naming style",
        "module": "fetch_current_weather",
        "line_content": "base_url = \"http://api.openweathermap.org/data/2.5/weather?\"",
        "line_number": 8,
        "context_before": [
            "",
            "# base_url variable to store url"
        ],
        "context_after": [
            "",
            "# Give city name"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 3,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (108/100)",
        "module": "cc",
        "line_content": "It uses the api at fixer.io and then calculates the value of the currency in terms of the other as of today.",
        "line_number": 3,
        "context_before": [
            "\"\"\"",
            "THis program is capable of converting from one currency to another as of today itself."
        ],
        "context_after": [
            "\"\"\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 9,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (126/100)",
        "module": "cc",
        "line_content": "# Imp read: https://stackoverflow.com/questions/3139879/how-do-i-get-currency-exchange-rates-via-an-api-such-as-google-finance",
        "line_number": 9,
        "context_before": [
            "# https://medium.com/@cereblanco/setup-black-and-isort-in-vscode-514804590bf9",
            "# Source: https://fixer.io/quickstart"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 12,
        "column": 15,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "cc",
        "line_content": "import requests",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "import json",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 17,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (128/100)",
        "module": "cc",
        "line_content": "# The below 4 lines bring out the value of currency from the api at fixer.io.  I had to register there, the key is unique to me.",
        "line_number": 17,
        "context_before": [
            "from pprint import pprint",
            ""
        ],
        "context_after": [
            "url = \"http://data.fixer.io/api/latest?access_key=33ec7c73f8a4eb6b9b5b5f95118b2275\"",
            "data = requests.get(url).text"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 28,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "cc",
        "line_content": "\"ANG : Dutch Guilder,Netherlands Antilles Guilder,Bonaire,Cura&#231;ao,Saba,Sint Eustatius,Sint Maarten\",",
        "line_number": 28,
        "context_before": [
            "\"ALL : Albanian Lek,Albania Lek\",",
            "\"AMD : Armenian Dram,Armenia Dram\","
        ],
        "context_after": [
            "\"AOA : Angolan Kwanza,Angola Kwanza\",",
            "\"ARS : Argentine Peso,Argentina Peso,Islas Malvinas\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 31,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (225/100)",
        "module": "cc",
        "line_content": "\"AUD : Australian Dollar,Australia Dollar,Christmas Island,Cocos (Keeling) Islands,Norfolk Island,Ashmore and Cartier Islands,Australian Antarctic Territory,Coral Sea Islands,Heard Island,McDonald Islands,Kiribati,Nauru\",",
        "line_number": 31,
        "context_before": [
            "\"AOA : Angolan Kwanza,Angola Kwanza\",",
            "\"ARS : Argentine Peso,Argentina Peso,Islas Malvinas\","
        ],
        "context_after": [
            "\"AWG : Aruban or Dutch Guilder,Aruba Guilder\",",
            "\"AZN : Azerbaijan Manat,Azerbaijan Manat\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 53,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (106/100)",
        "module": "cc",
        "line_content": "\"CHF : Swiss Franc,Switzerland Franc,Liechtenstein,Campione d&#039;Italia,B&#252;singen am Hochrhein\",",
        "line_number": 53,
        "context_before": [
            "\"CAD : Canadian Dollar,Canada Dollar\",",
            "\"CDF : Congolese Franc,Congo/Kinshasa Franc\","
        ],
        "context_after": [
            "\"CLF : Chilean Unit of Account\",",
            "\"CLP : Chilean Peso,Chile Peso\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 70,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (333/100)",
        "module": "cc",
        "line_content": "\"EUR : Euro,Euro Member Countries,Andorra,Austria,Azores,Baleares (Balearic Islands),Belgium,Canary Islands,Cyprus,Finland,France,French Guiana,French Southern Territories,Germany,Greece,Guadeloupe,Holland (Netherlands),Holy See (Vatican City),Ireland (Eire),Italy,Luxembourg,Madeira Islands,Malta,Monaco,Montenegro,Netherlands\",",
        "line_number": 70,
        "context_before": [
            "\"ERN : Eritrean Nakfa,Eritrea Nakfa\",",
            "\"ETB : Ethiopian Birr,Ethiopia Birr,Eritrea\","
        ],
        "context_after": [
            "\"FJD : Fijian Dollar,Fiji Dollar\",",
            "\"FKP : Falkland Island Pound,Falkland Islands (Malvinas) Pound\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 73,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (251/100)",
        "module": "cc",
        "line_content": "\"GBP : British Pound,United Kingdom Pound,United Kingdom (UK),England,Northern Ireland,Scotland,Wales,Falkland Islands,Gibraltar,Guernsey,Isle of Man,Jersey,Saint Helena and Ascension,South Georgia and the South Sandwich Islands,Tristan da Cunha\",",
        "line_number": 73,
        "context_before": [
            "\"FJD : Fijian Dollar,Fiji Dollar\",",
            "\"FKP : Falkland Island Pound,Falkland Islands (Malvinas) Pound\","
        ],
        "context_after": [
            "\"GEL : Georgian Lari,Georgia Lari\",",
            "\"GGP : Guernsey Pound,Guernsey Pound\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 132,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "cc",
        "line_content": "\"NOK : Norwegian Krone,Norway Krone,Bouvet Island,Svalbard,Jan Mayen,Queen Maud Land,Peter I Island\",",
        "line_number": 132,
        "context_before": [
            "\"NGN : Nigerian Naira,Nigeria Naira\",",
            "\"NIO : Nicaraguan Cordoba,Nicaragua Cordoba\","
        ],
        "context_after": [
            "\"NPR : Nepalese Rupee,Nepal Rupee,India (unofficially near India-Nepal border)\",",
            "\"NZD : New Zealand Dollar,New Zealand Dollar,Cook Islands,Niue,Pitcairn Islands,Tokelau\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 173,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (321/100)",
        "module": "cc",
        "line_content": "\"USD : US Dollar,United States Dollar,America,American Samoa,American Virgin Islands,British Indian Ocean Territory,British Virgin Islands,Ecuador,El Salvador,Guam,Haiti,Micronesia,Northern Mariana Islands,Palau,Panama,Puerto Rico,Turks and Caicos Islands,United States Minor Outlying Islands,Wake Island,East Timor\",",
        "line_number": 173,
        "context_before": [
            "\"UAH : Ukrainian Hryvnia,Ukraine Hryvnia\",",
            "\"UGX : Ugandan Shilling,Uganda Shilling\","
        ],
        "context_after": [
            "\"UYU : Uruguayan Peso,Uruguay Peso\",",
            "\"UZS : Uzbekistani Som,Uzbekistan Som\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 180,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (188/100)",
        "module": "cc",
        "line_content": "\"XAF : Central African CFA Franc BEAC,Communaut&#233; Financi&#232;re Africaine (BEAC) CFA Franc BEAC,Cameroon,Central African Republic,Chad,Congo/Brazzaville,Equatorial Guinea,Gabon\",",
        "line_number": 180,
        "context_before": [
            "\"VUV : Ni-Vanuatu Vatu,Vanuatu Vatu\",",
            "\"WST : Samoan Tala,Samoa Tala\","
        ],
        "context_after": [
            "\"XAG : Silver Ounce,Silver\",",
            "\"XAU : Gold Ounce,Gold\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 183,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (146/100)",
        "module": "cc",
        "line_content": "\"XCD : East Caribbean Dollar,East Caribbean Dollar,Anguilla,Antigua and Barbuda,Dominica,Grenada,The Grenadines and Saint Vincent,Montserrat\",",
        "line_number": 183,
        "context_before": [
            "\"XAG : Silver Ounce,Silver\",",
            "\"XAU : Gold Ounce,Gold\","
        ],
        "context_after": [
            "\"XDR : IMF Special Drawing Rights,International Monetary Fund (IMF) Special Drawing Rights\",",
            "\"XOF : CFA Franc,Communaut&#233; Financi&#232;re Africaine (BCEAO) Franc,Benin,Burkina Faso,Ivory Coast,Guinea-Bissau,Mali,Niger,Senegal,Togo\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 185,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (147/100)",
        "module": "cc",
        "line_content": "\"XOF : CFA Franc,Communaut&#233; Financi&#232;re Africaine (BCEAO) Franc,Benin,Burkina Faso,Ivory Coast,Guinea-Bissau,Mali,Niger,Senegal,Togo\",",
        "line_number": 185,
        "context_before": [
            "\"XCD : East Caribbean Dollar,East Caribbean Dollar,Anguilla,Antigua and Barbuda,Dominica,Grenada,The Grenadines and Saint Vincent,Montserrat\",",
            "\"XDR : IMF Special Drawing Rights,International Monetary Fund (IMF) Special Drawing Rights\","
        ],
        "context_after": [
            "\"XPF : CFP Franc,Comptoirs Fran&#231;ais du Pacifique (CFP) Franc,French Polynesia,New Caledonia,Wallis and Futuna Islands\",",
            "\"YER : Yemeni Rial,Yemen Rial\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 186,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (128/100)",
        "module": "cc",
        "line_content": "\"XPF : CFP Franc,Comptoirs Fran&#231;ais du Pacifique (CFP) Franc,French Polynesia,New Caledonia,Wallis and Futuna Islands\",",
        "line_number": 186,
        "context_before": [
            "\"XDR : IMF Special Drawing Rights,International Monetary Fund (IMF) Special Drawing Rights\",",
            "\"XOF : CFA Franc,Communaut&#233; Financi&#232;re Africaine (BCEAO) Franc,Benin,Burkina Faso,Ivory Coast,Guinea-Bissau,Mali,Niger,Senegal,Togo\","
        ],
        "context_after": [
            "\"YER : Yemeni Rial,Yemen Rial\",",
            "\"ZAR : South African Rand,South Africa Rand,Lesotho,Namibia\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 198,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (182/100)",
        "module": "cc",
        "line_content": "\"Please specify the amount of currency to convert, from currency, to currency (with space in between).\\nPress SHOW to see list of currencies available. \\nPress Q to quit. \\n\"",
        "line_number": 198,
        "context_before": [
            "def function1():",
            "query = input("
        ],
        "context_after": [
            ")",
            "if query == \"Q\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 218,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "cc",
        "line_content": "function1()",
        "line_number": 218,
        "context_before": [
            "except KeyError:",
            "print(\"You seem to have inputted wrongly, retry!\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 12,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "cc",
        "line_content": "import requests",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "import json",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 18,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"url\" doesn't conform to UPPER_CASE naming style",
        "module": "cc",
        "line_content": "url = \"http://data.fixer.io/api/latest?access_key=33ec7c73f8a4eb6b9b5b5f95118b2275\"",
        "line_number": 18,
        "context_before": [
            "",
            "# The below 4 lines bring out the value of currency from the api at fixer.io.  I had to register there, the key is unique to me."
        ],
        "context_after": [
            "data = requests.get(url).text",
            "data2 = json.loads(data) #brings whether request was successful,timestamp etc"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 206,
        "column": 13,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"fromC\" doesn't conform to snake_case naming style",
        "module": "cc",
        "line_content": "qty, fromC, toC = query.split(\" \")",
        "line_number": 206,
        "context_before": [
            "function1()",
            "else:"
        ],
        "context_after": [
            "fromC = fromC.upper()",
            "toC = toC.upper()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 206,
        "column": 20,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"toC\" doesn't conform to snake_case naming style",
        "module": "cc",
        "line_content": "qty, fromC, toC = query.split(\" \")",
        "line_number": 206,
        "context_before": [
            "function1()",
            "else:"
        ],
        "context_after": [
            "fromC = fromC.upper()",
            "toC = toC.upper()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 207,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"fromC\" doesn't conform to snake_case naming style",
        "module": "cc",
        "line_content": "fromC = fromC.upper()",
        "line_number": 207,
        "context_before": [
            "else:",
            "qty, fromC, toC = query.split(\" \")"
        ],
        "context_after": [
            "toC = toC.upper()",
            "qty = float(round(int(qty), 2))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 208,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"toC\" doesn't conform to snake_case naming style",
        "module": "cc",
        "line_content": "toC = toC.upper()",
        "line_number": 208,
        "context_before": [
            "qty, fromC, toC = query.split(\" \")",
            "fromC = fromC.upper()"
        ],
        "context_after": [
            "qty = float(round(int(qty), 2))",
            "amount = round(qty * fx[toC] / fx[fromC], 2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 13,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"json\" should be placed before third party import \"requests\"",
        "module": "cc",
        "line_content": "import json",
        "line_number": 13,
        "context_before": [
            "",
            "import requests"
        ],
        "context_after": [
            "import sys",
            "from pprint import pprint"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 14,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party import \"requests\"",
        "module": "cc",
        "line_content": "import sys",
        "line_number": 14,
        "context_before": [
            "import requests",
            "import json"
        ],
        "context_after": [
            "from pprint import pprint",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Currency_converter/cc.py",
        "line": 15,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"pprint.pprint\" should be placed before third party import \"requests\"",
        "module": "cc",
        "line_content": "from pprint import pprint",
        "line_number": 15,
        "context_before": [
            "import json",
            "import sys"
        ],
        "context_after": [
            "",
            "# The below 4 lines bring out the value of currency from the api at fixer.io.  I had to register there, the key is unique to me."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Countdown_timer/main.py",
        "line": 15,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "main",
        "line_content": "countdown(int(t))",
        "line_number": 15,
        "context_before": [
            "t = input('Enter the time in seconds: ')",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Countdown_timer/main.py",
        "line": 3,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 't' from outer scope (line 13)",
        "module": "main",
        "line_content": "def countdown(t):",
        "line_number": 3,
        "context_before": [
            "import time",
            ""
        ],
        "context_after": [
            "while t:",
            "mins, secs = divmod(t, 60)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Countdown_timer/main.py",
        "line": 6,
        "column": 16,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "timer = '{:02d}:{:02d}'.format(mins,secs)",
        "line_number": 6,
        "context_before": [
            "while t:",
            "mins, secs = divmod(t, 60)"
        ],
        "context_after": [
            "print(timer, end=\"\\r\")",
            "time.sleep(1)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Encrypt_and_decrypt_text/aes_encode.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'Crypto.Cipher'",
        "module": "aes_encode",
        "line_content": "from Crypto.Cipher import AES",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from Crypto import Random",
            "from binascii import b2a_hex"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Encrypt_and_decrypt_text/aes_encode.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'Crypto'",
        "module": "aes_encode",
        "line_content": "from Crypto import Random",
        "line_number": 2,
        "context_before": [
            "from Crypto.Cipher import AES"
        ],
        "context_after": [
            "from binascii import b2a_hex",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Encrypt_and_decrypt_text/aes_encode.py",
        "line": 10,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"key\" doesn't conform to UPPER_CASE naming style",
        "module": "aes_encode",
        "line_content": "key = b'this is a 16 key'",
        "line_number": 10,
        "context_before": [
            "",
            "# The key length must be 16 (AES-128), 24 (AES-192), or 32 (AES-256) Bytes."
        ],
        "context_after": [
            "",
            "# Generate a non-repeatable key vector with a length"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Encrypt_and_decrypt_text/aes_encode.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"binascii.b2a_hex\" should be placed before third party imports \"Crypto.Cipher.AES\", \"Crypto.Random\"",
        "module": "aes_encode",
        "line_content": "from binascii import b2a_hex",
        "line_number": 3,
        "context_before": [
            "from Crypto.Cipher import AES",
            "from Crypto import Random"
        ],
        "context_after": [
            "import sys",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Encrypt_and_decrypt_text/aes_encode.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party imports \"Crypto.Cipher.AES\", \"Crypto.Random\"",
        "module": "aes_encode",
        "line_content": "import sys",
        "line_number": 4,
        "context_before": [
            "from Crypto import Random",
            "from binascii import b2a_hex"
        ],
        "context_after": [
            "",
            "# get the plaintext"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Encrypt_and_decrypt_text/aes_encode.py",
        "line": 31,
        "column": 11,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "aes_encode",
        "line_content": "file_out = open(\"encrypted.bin\", \"wb\")",
        "line_number": 31,
        "context_before": [
            "",
            "# output"
        ],
        "context_after": [
            "file_out.write(ciphertext[16:])",
            "file_out.close()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe/tic_tac_toe.py",
        "line": 2,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"players\" doesn't conform to UPPER_CASE naming style",
        "module": "tic_tac_toe",
        "line_content": "players = 'XO'",
        "line_number": 2,
        "context_before": [
            "squares = [' ']*9"
        ],
        "context_after": [
            "board = '''",
            "0   1   2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe/tic_tac_toe.py",
        "line": 3,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"board\" doesn't conform to UPPER_CASE naming style",
        "module": "tic_tac_toe",
        "line_content": "board = '''",
        "line_number": 3,
        "context_before": [
            "squares = [' ']*9",
            "players = 'XO'"
        ],
        "context_after": [
            "0   1   2",
            "{0} | {1} | {2}"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Tic_tac_toe/tic_tac_toe.py",
        "line": 18,
        "column": 0,
        "message_id": "R1710",
        "message_type": "refactor",
        "symbol": "inconsistent-return-statements",
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "module": "tic_tac_toe",
        "line_content": "def check_win(player):",
        "line_number": 18,
        "context_before": [
            "]",
            ""
        ],
        "context_after": [
            "for a, b, c in win_conditions:",
            "if {squares[a], squares[b], squares[c]} == {player}:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 60,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "main",
        "line_content": "",
        "line_number": 60,
        "context_before": [
            "pp_download(sys.argv[-1])",
            "pprint.pprint(output)"
        ],
        "context_after": [
            "else:",
            "print('Invalid paramaters Valid Command \\n\\tUsage : python main.py username')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "main",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from lxml import html",
            "import re"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'lxml'",
        "module": "main",
        "line_content": "from lxml import html",
        "line_number": 2,
        "context_before": [
            "import requests"
        ],
        "context_after": [
            "import re",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 16,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "main",
        "line_content": "'''main function accept instagram username",
        "line_number": 16,
        "context_before": [
            "def main(username):",
            "banner()"
        ],
        "context_after": [
            "return an dictionary object containging profile deatils",
            "'''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 20,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "url = \"https://www.instagram.com/{}/?hl=en\".format(username)",
        "line_number": 20,
        "context_before": [
            "'''",
            ""
        ],
        "context_after": [
            "page = requests.get(url)",
            "tree = html.fromstring(page.content)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"re\" should be placed before third party imports \"requests\", \"lxml.html\"",
        "module": "main",
        "line_content": "import re",
        "line_number": 3,
        "context_before": [
            "import requests",
            "from lxml import html"
        ],
        "context_after": [
            "import sys",
            "import pprint"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party imports \"requests\", \"lxml.html\"",
        "module": "main",
        "line_content": "import sys",
        "line_number": 4,
        "context_before": [
            "from lxml import html",
            "import re"
        ],
        "context_after": [
            "import pprint",
            "from profilepic import pp_download"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/main.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"pprint\" should be placed before third party imports \"requests\", \"lxml.html\"",
        "module": "main",
        "line_content": "import pprint",
        "line_number": 5,
        "context_before": [
            "import re",
            "import sys"
        ],
        "context_after": [
            "from profilepic import pp_download",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 4,
        "column": 21,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "profilepic",
        "line_content": "from PIL import Image",
        "line_number": 4,
        "context_before": [
            "import requests",
            "import re"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 9,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "profilepic",
        "line_content": "",
        "line_number": 9,
        "context_before": [
            "#Function to download profile picture of instagram accounts",
            "def pp_download(username):"
        ],
        "context_after": [
            "url = \"https://www.instagram.com/{}/\".format(username)",
            "x = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com', url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 14,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "profilepic",
        "line_content": "check_url1 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\?hl=[a-z-]{2,5}', url)",
        "line_number": 14,
        "context_before": [
            "",
            "if x:"
        ],
        "context_after": [
            "check_url2 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)",
            "check_url3 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 15,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (129/100)",
        "module": "profilepic",
        "line_content": "check_url2 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)",
        "line_number": 15,
        "context_before": [
            "if x:",
            "check_url1 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\?hl=[a-z-]{2,5}', url)"
        ],
        "context_after": [
            "check_url3 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)",
            "check_url4 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 16,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (102/100)",
        "module": "profilepic",
        "line_content": "check_url3 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)",
        "line_number": 16,
        "context_before": [
            "check_url1 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/].*\\?hl=[a-z-]{2,5}', url)",
            "check_url2 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)"
        ],
        "context_after": [
            "check_url4 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 17,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "profilepic",
        "line_content": "check_url4 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}[/]$', url)",
        "line_number": 17,
        "context_before": [
            "check_url2 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com$|^(https:)[/][/]www.([^/]+[.])*instagram.com/$', url)",
            "check_url3 = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com[/][a-zA-Z0-9_]{1,}$', url)"
        ],
        "context_after": [
            "",
            "if check_url3:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 32,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "profilepic",
        "line_content": "",
        "line_number": 32,
        "context_before": [
            "alpha = check_url1.group()",
            "final_url = re.sub('\\\\?hl=[a-z-]{2,5}', '?__a=1', alpha)"
        ],
        "context_after": [
            "try:",
            "if check_url3 or check_url4 or check_url2 or check_url1:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 46,
        "column": 33,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "profilepic",
        "line_content": "block_size = 1024",
        "line_number": 46,
        "context_before": [
            "file_size_request = requests.get(pp_final, stream=True)",
            "file_size = int(file_size_request.headers['Content-Length'])"
        ],
        "context_after": [
            "t=tqdm(total=file_size, unit='B', unit_scale=True, desc=username, ascii=True)",
            "with open(username + '.jpg', 'wb') as f:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 53,
        "column": 27,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "profilepic",
        "line_content": "#Show image",
        "line_number": 53,
        "context_before": [
            "f.write(data)",
            "t.close()"
        ],
        "context_after": [
            "im = Image.open(username +\".jpg\")",
            "im.show()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 54,
        "column": 49,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "profilepic",
        "line_content": "im = Image.open(username +\".jpg\")",
        "line_number": 54,
        "context_before": [
            "t.close()",
            "#Show image"
        ],
        "context_after": [
            "im.show()",
            "print(\"Profile picture downloaded successfully\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 55,
        "column": 25,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "profilepic",
        "line_content": "im.show()",
        "line_number": 55,
        "context_before": [
            "#Show image",
            "im = Image.open(username +\".jpg\")"
        ],
        "context_after": [
            "print(\"Profile picture downloaded successfully\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 59,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "profilepic",
        "line_content": "print('error')",
        "line_number": 59,
        "context_before": [
            "",
            "except Exception:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tqdm'",
        "module": "profilepic",
        "line_content": "from tqdm import tqdm",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            "import re"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "profilepic",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "from tqdm import tqdm"
        ],
        "context_after": [
            "import re",
            "from PIL import Image"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "profilepic",
        "line_content": "from PIL import Image",
        "line_number": 4,
        "context_before": [
            "import requests",
            "import re"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 8,
        "column": 0,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (22/15)",
        "module": "profilepic",
        "line_content": "def pp_download(username):",
        "line_number": 8,
        "context_before": [
            "",
            "#Function to download profile picture of instagram accounts"
        ],
        "context_after": [
            "",
            "url = \"https://www.instagram.com/{}/\".format(username)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 10,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "profilepic",
        "line_content": "url = \"https://www.instagram.com/{}/\".format(username)",
        "line_number": 10,
        "context_before": [
            "def pp_download(username):",
            ""
        ],
        "context_after": [
            "x = re.match(r'^(https:)[/][/]www.([^/]+[.])*instagram.com', url)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 27,
        "column": 12,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "profilepic",
        "line_content": "exit()",
        "line_number": 27,
        "context_before": [
            "if check_url2:",
            "final_url = print(\"Please enter an URL related to a profile\")"
        ],
        "context_after": [
            "",
            "if check_url1:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 58,
        "column": 11,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "profilepic",
        "line_content": "except Exception:",
        "line_number": 58,
        "context_before": [
            "print(\"Profile picture downloaded successfully\")",
            ""
        ],
        "context_after": [
            "print('error')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 35,
        "column": 31,
        "message_id": "E0601",
        "message_type": "error",
        "symbol": "used-before-assignment",
        "message": "Using variable 'final_url' before assignment",
        "module": "profilepic",
        "line_content": "req = requests.get(final_url)",
        "line_number": 35,
        "context_before": [
            "try:",
            "if check_url3 or check_url4 or check_url2 or check_url1:"
        ],
        "context_after": [
            "get_status = requests.get(final_url).status_code",
            "get_content = req.content.decode('utf-8')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/profilepic.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"re\" should be placed before third party imports \"tqdm.tqdm\", \"requests\"",
        "module": "profilepic",
        "line_content": "import re",
        "line_number": 3,
        "context_before": [
            "from tqdm import tqdm",
            "import requests"
        ],
        "context_after": [
            "from PIL import Image",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/InstgramProfile.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"InstgramProfile\" doesn't conform to snake_case naming style",
        "module": "InstgramProfile",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from lxml import html",
            "import re"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/InstgramProfile.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "InstgramProfile",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from lxml import html",
            "import re"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/InstgramProfile.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'lxml'",
        "module": "InstgramProfile",
        "line_content": "from lxml import html",
        "line_number": 2,
        "context_before": [
            "import requests"
        ],
        "context_after": [
            "import re",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/InstgramProfile.py",
        "line": 11,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "InstgramProfile",
        "line_content": "url = \"https://www.instagram.com/{}/?hl=en\".format(username)",
        "line_number": 11,
        "context_before": [
            "return an dictionary object containging profile deatils",
            "'''"
        ],
        "context_after": [
            "page = requests.get(url)",
            "tree = html.fromstring(page.content)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/InstgramProfile.py",
        "line": 46,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "InstgramProfile",
        "line_content": "'''driver code'''",
        "line_number": 46,
        "context_before": [
            "#  python InstgramProfile.py username",
            "if __name__ == \"__main__\":"
        ],
        "context_after": [
            "",
            "if len(sys.argv) == 2:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/InstgramProfile.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"re\" should be placed before third party imports \"requests\", \"lxml.html\"",
        "module": "InstgramProfile",
        "line_content": "import re",
        "line_number": 3,
        "context_before": [
            "import requests",
            "from lxml import html"
        ],
        "context_after": [
            "import sys",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Instagram_profile/InstgramProfile.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party imports \"requests\", \"lxml.html\"",
        "module": "InstgramProfile",
        "line_content": "import sys",
        "line_number": 4,
        "context_before": [
            "from lxml import html",
            "import re"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Shutdown_or_restart_your_device/PowerOptions.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"PowerOptions\" doesn't conform to snake_case naming style",
        "module": "PowerOptions",
        "line_content": "import os",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import platform",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_out_hostname_and_ip_address/Hostname_IPaddress.py",
        "line": 13,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "Hostname_IPaddress",
        "line_content": "",
        "line_number": 13,
        "context_before": [
            "",
            "get_hostname_IP()"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Find_out_hostname_and_ip_address/Hostname_IPaddress.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Hostname_IPaddress\" doesn't conform to snake_case naming style",
        "module": "Hostname_IPaddress",
        "line_content": "# importing socket library",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import socket",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_out_hostname_and_ip_address/Hostname_IPaddress.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"get_hostname_IP\" doesn't conform to snake_case naming style",
        "module": "Hostname_IPaddress",
        "line_content": "def get_hostname_IP():",
        "line_number": 4,
        "context_before": [
            "import socket",
            ""
        ],
        "context_after": [
            "hostname = input(\"Please enter website address(URL):\")",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 50,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ball_bounce",
        "line_content": "",
        "line_number": 50,
        "context_before": [
            "if event.type == pygame.QUIT:",
            "running=False"
        ],
        "context_after": [
            "time.sleep(0.02)",
            "screen.blit(background, (0,0))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 56,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "ball_bounce",
        "line_content": "pygame.display.update()",
        "line_number": 56,
        "context_before": [
            "ball_item.render_ball()",
            "ball_item.move_ball()"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 4,
        "column": 0,
        "message_id": "C0410",
        "message_type": "convention",
        "symbol": "multiple-imports",
        "message": "Multiple imports on one line (pygame, time, random)",
        "module": "ball_bounce",
        "line_content": "import pygame,time,random",
        "line_number": 4,
        "context_before": [
            "#It is also accompanied by eleastic collission with walls of the container.",
            "#It is fun to watch."
        ],
        "context_after": [
            "",
            "pygame.init()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pygame'",
        "module": "ball_bounce",
        "line_content": "import pygame,time,random",
        "line_number": 4,
        "context_before": [
            "#It is also accompanied by eleastic collission with walls of the container.",
            "#It is fun to watch."
        ],
        "context_after": [
            "",
            "pygame.init()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 15,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"ball\" doesn't conform to PascalCase naming style",
        "module": "ball_bounce",
        "line_content": "class ball:",
        "line_number": 15,
        "context_before": [
            "pygame.display.set_caption('Ball Bounce Simulation')",
            ""
        ],
        "context_after": [
            "ball_image=pygame.image.load('ball.png')",
            "g=1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 19,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"velocityX\" doesn't conform to snake_case naming style",
        "module": "ball_bounce",
        "line_content": "self.velocityX=4",
        "line_number": 19,
        "context_before": [
            "g=1",
            "def __init__(self):"
        ],
        "context_after": [
            "self.velocityY=4",
            "self.X=random.randint(0,768)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 20,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"velocityY\" doesn't conform to snake_case naming style",
        "module": "ball_bounce",
        "line_content": "self.velocityY=4",
        "line_number": 20,
        "context_before": [
            "def __init__(self):",
            "self.velocityX=4"
        ],
        "context_after": [
            "self.X=random.randint(0,768)",
            "self.Y=random.randint(0,350)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 21,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"X\" doesn't conform to snake_case naming style",
        "module": "ball_bounce",
        "line_content": "self.X=random.randint(0,768)",
        "line_number": 21,
        "context_before": [
            "self.velocityX=4",
            "self.velocityY=4"
        ],
        "context_after": [
            "self.Y=random.randint(0,350)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 22,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"Y\" doesn't conform to snake_case naming style",
        "module": "ball_bounce",
        "line_content": "self.Y=random.randint(0,350)",
        "line_number": 22,
        "context_before": [
            "self.velocityY=4",
            "self.X=random.randint(0,768)"
        ],
        "context_after": [
            "",
            "def render_ball(self):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 45,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"running\" doesn't conform to UPPER_CASE naming style",
        "module": "ball_bounce",
        "line_content": "running=True",
        "line_number": 45,
        "context_before": [
            "",
            "#The main program loop"
        ],
        "context_after": [
            "while running:",
            "for event in pygame.event.get():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 49,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"running\" doesn't conform to UPPER_CASE naming style",
        "module": "ball_bounce",
        "line_content": "running=False",
        "line_number": 49,
        "context_before": [
            "for event in pygame.event.get():",
            "if event.type == pygame.QUIT:"
        ],
        "context_after": [
            "",
            "time.sleep(0.02)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"pygame\"",
        "module": "ball_bounce",
        "line_content": "import pygame,time,random",
        "line_number": 4,
        "context_before": [
            "#It is also accompanied by eleastic collission with walls of the container.",
            "#It is fun to watch."
        ],
        "context_after": [
            "",
            "pygame.init()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Bouncing_ball_simulator/ball_bounce.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"random\" should be placed before third party import \"pygame\"",
        "module": "ball_bounce",
        "line_content": "import pygame,time,random",
        "line_number": 4,
        "context_before": [
            "#It is also accompanied by eleastic collission with walls of the container.",
            "#It is fun to watch."
        ],
        "context_after": [
            "",
            "pygame.init()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Reduce_image_file_size/reduce_image_size.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "reduce_image_size",
        "line_content": "import cv2",
        "line_number": 2,
        "context_before": [
            "# import openCV library for image handling"
        ],
        "context_after": [
            "",
            "# read image to be resized by imread() function of openCV library"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Send_email_from_csv/Sending_mail.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Sending_mail\" doesn't conform to snake_case naming style",
        "module": "Sending_mail",
        "line_content": "import csv",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from email.message import EmailMessage",
            "import smtplib"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Send_email_from_csv/Sending_mail.py",
        "line": 7,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "Sending_mail",
        "line_content": "with open(\"credentials.txt\", \"r\") as f:",
        "line_number": 7,
        "context_before": [
            "",
            "def get_credentials(filepath):"
        ],
        "context_after": [
            "email_address = f.readline()",
            "email_pass = f.readline()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Send_email_from_csv/Sending_mail.py",
        "line": 6,
        "column": 20,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'filepath'",
        "module": "Sending_mail",
        "line_content": "def get_credentials(filepath):",
        "line_number": 6,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "with open(\"credentials.txt\", \"r\") as f:",
            "email_address = f.readline()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Send_email_from_csv/Sending_mail.py",
        "line": 40,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "Sending_mail",
        "line_content": "with open(\"emails.csv\", newline=\"\") as csvfile:",
        "line_number": 40,
        "context_before": [
            "message['Subject'] = subject",
            ""
        ],
        "context_after": [
            "spamreader = csv.reader(csvfile, delimiter=\" \", quotechar=\"|\")",
            "for email in spamreader:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 2,
        "column": 0,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'pow'",
        "module": "sine_wave",
        "line_content": "from math import *",
        "line_number": 2,
        "context_before": [
            "from turtle import *"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 1,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import turtle",
        "module": "sine_wave",
        "line_content": "from turtle import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from math import *",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 2,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import math",
        "module": "sine_wave",
        "line_content": "from math import *",
        "line_number": 2,
        "context_before": [
            "from turtle import *"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 10,
        "column": 0,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'penup'",
        "module": "sine_wave",
        "line_content": "penup()",
        "line_number": 10,
        "context_before": [
            "D = 0       # Vertical Shift",
            ""
        ],
        "context_after": [
            "# As x increases y increases and decreases as it is evaluated.",
            "for x in range(-200, 200):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 15,
        "column": 4,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'goto'",
        "module": "sine_wave",
        "line_content": "goto(x, y)",
        "line_number": 15,
        "context_before": [
            "# Sine Wave Equation",
            "y = A * sin((2 * pi / B) * (x + C)) + D"
        ],
        "context_after": [
            "pendown()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 16,
        "column": 4,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'pendown'",
        "module": "sine_wave",
        "line_content": "pendown()",
        "line_number": 16,
        "context_before": [
            "y = A * sin((2 * pi / B) * (x + C)) + D",
            "goto(x, y)"
        ],
        "context_after": [
            "",
            "hideturtle()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 18,
        "column": 0,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'hideturtle'",
        "module": "sine_wave",
        "line_content": "hideturtle()",
        "line_number": 18,
        "context_before": [
            "pendown()",
            ""
        ],
        "context_after": [
            "mainloop()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 19,
        "column": 0,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'mainloop'",
        "module": "sine_wave",
        "line_content": "mainloop()",
        "line_number": 19,
        "context_before": [
            "",
            "hideturtle()"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 1,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) TK, types, math, time, inspect, sys, config_dict, readconfig, Vec2D, ScrolledCanvas, Canvas, TurtleScreenBase, Terminator, TurtleGraphicsError, Shape, Tbuffer, TurtleScreen, TNavigator, TPen, RawTurtle, RawPen, Screen, Turtle, Pen, write_docstringdict, read_docstrings, getmethparlist, done, switchpen, demo1, demo2, isfile, split, join, deepcopy and simpledialog from wildcard import of turtle",
        "module": "sine_wave",
        "line_content": "from turtle import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from math import *",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Sine_Wave/sine_wave.py",
        "line": 2,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) acos, acosh, asin, asinh, atan, atan2, atanh, cbrt, ceil, comb, copysign, cos, cosh, degrees, dist, e, erf, erfc, exp, exp2, expm1, fabs, factorial, floor, fma, fmod, frexp, fsum, gamma, gcd, hypot, inf, isclose, isfinite, isinf, isnan, isqrt, lcm, ldexp, lgamma, log, log10, log1p, log2, modf, nan, nextafter, perm, pow, prod, radians, remainder, sinh, sqrt, sumprod, tan, tanh, tau, trunc and ulp from wildcard import of math",
        "module": "sine_wave",
        "line_content": "from math import *",
        "line_number": 2,
        "context_before": [
            "from turtle import *"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Digital_clock/digital_clock.py",
        "line": 6,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'frame' from outer scope (line 38)",
        "module": "digital_clock",
        "line_content": "frame = tk.Frame(root, bg=\"white\")",
        "line_number": 6,
        "context_before": [
            "",
            "def light_theme():"
        ],
        "context_after": [
            "frame.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)",
            "lbl_1 = tk.Label(frame, font=('calibri', 40, 'bold'),"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Digital_clock/digital_clock.py",
        "line": 12,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'time' from outer scope (line 44)",
        "module": "digital_clock",
        "line_content": "def time():",
        "line_number": 12,
        "context_before": [
            "lbl_1.pack(anchor=\"s\")",
            ""
        ],
        "context_after": [
            "string = strftime('%I:%M:%S %p')",
            "lbl_1.config(text=string)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Digital_clock/digital_clock.py",
        "line": 20,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'frame' from outer scope (line 38)",
        "module": "digital_clock",
        "line_content": "frame = tk.Frame(root, bg=\"#22478a\")",
        "line_number": 20,
        "context_before": [
            "",
            "def dark_theme():"
        ],
        "context_after": [
            "frame.place(relx=0.1, rely=0.1, relwidth=0.8, relheight=0.8)",
            "lbl_2 = tk.Label(frame, font=('calibri', 40, 'bold'),"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Digital_clock/digital_clock.py",
        "line": 26,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'time' from outer scope (line 44)",
        "module": "digital_clock",
        "line_content": "def time():",
        "line_number": 26,
        "context_before": [
            "lbl_2.pack(anchor=\"s\")",
            ""
        ],
        "context_after": [
            "string = strftime('%I:%M:%S %p')",
            "lbl_2.config(text=string)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Recursive_password_generator/generator.py",
        "line": 4,
        "column": 17,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'maxlength' from outer scope (line 19)",
        "module": "generator",
        "line_content": "def stretch(text,maxlength):",
        "line_number": 4,
        "context_before": [
            "import string",
            ""
        ],
        "context_after": [
            "if len(text) < maxlength:",
            "randomChar = get_random_char()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Recursive_password_generator/generator.py",
        "line": 5,
        "column": 4,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "module": "generator",
        "line_content": "if len(text) < maxlength:",
        "line_number": 5,
        "context_before": [
            "",
            "def stretch(text,maxlength):"
        ],
        "context_after": [
            "randomChar = get_random_char()",
            "return stretch(text+randomChar,maxlength)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Recursive_password_generator/generator.py",
        "line": 6,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"randomChar\" doesn't conform to snake_case naming style",
        "module": "generator",
        "line_content": "randomChar = get_random_char()",
        "line_number": 6,
        "context_before": [
            "def stretch(text,maxlength):",
            "if len(text) < maxlength:"
        ],
        "context_after": [
            "return stretch(text+randomChar,maxlength)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Recursive_password_generator/generator.py",
        "line": 13,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"randomChar\" doesn't conform to snake_case naming style",
        "module": "generator",
        "line_content": "randomChar = chars[random.randint(0,len(chars)-1)]",
        "line_number": 13,
        "context_before": [
            "def get_random_char():",
            "chars = string.printable"
        ],
        "context_after": [
            "return randomChar",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Recursive_password_generator/generator.py",
        "line": 21,
        "column": 4,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "generator",
        "line_content": "except:",
        "line_number": 21,
        "context_before": [
            "maxlength = int(maxlen)",
            "print(\"'\",stretch('',maxlength),\"'\\n\")"
        ],
        "context_after": [
            "if maxlen == 'e':",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Plagarism_checker/plag.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sklearn.feature_extraction.text'",
        "module": "plag",
        "line_content": "from sklearn.feature_extraction.text import TfidfVectorizer",
        "line_number": 4,
        "context_before": [
            "#Make sure all the .txt files that need to be checked are in the same directory as the script",
            "import os"
        ],
        "context_after": [
            "from sklearn.metrics.pairwise import cosine_similarity",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Plagarism_checker/plag.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sklearn.metrics.pairwise'",
        "module": "plag",
        "line_content": "from sklearn.metrics.pairwise import cosine_similarity",
        "line_number": 5,
        "context_before": [
            "import os",
            "from sklearn.feature_extraction.text import TfidfVectorizer"
        ],
        "context_after": [
            "",
            "user_files = [doc for doc in os.listdir() if doc.endswith('.txt')]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Plagarism_checker/plag.py",
        "line": 8,
        "column": 14,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "plag",
        "line_content": "user_notes = [open(_file, encoding='utf-8').read()",
        "line_number": 8,
        "context_before": [
            "",
            "user_files = [doc for doc in os.listdir() if doc.endswith('.txt')]"
        ],
        "context_after": [
            "for _file in user_files]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Plagarism_checker/plag.py",
        "line": 12,
        "column": 14,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"Text\" doesn't conform to snake_case naming style",
        "module": "plag",
        "line_content": "def vectorize(Text): return TfidfVectorizer().fit_transform(Text).toarray()",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def similarity(doc1, doc2): return cosine_similarity([doc1, doc2])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Plagarism_checker/plag.py",
        "line": 12,
        "column": 21,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "plag",
        "line_content": "def vectorize(Text): return TfidfVectorizer().fit_transform(Text).toarray()",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def similarity(doc1, doc2): return cosine_similarity([doc1, doc2])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Plagarism_checker/plag.py",
        "line": 13,
        "column": 28,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "plag",
        "line_content": "def similarity(doc1, doc2): return cosine_similarity([doc1, doc2])",
        "line_number": 13,
        "context_before": [
            "",
            "def vectorize(Text): return TfidfVectorizer().fit_transform(Text).toarray()"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Plagarism_checker/plag.py",
        "line": 22,
        "column": 4,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 's_vectors' but no assignment is done",
        "module": "plag",
        "line_content": "global s_vectors",
        "line_number": 22,
        "context_before": [
            "",
            "def check_plagiarism():"
        ],
        "context_after": [
            "for student_a, text_vector_a in s_vectors:",
            "new_vectors = s_vectors.copy()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Decimal_to_binary_convertor_and_vice_versa/decimal_to_binary.py",
        "line": 2,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "decimal_to_binary",
        "line_content": "menu = int(input(\"Choose an option: \\n 1. Decimal to binary \\n 2. Binary to decimal\\n Option: \"))",
        "line_number": 2,
        "context_before": [
            "try:"
        ],
        "context_after": [
            "if menu < 1 or menu > 2:",
            "raise ValueError"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Decimal_to_binary_convertor_and_vice_versa/decimal_to_binary.py",
        "line": 7,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "decimal_to_binary",
        "line_content": "print(\"Binary: {}\".format(bin(dec)[2:]))",
        "line_number": 7,
        "context_before": [
            "if menu == 1:",
            "dec = int(input(\"Input your decimal number:\\nDecimal: \"))"
        ],
        "context_after": [
            "elif menu == 2:",
            "binary = input(\"Input your binary number:\\n Binary: \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Decimal_to_binary_convertor_and_vice_versa/decimal_to_binary.py",
        "line": 10,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "decimal_to_binary",
        "line_content": "print(\"Decimal: {}\".format(int(binary, 2)))",
        "line_number": 10,
        "context_before": [
            "elif menu == 2:",
            "binary = input(\"Input your binary number:\\n Binary: \")"
        ],
        "context_after": [
            "except ValueError:",
            "print (\"please choose a valid option\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 27,
        "column": 31,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "make_art",
        "line_content": "new_width = int(width / 20)",
        "line_number": 27,
        "context_before": [
            "# adjust these parameters if the output doesn't fit to the screen",
            "height, width = image.shape"
        ],
        "context_after": [
            "new_height = int(height / 40)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "make_art",
        "line_content": "import cv2",
        "line_number": 3,
        "context_before": [
            "#!/usr/bin/env python3",
            ""
        ],
        "context_after": [
            "import numpy as np",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "make_art",
        "line_content": "import numpy as np",
        "line_number": 4,
        "context_before": [
            "",
            "import cv2"
        ],
        "context_after": [
            "",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 21,
        "column": 17,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'image' from outer scope (line 51)",
        "module": "make_art",
        "line_content": "def img_to_ascii(image):",
        "line_number": 21,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "\"\"\"returns the numeric coded image\"\"\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 45,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"image_path\" doesn't conform to UPPER_CASE naming style",
        "module": "make_art",
        "line_content": "image_path = \"sample_image.png\"  # default image path",
        "line_number": 45,
        "context_before": [
            "if len(sys.argv) < 2:",
            "print(\"Image Path not specified : Using sample_image.png\\n\")"
        ],
        "context_after": [
            "",
            "if len(sys.argv) == 2:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 48,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "make_art",
        "line_content": "print(\"Using {} as Image Path\\n\".format(sys.argv[1]))",
        "line_number": 48,
        "context_before": [
            "",
            "if len(sys.argv) == 2:"
        ],
        "context_after": [
            "image_path = sys.argv[1]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 51,
        "column": 23,
        "message_id": "E0606",
        "message_type": "error",
        "symbol": "possibly-used-before-assignment",
        "message": "Possibly using variable 'image_path' before assignment",
        "module": "make_art",
        "line_content": "image = cv2.imread(image_path, 0)  # read image",
        "line_number": 51,
        "context_before": [
            "image_path = sys.argv[1]",
            ""
        ],
        "context_after": [
            "",
            "ascii_art = img_to_ascii(image)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Ascii_art/make_art.py",
        "line": 6,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party imports \"cv2\", \"numpy\"",
        "module": "make_art",
        "line_content": "import sys",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            ""
        ],
        "context_after": [
            "",
            "symbols_list = [\"#\", \"-\", \"*\", \".\", \"+\", \"o\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Geocoding/geocoding.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "geocoding",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "# Base Url for geocoding"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Geocoding/geocoding.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"url\" doesn't conform to UPPER_CASE naming style",
        "module": "geocoding",
        "line_content": "url = \"https://us1.locationiq.com/v1/search.php\"",
        "line_number": 4,
        "context_before": [
            "",
            "# Base Url for geocoding"
        ],
        "context_after": [
            "",
            "address = input(\"Input the address: \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Geocoding/geocoding.py",
        "line": 10,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"private_token\" doesn't conform to UPPER_CASE naming style",
        "module": "geocoding",
        "line_content": "private_token = \"Your_private_token\"",
        "line_number": 10,
        "context_before": [
            "#Your unique private_token should replace value of the private_token variable.",
            "#To know how to obtain a unique private_token please refer the README file for this script."
        ],
        "context_after": [
            "",
            "data = {"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_word_from_list/Random_word_from_list.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Random_word_from_list\" doesn't conform to snake_case naming style",
        "module": "Random_word_from_list",
        "line_content": "import sys",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import random",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_word_from_list/Random_word_from_list.py",
        "line": 11,
        "column": 11,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "Random_word_from_list",
        "line_content": "file = open(filename)",
        "line_number": 11,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "except (FileNotFoundError, IOError):",
            "print(\"File doesn't exist!\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_word_from_list/Random_word_from_list.py",
        "line": 14,
        "column": 4,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "Random_word_from_list",
        "line_content": "exit()",
        "line_number": 14,
        "context_before": [
            "except (FileNotFoundError, IOError):",
            "print(\"File doesn't exist!\")"
        ],
        "context_after": [
            "# handle exception",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_word_from_list/Random_word_from_list.py",
        "line": 11,
        "column": 11,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "Random_word_from_list",
        "line_content": "file = open(filename)",
        "line_number": 11,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "except (FileNotFoundError, IOError):",
            "print(\"File doesn't exist!\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 19,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (117/100)",
        "module": "main",
        "line_content": "'Microsoft OLE DB Provider for ODBC Drivers error' : 'Microsoft OLE DB Provider for ODBC Drivers error',",
        "line_number": 19,
        "context_before": [
            "'Error Occurred While Processing Request' : 'Error Occurred While Processing Request',",
            "'Server Error' : 'Server Error',"
        ],
        "context_after": [
            "'Invalid Querystring' : 'Invalid Querystring',",
            "'OLE DB Provider for ODBC' : 'OLE DB Provider for ODBC',"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 32,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "main",
        "line_content": "'Input string was not in a correct format' : 'Input string was not in a correct format',",
        "line_number": 32,
        "context_before": [
            "'GetArray()' : 'GetArray()',",
            "'FetchRow()' : 'FetchRow()',"
        ],
        "context_after": [
            "'Not found' : 'Not found'}",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 42,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (152/100)",
        "module": "main",
        "line_content": "user_agent = {\"User-agent\":\"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}",
        "line_number": 42,
        "context_before": [
            "def Exploit(dork,total_page):",
            "# this require google search engine"
        ],
        "context_after": [
            "",
            "Total_page = int(total_page)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 55,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (119/100)",
        "module": "main",
        "line_content": "print(\" \\033[41m\\033[30mVULN\\033[40m\\033[37m {0}\\n Vulnerability Type: \\033[31m{1}\".format(b,Type))",
        "line_number": 55,
        "context_before": [
            "if re.search(ErrorMessage, webs):",
            "# append the list of vulnerability website to result"
        ],
        "context_after": [
            "",
            "# doing the while input"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 73,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (148/100)",
        "module": "main",
        "line_content": "print(\"[!] You havent installed the required modules!\\n[+] to install that packages. run 'pip3 install -r requirements.txt' on your terminal\\n\")",
        "line_number": 73,
        "context_before": [
            "# this error will display on your terminal if you havent",
            "# installed the google module"
        ],
        "context_after": [
            "sys.exit()",
            "except KeyboardInterrupt:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 40,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"Exploit\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "def Exploit(dork,total_page):",
        "line_number": 40,
        "context_before": [
            "import googlesearch",
            "# the function to exploit the google hacking databases"
        ],
        "context_after": [
            "# this require google search engine",
            "user_agent = {\"User-agent\":\"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 40,
        "column": 16,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'dork' from outer scope (line 60)",
        "module": "main",
        "line_content": "def Exploit(dork,total_page):",
        "line_number": 40,
        "context_before": [
            "import googlesearch",
            "# the function to exploit the google hacking databases"
        ],
        "context_after": [
            "# this require google search engine",
            "user_agent = {\"User-agent\":\"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 40,
        "column": 21,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'total_page' from outer scope (line 61)",
        "module": "main",
        "line_content": "def Exploit(dork,total_page):",
        "line_number": 40,
        "context_before": [
            "import googlesearch",
            "# the function to exploit the google hacking databases"
        ],
        "context_after": [
            "# this require google search engine",
            "user_agent = {\"User-agent\":\"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 44,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"Total_page\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "Total_page = int(total_page)",
        "line_number": 44,
        "context_before": [
            "user_agent = {\"User-agent\":\"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"}",
            ""
        ],
        "context_after": [
            "",
            "for b in googlesearch.search(dork, num=Total_page):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 52,
        "column": 16,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"Type\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "for Type, ErrorMessage in errors.items():",
        "line_number": 52,
        "context_before": [
            "webs = r.text",
            "# return errors dictionary to find the error problem matches"
        ],
        "context_after": [
            "if re.search(ErrorMessage, webs):",
            "# append the list of vulnerability website to result"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 52,
        "column": 22,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ErrorMessage\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "for Type, ErrorMessage in errors.items():",
        "line_number": 52,
        "context_before": [
            "webs = r.text",
            "# return errors dictionary to find the error problem matches"
        ],
        "context_after": [
            "if re.search(ErrorMessage, webs):",
            "# append the list of vulnerability website to result"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/dork_search_google/main.py",
        "line": 55,
        "column": 26,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "print(\" \\033[41m\\033[30mVULN\\033[40m\\033[37m {0}\\n Vulnerability Type: \\033[31m{1}\".format(b,Type))",
        "line_number": 55,
        "context_before": [
            "if re.search(ErrorMessage, webs):",
            "# append the list of vulnerability website to result"
        ],
        "context_after": [
            "",
            "# doing the while input"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Dns_record/dns_record.py",
        "line": 22,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 4",
        "module": "dns_record",
        "line_content": "mx_record_list.append(server)",
        "line_number": 22,
        "context_before": [
            "mx_record = dns.resolver.resolve(website,'MX')",
            "for server in mx_record:"
        ],
        "context_after": [
            "for i, element in enumerate(mx_record_list):",
            "dns_record['MX_Record', i+1] = element"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Dns_record/dns_record.py",
        "line": 29,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "dns_record",
        "line_content": "",
        "line_number": 29,
        "context_before": [
            "for key,value in dns_record.items():",
            "print(f\"{key} = {value}\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Dns_record/dns_record.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'dns.resolver'",
        "module": "dns_record",
        "line_content": "import dns.resolver",
        "line_number": 3,
        "context_before": [
            "#Simple program to fetch dns record of a given website",
            ""
        ],
        "context_after": [
            "",
            "#Dictionary to store the dns record of a website"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/download GeeksForGeeks articles/downloader.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'selenium'",
        "module": "downloader",
        "line_content": "from selenium import webdriver",
        "line_number": 2,
        "context_before": [
            "# !/usr/bin/env python"
        ],
        "context_after": [
            "from webdriver_manager.chrome import ChromeDriverManager",
            "import json"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/download GeeksForGeeks articles/downloader.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'webdriver_manager.chrome'",
        "module": "downloader",
        "line_content": "from webdriver_manager.chrome import ChromeDriverManager",
        "line_number": 3,
        "context_before": [
            "# !/usr/bin/env python",
            "from selenium import webdriver"
        ],
        "context_after": [
            "import json",
            "import requests"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/download GeeksForGeeks articles/downloader.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "downloader",
        "line_content": "import requests",
        "line_number": 5,
        "context_before": [
            "from webdriver_manager.chrome import ChromeDriverManager",
            "import json"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/download GeeksForGeeks articles/downloader.py",
        "line": 35,
        "column": 21,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"URL\" doesn't conform to snake_case naming style",
        "module": "downloader",
        "line_content": "def download_article(URL):",
        "line_number": 35,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "browser = get_driver()",
            "browser.get(URL)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/download GeeksForGeeks articles/downloader.py",
        "line": 35,
        "column": 21,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'URL' from outer scope (line 45)",
        "module": "downloader",
        "line_content": "def download_article(URL):",
        "line_number": 35,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "browser = get_driver()",
            "browser.get(URL)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/download GeeksForGeeks articles/downloader.py",
        "line": 51,
        "column": 15,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "downloader",
        "line_content": "except Exception as e:",
        "line_number": 51,
        "context_before": [
            "download_article(URL)",
            "print(\"Your article is successfully downloaded\")"
        ],
        "context_after": [
            "print(e)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/download GeeksForGeeks articles/downloader.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"json\" should be placed before third party imports \"selenium.webdriver\", \"webdriver_manager.chrome.ChromeDriverManager\"",
        "module": "downloader",
        "line_content": "import json",
        "line_number": 4,
        "context_before": [
            "from selenium import webdriver",
            "from webdriver_manager.chrome import ChromeDriverManager"
        ],
        "context_after": [
            "import requests",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Textfile_analysis/textfile_analysis.py",
        "line": 29,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "textfile_analysis",
        "line_content": "res[\"special_characters\"] = sum(v for k, v in collections.Counter(data).items() if k in special_chars)",
        "line_number": 29,
        "context_before": [
            "res[\"unique_words\"] = len([i[0] for i in d])",
            "special_chars = string.punctuation"
        ],
        "context_after": [
            "",
            "except IndexError:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Textfile_analysis/textfile_analysis.py",
        "line": 36,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "textfile_analysis",
        "line_content": "print(res)",
        "line_number": 36,
        "context_before": [
            "print('\"%s\" cannot be opened.' % textfile)",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Textfile_analysis/textfile_analysis.py",
        "line": 26,
        "column": 29,
        "message_id": "R1728",
        "message_type": "refactor",
        "symbol": "consider-using-generator",
        "message": "Consider using a generator instead 'sum(i[1] for i in d)'",
        "module": "textfile_analysis",
        "line_content": "res[\"total_words\"] = sum([i[1] for i in d])",
        "line_number": 26,
        "context_before": [
            "counter = collections.Counter(data.split())",
            "d = counter.most_common()"
        ],
        "context_after": [
            "res[\"unique_words\"] = len([i[0] for i in d])",
            "special_chars = string.punctuation"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Textfile_analysis/textfile_analysis.py",
        "line": 28,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"special_chars\" doesn't conform to UPPER_CASE naming style",
        "module": "textfile_analysis",
        "line_content": "special_chars = string.punctuation",
        "line_number": 28,
        "context_before": [
            "res[\"total_words\"] = sum([i[1] for i in d])",
            "res[\"unique_words\"] = len([i[0] for i in d])"
        ],
        "context_after": [
            "res[\"special_characters\"] = sum(v for k, v in collections.Counter(data).items() if k in special_chars)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Textfile_analysis/textfile_analysis.py",
        "line": 32,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "textfile_analysis",
        "line_content": "print('Usage: %s TEXTFILE' % script_name)",
        "line_number": 32,
        "context_before": [
            "",
            "except IndexError:"
        ],
        "context_after": [
            "except IOError:",
            "print('\"%s\" cannot be opened.' % textfile)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Textfile_analysis/textfile_analysis.py",
        "line": 34,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "textfile_analysis",
        "line_content": "print('\"%s\" cannot be opened.' % textfile)",
        "line_number": 34,
        "context_before": [
            "print('Usage: %s TEXTFILE' % script_name)",
            "except IOError:"
        ],
        "context_after": [
            "",
            "print(res)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"progress_bar_ with_images_resizing\" doesn't conform to snake_case naming style",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "from tqdm import tqdm",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from PIL import Image",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tqdm'",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "from tqdm import tqdm",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from PIL import Image",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "from PIL import Image",
        "line_number": 2,
        "context_before": [
            "from tqdm import tqdm"
        ],
        "context_after": [
            "import os",
            "from time import sleep"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"Resize_image\" doesn't conform to snake_case naming style",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "def Resize_image(size, image):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "if os.path.isfile(image):",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 7,
        "column": 17,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'size' from outer scope (line 18)",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "def Resize_image(size, image):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "if os.path.isfile(image):",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 7,
        "column": 23,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'image' from outer scope (line 27)",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "def Resize_image(size, image):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "if os.path.isfile(image):",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 13,
        "column": 15,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "except Exception as ex:",
        "line_number": 13,
        "context_before": [
            "im.thumbnail(size, Image.ANTIALIAS)",
            "im.save(\"resize/\" + str(image) + \".jpg\")"
        ],
        "context_after": [
            "print(f\"Error: {str(ex)} to {image}\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party imports \"tqdm.tqdm\", \"PIL.Image\"",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "import os",
        "line_number": 3,
        "context_before": [
            "from tqdm import tqdm",
            "from PIL import Image"
        ],
        "context_after": [
            "from time import sleep",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_progress_bar_with_images_resizing/progress_bar_ with_images_resizing.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time.sleep\" should be placed before third party imports \"tqdm.tqdm\", \"PIL.Image\"",
        "module": "progress_bar_ with_images_resizing",
        "line_content": "from time import sleep",
        "line_number": 4,
        "context_before": [
            "from PIL import Image",
            "import os"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 15,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (137/100)",
        "module": "Captcha_Genrator",
        "line_content": "image = ImageCaptcha(fonts=['C:/Users/Administrator/Downloads/ChelseaMarketsr.ttf', 'C:/Users/Administrator/Downloads/DejaVuSanssr.ttf'])",
        "line_number": 15,
        "context_before": [
            "from captcha.image import ImageCaptcha",
            ""
        ],
        "context_after": [
            "",
            "random=str(randint(100000,999999))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 25,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "Captcha_Genrator",
        "line_content": "if (int(x)==int(random)):",
        "line_number": 25,
        "context_before": [
            "global random",
            "x=t1.get(\"0.0\",END)"
        ],
        "context_after": [
            "messagebox.showinfo(\"sucsess\", \"verified\")",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 32,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "random=str(randint(100000,999999))",
        "line_number": 32,
        "context_before": [
            "",
            "def refresh():"
        ],
        "context_after": [
            "data = image.generate(random)",
            "assert isinstance(data, BytesIO)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 33,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "data = image.generate(random)",
        "line_number": 33,
        "context_before": [
            "def refresh():",
            "random=str(randint(100000,999999))"
        ],
        "context_after": [
            "assert isinstance(data, BytesIO)",
            "image.write(random,'out.png')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 34,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "assert isinstance(data, BytesIO)",
        "line_number": 34,
        "context_before": [
            "random=str(randint(100000,999999))",
            "data = image.generate(random)"
        ],
        "context_after": [
            "image.write(random,'out.png')",
            "photo = PhotoImage(file=\"out.png\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 35,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "image.write(random,'out.png')",
        "line_number": 35,
        "context_before": [
            "data = image.generate(random)",
            "assert isinstance(data, BytesIO)"
        ],
        "context_after": [
            "photo = PhotoImage(file=\"out.png\")",
            "l1.config(image=photo,height=100,width=200)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 36,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "photo = PhotoImage(file=\"out.png\")",
        "line_number": 36,
        "context_before": [
            "assert isinstance(data, BytesIO)",
            "image.write(random,'out.png')"
        ],
        "context_after": [
            "l1.config(image=photo,height=100,width=200)",
            "l1.update()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 37,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "l1.config(image=photo,height=100,width=200)",
        "line_number": 37,
        "context_before": [
            "image.write(random,'out.png')",
            "photo = PhotoImage(file=\"out.png\")"
        ],
        "context_after": [
            "l1.update()",
            "UpdateLabel()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 38,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "l1.update()",
        "line_number": 38,
        "context_before": [
            "photo = PhotoImage(file=\"out.png\")",
            "l1.config(image=photo,height=100,width=200)"
        ],
        "context_after": [
            "UpdateLabel()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 39,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "Captcha_Genrator",
        "line_content": "UpdateLabel()",
        "line_number": 39,
        "context_before": [
            "l1.config(image=photo,height=100,width=200)",
            "l1.update()"
        ],
        "context_after": [
            "",
            "root=Tk()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 40,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "Captcha_Genrator",
        "line_content": "",
        "line_number": 40,
        "context_before": [
            "l1.update()",
            "UpdateLabel()"
        ],
        "context_after": [
            "root=Tk()",
            "photo = PhotoImage(file=\"out.png\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 56,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "Captcha_Genrator",
        "line_content": "",
        "line_number": 56,
        "context_before": [
            "",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Captcha_Genrator\" doesn't conform to snake_case naming style",
        "module": "Captcha_Genrator",
        "line_content": "\"\"\"",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "Instructions",
            "1. Install captcha: pip install captcha"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 9,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "Captcha_Genrator",
        "line_content": "from tkinter import *",
        "line_number": 9,
        "context_before": [
            "",
            "from io import BytesIO"
        ],
        "context_after": [
            "from random import *",
            "from tkinter import messagebox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 10,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import random",
        "module": "Captcha_Genrator",
        "line_content": "from random import *",
        "line_number": 10,
        "context_before": [
            "from io import BytesIO",
            "from tkinter import *"
        ],
        "context_after": [
            "from tkinter import messagebox",
            "import string"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 13,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'captcha.image'",
        "module": "Captcha_Genrator",
        "line_content": "from captcha.image import ImageCaptcha",
        "line_number": 13,
        "context_before": [
            "from tkinter import messagebox",
            "import string"
        ],
        "context_after": [
            "",
            "image = ImageCaptcha(fonts=['C:/Users/Administrator/Downloads/ChelseaMarketsr.ttf', 'C:/Users/Administrator/Downloads/DejaVuSanssr.ttf'])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 17,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"random\" doesn't conform to UPPER_CASE naming style",
        "module": "Captcha_Genrator",
        "line_content": "random=str(randint(100000,999999))",
        "line_number": 17,
        "context_before": [
            "image = ImageCaptcha(fonts=['C:/Users/Administrator/Downloads/ChelseaMarketsr.ttf', 'C:/Users/Administrator/Downloads/DejaVuSanssr.ttf'])",
            ""
        ],
        "context_after": [
            "data = image.generate(random)",
            "assert isinstance(data, BytesIO)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 23,
        "column": 4,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'random' but no assignment is done",
        "module": "Captcha_Genrator",
        "line_content": "global random",
        "line_number": 23,
        "context_before": [
            "",
            "def verify():"
        ],
        "context_after": [
            "x=t1.get(\"0.0\",END)",
            "if (int(x)==int(random)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 32,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'random' from outer scope (line 10)",
        "module": "Captcha_Genrator",
        "line_content": "random=str(randint(100000,999999))",
        "line_number": 32,
        "context_before": [
            "",
            "def refresh():"
        ],
        "context_after": [
            "data = image.generate(random)",
            "assert isinstance(data, BytesIO)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 33,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'data' from outer scope (line 18)",
        "module": "Captcha_Genrator",
        "line_content": "data = image.generate(random)",
        "line_number": 33,
        "context_before": [
            "def refresh():",
            "random=str(randint(100000,999999))"
        ],
        "context_after": [
            "assert isinstance(data, BytesIO)",
            "image.write(random,'out.png')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 36,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'photo' from outer scope (line 42)",
        "module": "Captcha_Genrator",
        "line_content": "photo = PhotoImage(file=\"out.png\")",
        "line_number": 36,
        "context_before": [
            "assert isinstance(data, BytesIO)",
            "image.write(random,'out.png')"
        ],
        "context_after": [
            "l1.config(image=photo,height=100,width=200)",
            "l1.update()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 39,
        "column": 8,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'UpdateLabel'",
        "module": "Captcha_Genrator",
        "line_content": "UpdateLabel()",
        "line_number": 39,
        "context_before": [
            "l1.config(image=photo,height=100,width=200)",
            "l1.update()"
        ],
        "context_after": [
            "",
            "root=Tk()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 11,
        "column": 0,
        "message_id": "C0412",
        "message_type": "convention",
        "symbol": "ungrouped-imports",
        "message": "Imports from package tkinter are not grouped",
        "module": "Captcha_Genrator",
        "line_content": "from tkinter import messagebox",
        "line_number": 11,
        "context_before": [
            "from tkinter import *",
            "from random import *"
        ],
        "context_after": [
            "import string",
            "from captcha.image import ImageCaptcha"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 12,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import string",
        "module": "Captcha_Genrator",
        "line_content": "import string",
        "line_number": 12,
        "context_before": [
            "from random import *",
            "from tkinter import messagebox"
        ],
        "context_after": [
            "from captcha.image import ImageCaptcha",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 9,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, StringVar, IntVar, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, Grid, BaseWidget, Widget, Toplevel, Canvas, Checkbutton, Entry, Frame, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, Scrollbar, OptionMenu, Image, BitmapImage, image_names, image_types, Spinbox, LabelFrame, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, E, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, X, Y, BOTH, LEFT, TOP, RIGHT, BOTTOM, RAISED, SUNKEN, FLAT, RIDGE, GROOVE, SOLID, HORIZONTAL, VERTICAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, INSERT, CURRENT, ANCHOR, ALL, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "Captcha_Genrator",
        "line_content": "from tkinter import *",
        "line_number": 9,
        "context_before": [
            "",
            "from io import BytesIO"
        ],
        "context_after": [
            "from random import *",
            "from tkinter import messagebox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Captcha_Genrator/Captcha_Genrator.py",
        "line": 10,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) NV_MAGICCONST, LOG4, SG_MAGICCONST, BPF, RECIP_BPF, Random, SystemRandom, seed, uniform, triangular, choice, randrange, sample, shuffle, choices, normalvariate, lognormvariate, expovariate, vonmisesvariate, gammavariate, gauss, betavariate, binomialvariate, paretovariate, weibullvariate, getstate, setstate, getrandbits, randbytes, main and TWOPI from wildcard import of random",
        "module": "Captcha_Genrator",
        "line_content": "from random import *",
        "line_number": 10,
        "context_before": [
            "from io import BytesIO",
            "from tkinter import *"
        ],
        "context_after": [
            "from tkinter import messagebox",
            "import string"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Merge_pdfs/merge_pdfs.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PyPDF2'",
        "module": "merge_pdfs",
        "line_content": "from PyPDF2 import PdfFileMerger",
        "line_number": 3,
        "context_before": [
            "#!/usr/bin/env python",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Merge_pdfs/merge_pdfs.py",
        "line": 10,
        "column": 9,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "merge_pdfs",
        "line_content": "f1 = open(\"samplePdf1.pdf\", \"rb\")",
        "line_number": 10,
        "context_before": [
            "merger = PdfFileMerger()",
            "# Either provide file stream"
        ],
        "context_after": [
            "merger.append(f1)",
            "# Or direct file path"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/python-password-generator.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"python-password-generator\" doesn't conform to snake_case naming style",
        "module": "python-password-generator",
        "line_content": "import random",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import string",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/python-password-generator.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"total\" doesn't conform to UPPER_CASE naming style",
        "module": "python-password-generator",
        "line_content": "total = string.ascii_letters + string.digits + string.punctuation",
        "line_number": 4,
        "context_before": [
            "import string",
            ""
        ],
        "context_after": [
            "",
            "length = 16"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/python-password-generator.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"length\" doesn't conform to UPPER_CASE naming style",
        "module": "python-password-generator",
        "line_content": "length = 16",
        "line_number": 6,
        "context_before": [
            "total = string.ascii_letters + string.digits + string.punctuation",
            ""
        ],
        "context_after": [
            "",
            "password = \"\".join(random.sample(total, length))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/python-password-generator.py",
        "line": 8,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"password\" doesn't conform to UPPER_CASE naming style",
        "module": "python-password-generator",
        "line_content": "password = \"\".join(random.sample(total, length))",
        "line_number": 8,
        "context_before": [
            "length = 16",
            ""
        ],
        "context_after": [
            "",
            "print(password)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/random_password_gen.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"alpha\" doesn't conform to UPPER_CASE naming style",
        "module": "random_password_gen",
        "line_content": "alpha = \"abcdefghijklmnopqrstuvwxyz\"",
        "line_number": 4,
        "context_before": [
            "import math",
            ""
        ],
        "context_after": [
            "num = \"0123456789\"",
            "special = \"@#$%&*\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/random_password_gen.py",
        "line": 5,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"num\" doesn't conform to UPPER_CASE naming style",
        "module": "random_password_gen",
        "line_content": "num = \"0123456789\"",
        "line_number": 5,
        "context_before": [
            "",
            "alpha = \"abcdefghijklmnopqrstuvwxyz\""
        ],
        "context_after": [
            "special = \"@#$%&*\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/random_password_gen.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"special\" doesn't conform to UPPER_CASE naming style",
        "module": "random_password_gen",
        "line_content": "special = \"@#$%&*\"",
        "line_number": 6,
        "context_before": [
            "alpha = \"abcdefghijklmnopqrstuvwxyz\"",
            "num = \"0123456789\""
        ],
        "context_after": [
            "",
            "# pass_len=random.randint(8,13)  #without User INput"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/random_password_gen.py",
        "line": 21,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'i' from outer scope (line 41)",
        "module": "random_password_gen",
        "line_content": "for i in range(length):",
        "line_number": 21,
        "context_before": [
            "",
            "def generate_pass(length, array, is_alpha=False):"
        ],
        "context_after": [
            "index = random.randint(0, len(array) - 1)",
            "character = array[index]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/random_password_gen.py",
        "line": 21,
        "column": 8,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'i'",
        "module": "random_password_gen",
        "line_content": "for i in range(length):",
        "line_number": 21,
        "context_before": [
            "",
            "def generate_pass(length, array, is_alpha=False):"
        ],
        "context_after": [
            "index = random.randint(0, len(array) - 1)",
            "character = array[index]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/random_password_gen.py",
        "line": 40,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"gen_password\" doesn't conform to UPPER_CASE naming style",
        "module": "random_password_gen",
        "line_content": "gen_password = \"\"",
        "line_number": 40,
        "context_before": [
            "random.shuffle(password)",
            "# convert List To string"
        ],
        "context_after": [
            "for i in password:",
            "gen_password = gen_password + str(i)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Random_password_generator/random_password_gen.py",
        "line": 42,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"gen_password\" doesn't conform to UPPER_CASE naming style",
        "module": "random_password_gen",
        "line_content": "gen_password = gen_password + str(i)",
        "line_number": 42,
        "context_before": [
            "gen_password = \"\"",
            "for i in password:"
        ],
        "context_after": [
            "print(gen_password)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 5,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (137/100)",
        "module": "easy_cartoonify",
        "line_content": "image_name = input(\"Please enter the name of the image file that you want to process:    \") ## User input for the name of the image file.",
        "line_number": 5,
        "context_before": [
            "from pathlib import Path",
            ""
        ],
        "context_after": [
            "image_directory = input(\"Please enter the directory that may contain the image:    \") ## User input for the path of the image file.",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 6,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (131/100)",
        "module": "easy_cartoonify",
        "line_content": "image_directory = input(\"Please enter the directory that may contain the image:    \") ## User input for the path of the image file.",
        "line_number": 6,
        "context_before": [
            "",
            "image_name = input(\"Please enter the name of the image file that you want to process:    \") ## User input for the name of the image file."
        ],
        "context_after": [
            "",
            "## This function looks for and finds the desired file. You can specify a parent directory for the fundtion to look for, however if you have no idea where a file is; this functio will find it for you, just slower. If you have no idea where a file is, just type \"/\"."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 8,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (264/100)",
        "module": "easy_cartoonify",
        "line_content": "## This function looks for and finds the desired file. You can specify a parent directory for the fundtion to look for, however if you have no idea where a file is; this functio will find it for you, just slower. If you have no idea where a file is, just type \"/\".",
        "line_number": 8,
        "context_before": [
            "image_directory = input(\"Please enter the directory that may contain the image:    \") ## User input for the path of the image file.",
            ""
        ],
        "context_after": [
            "def find_the_image(file_name, directory_name):",
            "files_found = []"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 13,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "easy_cartoonify",
        "line_content": "if(file_name == name):",
        "line_number": 13,
        "context_before": [
            "for path, subdirs, files in os.walk(directory_name):",
            "for name in files:"
        ],
        "context_after": [
            "file_path = os.path.join(path,name)",
            "files_found.append(file_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 21,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (104/100)",
        "module": "easy_cartoonify",
        "line_content": "image_path = Path(find_the_image(image_name, image_directory)) ## Inıtialize the path of the image file.",
        "line_number": 21,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "new_working_directory = image_path.parent ## Initialize the parent directory of the image path.",
            "os.chdir(new_working_directory) ## Change the working directory of the script to the parent directory of the image path."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 23,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (120/100)",
        "module": "easy_cartoonify",
        "line_content": "os.chdir(new_working_directory) ## Change the working directory of the script to the parent directory of the image path.",
        "line_number": 23,
        "context_before": [
            "image_path = Path(find_the_image(image_name, image_directory)) ## Inıtialize the path of the image file.",
            "new_working_directory = image_path.parent ## Initialize the parent directory of the image path."
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 27,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "easy_cartoonify",
        "line_content": "##cv2.imshow(\"image_not_processed\",color_image) ## Uncomment this to see the image without the process.",
        "line_number": 27,
        "context_before": [
            "",
            "color_image = cv2.imread(find_the_image(image_name, image_directory))"
        ],
        "context_after": [
            "##cv2.waitKey()",
            "##cv2.destroyAllWindows()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 33,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "easy_cartoonify",
        "line_content": "if (cartoon_style_selection == \"1\"):",
        "line_number": 33,
        "context_before": [
            "cartoon_style_selection = input(\"This script currently has 2 sytles. Please type 1 or 2.   \")",
            ""
        ],
        "context_after": [
            "cartoon_image_style_1 = cv2.stylization(color_image, sigma_s=150, sigma_r=0.25) ## Cartoonify process.",
            "cv2.imshow('cartoon_1', cartoon_image_style_1)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 34,
        "column": 106,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "easy_cartoonify",
        "line_content": "cartoon_image_style_1 = cv2.stylization(color_image, sigma_s=150, sigma_r=0.25) ## Cartoonify process.",
        "line_number": 34,
        "context_before": [
            "",
            "if (cartoon_style_selection == \"1\"):"
        ],
        "context_after": [
            "cv2.imshow('cartoon_1', cartoon_image_style_1)",
            "cv2.waitKey()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 34,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (106/100)",
        "module": "easy_cartoonify",
        "line_content": "cartoon_image_style_1 = cv2.stylization(color_image, sigma_s=150, sigma_r=0.25) ## Cartoonify process.",
        "line_number": 34,
        "context_before": [
            "",
            "if (cartoon_style_selection == \"1\"):"
        ],
        "context_after": [
            "cv2.imshow('cartoon_1', cartoon_image_style_1)",
            "cv2.waitKey()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 38,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'elif' keyword",
        "module": "easy_cartoonify",
        "line_content": "elif (cartoon_style_selection == \"2\"):",
        "line_number": 38,
        "context_before": [
            "cv2.waitKey()",
            "cv2.destroyAllWindows()"
        ],
        "context_after": [
            "cartoon_image_style_2  = cv2.stylization(color_image, sigma_s=60, sigma_r=0.5) ## Cartoonify process.",
            "cv2.imshow('cartoon_2', cartoon_image_style_2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 39,
        "column": 105,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "easy_cartoonify",
        "line_content": "cartoon_image_style_2  = cv2.stylization(color_image, sigma_s=60, sigma_r=0.5) ## Cartoonify process.",
        "line_number": 39,
        "context_before": [
            "cv2.destroyAllWindows()",
            "elif (cartoon_style_selection == \"2\"):"
        ],
        "context_after": [
            "cv2.imshow('cartoon_2', cartoon_image_style_2)",
            "cv2.waitKey()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 39,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "easy_cartoonify",
        "line_content": "cartoon_image_style_2  = cv2.stylization(color_image, sigma_s=60, sigma_r=0.5) ## Cartoonify process.",
        "line_number": 39,
        "context_before": [
            "cv2.destroyAllWindows()",
            "elif (cartoon_style_selection == \"2\"):"
        ],
        "context_after": [
            "cv2.imshow('cartoon_2', cartoon_image_style_2)",
            "cv2.waitKey()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "easy_cartoonify",
        "line_content": "import cv2",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "from pathlib import Path"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 11,
        "column": 14,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'subdirs'",
        "module": "easy_cartoonify",
        "line_content": "for path, subdirs, files in os.walk(directory_name):",
        "line_number": 11,
        "context_before": [
            "def find_the_image(file_name, directory_name):",
            "files_found = []"
        ],
        "context_after": [
            "for name in files:",
            "if(file_name == name):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"cv2\"",
        "module": "easy_cartoonify",
        "line_content": "import os",
        "line_number": 2,
        "context_before": [
            "import cv2"
        ],
        "context_after": [
            "from pathlib import Path",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Easy_cartoonify/easy_cartoonify.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"pathlib.Path\" should be placed before third party import \"cv2\"",
        "module": "easy_cartoonify",
        "line_content": "from pathlib import Path",
        "line_number": 3,
        "context_before": [
            "import cv2",
            "import os"
        ],
        "context_after": [
            "",
            "image_name = input(\"Please enter the name of the image file that you want to process:    \") ## User input for the name of the image file."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unique_words_in_a_file/unique.py",
        "line": 17,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "unique",
        "line_content": "",
        "line_number": 17,
        "context_before": [
            "# list_of_words.extend(re.findall(r\"[\\w]+\", line))",
            ""
        ],
        "context_after": [
            "# Creating a dictionary to store the number of occurence of a word",
            "unique = {}"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unique_words_in_a_file/unique.py",
        "line": 24,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "unique",
        "line_content": "",
        "line_number": 24,
        "context_before": [
            "unique[each] = 0",
            "unique[each] += 1"
        ],
        "context_after": [
            "# Creating a list to sort the final unique words",
            "s = []"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unique_words_in_a_file/unique.py",
        "line": 32,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "unique",
        "line_content": "",
        "line_number": 32,
        "context_before": [
            "if val == 1:",
            "s.append(key)"
        ],
        "context_after": [
            "print(sorted(s))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unique_words_in_a_file/unique.py",
        "line": 34,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "unique",
        "line_content": "",
        "line_number": 34,
        "context_before": [
            "",
            "print(sorted(s))"
        ],
        "context_after": [
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unique_words_in_a_file/unique.py",
        "line": 35,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "unique",
        "line_content": "",
        "line_number": 35,
        "context_before": [
            "print(sorted(s))",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Unique_words_in_a_file/unique.py",
        "line": 8,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"filename\" doesn't conform to UPPER_CASE naming style",
        "module": "unique",
        "line_content": "filename = \"text_file.txt\"",
        "line_number": 8,
        "context_before": [
            "# Alternate Method to insert file",
            "# filename = input(\"Enter file name: \")"
        ],
        "context_after": [
            "",
            "with open(filename, \"r\") as f:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unique_words_in_a_file/unique.py",
        "line": 10,
        "column": 5,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "unique",
        "line_content": "with open(filename, \"r\") as f:",
        "line_number": 10,
        "context_before": [
            "filename = \"text_file.txt\"",
            ""
        ],
        "context_after": [
            "for line in f:",
            "# if case is ignored then Great and great are same words"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/S3_File_Upload/main.py",
        "line": 11,
        "column": 110,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "main",
        "line_content": "## This function is responsible for uploading the file into the S3 bucket using the specified credentials.",
        "line_number": 11,
        "context_before": [
            "",
            "def upload_to_s3(local_file, bucket, s3_file):"
        ],
        "context_after": [
            "s3 = boto3.client('s3', aws_access_key_id=ACCESS_KEY,",
            "aws_secret_access_key=SECRET_KEY)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/S3_File_Upload/main.py",
        "line": 11,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "main",
        "line_content": "## This function is responsible for uploading the file into the S3 bucket using the specified credentials.",
        "line_number": 11,
        "context_before": [
            "",
            "def upload_to_s3(local_file, bucket, s3_file):"
        ],
        "context_after": [
            "s3 = boto3.client('s3', aws_access_key_id=ACCESS_KEY,",
            "aws_secret_access_key=SECRET_KEY)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/S3_File_Upload/main.py",
        "line": 26,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "main",
        "line_content": "result = upload_to_s3(LOCAL_FILE, BUCKET_NAME, S3_FILE_NAME)",
        "line_number": 26,
        "context_before": [
            "",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/S3_File_Upload/main.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'boto3'",
        "module": "main",
        "line_content": "import boto3",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from botocore.exceptions import NoCredentialsError",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/S3_File_Upload/main.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'botocore.exceptions'",
        "module": "main",
        "line_content": "from botocore.exceptions import NoCredentialsError",
        "line_number": 2,
        "context_before": [
            "import boto3"
        ],
        "context_after": [
            "",
            "ACCESS_KEY = 'XXXXXXXXXXXXXXXXX'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/S3_File_Upload/main.py",
        "line": 26,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"result\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "result = upload_to_s3(LOCAL_FILE, BUCKET_NAME, S3_FILE_NAME)",
        "line_number": 26,
        "context_before": [
            "",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/text_to_morse_code/text_to_morse_code.py",
        "line": 42,
        "column": 13,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "text_to_morse_code",
        "line_content": "print(output)",
        "line_number": 42,
        "context_before": [
            "output = output + \" \" + symbols.get(ask[i])",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/text_to_morse_code/text_to_morse_code.py",
        "line": 36,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"output\" doesn't conform to UPPER_CASE naming style",
        "module": "text_to_morse_code",
        "line_content": "output = \"\"",
        "line_number": 36,
        "context_before": [
            "",
            "length = len(ask)"
        ],
        "context_after": [
            "",
            "for i in range(length):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/text_to_morse_code/text_to_morse_code.py",
        "line": 39,
        "column": 17,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "text_to_morse_code",
        "line_content": "if ask[i] in symbols.keys():",
        "line_number": 39,
        "context_before": [
            "",
            "for i in range(length):"
        ],
        "context_after": [
            "output = output + \" \" + symbols.get(ask[i])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 8,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "converter_GUI",
        "line_content": "label1 = tk.Label(root, text='File Converter', bg='lightsteelblue2')   # giving a title to the screen",
        "line_number": 8,
        "context_before": [
            "canvas1 = tk.Canvas(root, width=300, height=250, bg='orange', relief='raised')",
            "canvas1.pack()"
        ],
        "context_after": [
            "label1.config(font=('helvetica', 20))",
            "canvas1.create_window(150, 60, window=label1)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 24,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "converter_GUI",
        "line_content": "browseButton_JPG = tk.Button(text=\"      Import JPEG File     \", command=getJPG, bg=bg, fg=fg, font=font)   # Browse button",
        "line_number": 24,
        "context_before": [
            "bg = 'royalblue'",
            "fg = 'white'"
        ],
        "context_after": [
            "canvas1.create_window(150, 130, window=browseButton_JPG)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 38,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (125/100)",
        "module": "converter_GUI",
        "line_content": "saveAsButton_PNG = tk.Button(text='Convert JPEG to PNG', command=convertToPNG, bg=bg, fg=fg, font=font)      # Convert button",
        "line_number": 38,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "canvas1.create_window(150, 180, window=saveAsButton_PNG)",
            "root.mainloop()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"converter_GUI\" doesn't conform to snake_case naming style",
        "module": "converter_GUI",
        "line_content": "import tkinter as tk",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from tkinter import filedialog",
            "from PIL import Image"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "converter_GUI",
        "line_content": "from PIL import Image",
        "line_number": 3,
        "context_before": [
            "import tkinter as tk",
            "from tkinter import filedialog"
        ],
        "context_after": [
            "root = tk.Tk()   # Tkinter window initialized",
            "root.title('Converter')     # Title of the window"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 11,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"im1\" doesn't conform to UPPER_CASE naming style",
        "module": "converter_GUI",
        "line_content": "im1 = None  # variable to store path of image",
        "line_number": 11,
        "context_before": [
            "label1.config(font=('helvetica', 20))",
            "canvas1.create_window(150, 60, window=label1)"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 14,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"getJPG\" doesn't conform to snake_case naming style",
        "module": "converter_GUI",
        "line_content": "def getJPG():",
        "line_number": 14,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''Function to get image location and open it with pillow'''",
            "global im1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 16,
        "column": 4,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "converter_GUI",
        "line_content": "global im1",
        "line_number": 16,
        "context_before": [
            "def getJPG():",
            "'''Function to get image location and open it with pillow'''"
        ],
        "context_after": [
            "import_file_path = filedialog.askopenfilename()",
            "im1 = Image.open(import_file_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 22,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bg\" doesn't conform to UPPER_CASE naming style",
        "module": "converter_GUI",
        "line_content": "bg = 'royalblue'",
        "line_number": 22,
        "context_before": [
            "",
            "font = ('helvetica', 12, 'bold')"
        ],
        "context_after": [
            "fg = 'white'",
            "browseButton_JPG = tk.Button(text=\"      Import JPEG File     \", command=getJPG, bg=bg, fg=fg, font=font)   # Browse button"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 23,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"fg\" doesn't conform to UPPER_CASE naming style",
        "module": "converter_GUI",
        "line_content": "fg = 'white'",
        "line_number": 23,
        "context_before": [
            "font = ('helvetica', 12, 'bold')",
            "bg = 'royalblue'"
        ],
        "context_after": [
            "browseButton_JPG = tk.Button(text=\"      Import JPEG File     \", command=getJPG, bg=bg, fg=fg, font=font)   # Browse button",
            "canvas1.create_window(150, 130, window=browseButton_JPG)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 28,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"convertToPNG\" doesn't conform to snake_case naming style",
        "module": "converter_GUI",
        "line_content": "def convertToPNG():",
        "line_number": 28,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''Function to change file extenstion to png and save it to User's prefered location '''",
            "global im1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_GUI.py",
        "line": 30,
        "column": 4,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'im1' but no assignment is done",
        "module": "converter_GUI",
        "line_content": "global im1",
        "line_number": 30,
        "context_before": [
            "def convertToPNG():",
            "'''Function to change file extenstion to png and save it to User's prefered location '''"
        ],
        "context_after": [
            "if im1 is None:",
            "tk.messagebox.showerror(\"Error\", \"No File selected\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Convert_JPEG_to_PNG/converter_terminal.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "converter_terminal",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "im1 = Image.open('input.jpeg')  # takes input image from present folder",
            "im1.save('output.png')          # output image is generated the folder"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 9,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (104/100)",
        "module": "screenshot",
        "line_content": "parser.add_argument(\"-t\", \"--type\", help=\"h (in hour) or m (in minutes) or s (in seconds)\", default='h')",
        "line_number": 9,
        "context_before": [
            "",
            "parser.add_argument(\"-p\", \"--path\", help=\"absolute path to store screenshot.\", default=r\"./images\")"
        ],
        "context_after": [
            "parser.add_argument(\"-f\", \"--frequency\", help=\"frequency for taking screenshot per h/m/s.\", default=1, type=int)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 10,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (112/100)",
        "module": "screenshot",
        "line_content": "parser.add_argument(\"-f\", \"--frequency\", help=\"frequency for taking screenshot per h/m/s.\", default=1, type=int)",
        "line_number": 10,
        "context_before": [
            "parser.add_argument(\"-p\", \"--path\", help=\"absolute path to store screenshot.\", default=r\"./images\")",
            "parser.add_argument(\"-t\", \"--type\", help=\"h (in hour) or m (in minutes) or s (in seconds)\", default='h')"
        ],
        "context_after": [
            "",
            "args = parser.parse_args()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 24,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "screenshot",
        "line_content": "",
        "line_number": 24,
        "context_before": [
            "if sec < 1.:",
            "sec = 1."
        ],
        "context_after": [
            "",
            "if os.path.isdir(args.path) != True:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 38,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "screenshot",
        "line_content": "",
        "line_number": 38,
        "context_before": [
            "print(f\"{file} saved successfully.\\n\")",
            "time.sleep(sec)"
        ],
        "context_after": [
            "except KeyboardInterrupt:",
            "print(\"End of script by user interrupt\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 42,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "screenshot",
        "line_content": "",
        "line_number": 42,
        "context_before": [
            "print(\"End of script by user interrupt\")",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 47,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "screenshot",
        "line_content": "",
        "line_number": 47,
        "context_before": [
            "",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pyautogui'",
        "module": "screenshot",
        "line_content": "import pyautogui",
        "line_number": 3,
        "context_before": [
            "import os",
            "import argparse"
        ],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 15,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"sec\" doesn't conform to UPPER_CASE naming style",
        "module": "screenshot",
        "line_content": "sec = 0.",
        "line_number": 15,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "if args.type == 'h':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 22,
        "column": 0,
        "message_id": "R1731",
        "message_type": "refactor",
        "symbol": "consider-using-max-builtin",
        "message": "Consider using 'sec = max(sec, 1.0)' instead of unnecessary if block",
        "module": "screenshot",
        "line_content": "if sec < 1.:",
        "line_number": 22,
        "context_before": [
            "sec = 60 / args.frequency",
            ""
        ],
        "context_after": [
            "sec = 1.",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 23,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"sec\" doesn't conform to UPPER_CASE naming style",
        "module": "screenshot",
        "line_content": "sec = 1.",
        "line_number": 23,
        "context_before": [
            "",
            "if sec < 1.:"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 26,
        "column": 3,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'os.path.isdir(args.path) != True' should be 'os.path.isdir(args.path) is not True' if checking for the singleton value True, or 'not os.path.isdir(args.path)' if testing for falsiness",
        "module": "screenshot",
        "line_content": "if os.path.isdir(args.path) != True:",
        "line_number": 26,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "os.mkdir(args.path)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/capture_screenshot/screenshot.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"pyautogui\"",
        "module": "screenshot",
        "line_content": "import time",
        "line_number": 4,
        "context_before": [
            "import argparse",
            "import pyautogui"
        ],
        "context_after": [
            "",
            "parser = argparse.ArgumentParser()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 73,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (112/100)",
        "module": "movieInfoScraper",
        "line_content": "# The plot is seperate AJAX call and does not come in the html page, So one more request to plotsummary page",
        "line_number": 73,
        "context_before": [
            "movieDetails['writers']='Not found'",
            ""
        ],
        "context_after": [
            "html = requests.get(movielink+'plotsummary')",
            "bs = BeautifulSoup(html.text, 'html.parser')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"movieInfoScraper\" doesn't conform to snake_case naming style",
        "module": "movieInfoScraper",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "movieInfoScraper",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "movieInfoScraper",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "from bs4 import BeautifulSoup"
        ],
        "context_after": [
            "",
            "# Function to get Movie Details"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"getMovieDetails\" doesn't conform to snake_case naming style",
        "module": "movieInfoScraper",
        "line_content": "def getMovieDetails(movieName):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# Base URL of IMDB website",
            "url = 'https://www.imdb.com'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 7,
        "column": 20,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"movieName\" doesn't conform to snake_case naming style",
        "module": "movieInfoScraper",
        "line_content": "def getMovieDetails(movieName):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# Base URL of IMDB website",
            "url = 'https://www.imdb.com'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 7,
        "column": 20,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'movieName' from outer scope (line 86)",
        "module": "movieInfoScraper",
        "line_content": "def getMovieDetails(movieName):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# Base URL of IMDB website",
            "url = 'https://www.imdb.com'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 15,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'movieDetails' from outer scope (line 87)",
        "module": "movieInfoScraper",
        "line_content": "movieDetails = {}",
        "line_number": 15,
        "context_before": [
            "",
            "# Empty dictionary to store movie Details"
        ],
        "context_after": [
            "",
            "# Query formed"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 15,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"movieDetails\" doesn't conform to snake_case naming style",
        "module": "movieInfoScraper",
        "line_content": "movieDetails = {}",
        "line_number": 15,
        "context_before": [
            "",
            "# Empty dictionary to store movie Details"
        ],
        "context_after": [
            "",
            "# Query formed"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 58,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"creditSummary\" doesn't conform to snake_case naming style",
        "module": "movieInfoScraper",
        "line_content": "creditSummary = bs.findAll('div', {'class': 'credit_summary_item'})",
        "line_number": 58,
        "context_before": [
            "",
            "# Gets the credit section of the page"
        ],
        "context_after": [
            "",
            "# Directors,Writers and Cast"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 90,
        "column": 8,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "movieInfoScraper",
        "line_content": "quit()",
        "line_number": 90,
        "context_before": [
            "if movieDetails is None:",
            "print('No movie of this name found !!!!!')"
        ],
        "context_after": [
            "print('\\n{movie} ({year})'.format(",
            "movie=movieDetails['name'], year=movieDetails['year']))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Movie Information Scraper/movieInfoScraper.py",
        "line": 91,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "movieInfoScraper",
        "line_content": "print('\\n{movie} ({year})'.format(",
        "line_number": 91,
        "context_before": [
            "print('No movie of this name found !!!!!')",
            "quit()"
        ],
        "context_after": [
            "movie=movieDetails['name'], year=movieDetails['year']))",
            "print('Rating:', movieDetails['rating'])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 135,
        "column": 74,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "author_utils",
        "line_content": "ctypes.POINTER(PSECURITY_DESCRIPTOR)) # _Out_opt_ ppSecurityDescriptor",
        "line_number": 135,
        "context_before": [
            "ctypes.POINTER(PACL),  # _Out_opt_ ppDacl",
            "ctypes.POINTER(PACL),  # _Out_opt_ ppSacl"
        ],
        "context_after": [
            "",
            "def look_up_account_sid(sid, system_name=None):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 171,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "author_utils",
        "line_content": "return owner_name",
        "line_number": 171,
        "context_before": [
            "if owner_domain:",
            "owner_name = '{}\\\\{}'.format(owner_domain, owner_name)"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 1,
        "column": 0,
        "message_id": "C0414",
        "message_type": "convention",
        "symbol": "useless-import-alias",
        "message": "Import alias does not rename original package",
        "module": "author_utils",
        "line_content": "import ctypes as ctypes",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from ctypes import wintypes as wintypes",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 2,
        "column": 0,
        "message_id": "C0414",
        "message_type": "convention",
        "symbol": "useless-import-alias",
        "message": "Import alias does not rename original package",
        "module": "author_utils",
        "line_content": "from ctypes import wintypes as wintypes",
        "line_number": 2,
        "context_before": [
            "import ctypes as ctypes"
        ],
        "context_after": [
            "import os",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 28,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"SE_OBJECT_TYPE\" doesn't conform to PascalCase naming style",
        "module": "author_utils",
        "line_content": "SE_OBJECT_TYPE = wintypes.DWORD",
        "line_number": 28,
        "context_before": [
            "",
            "LPDWORD = ctypes.POINTER(wintypes.DWORD)"
        ],
        "context_after": [
            "SECURITY_INFORMATION = wintypes.DWORD",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 29,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"SECURITY_INFORMATION\" doesn't conform to PascalCase naming style",
        "module": "author_utils",
        "line_content": "SECURITY_INFORMATION = wintypes.DWORD",
        "line_number": 29,
        "context_before": [
            "LPDWORD = ctypes.POINTER(wintypes.DWORD)",
            "SE_OBJECT_TYPE = wintypes.DWORD"
        ],
        "context_after": [
            "",
            "class SID_NAME_USE(wintypes.DWORD):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 31,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"SID_NAME_USE\" doesn't conform to PascalCase naming style",
        "module": "author_utils",
        "line_content": "class SID_NAME_USE(wintypes.DWORD):",
        "line_number": 31,
        "context_before": [
            "SECURITY_INFORMATION = wintypes.DWORD",
            ""
        ],
        "context_after": [
            "_sid_types = dict(enumerate('''",
            "User Group Domain Alias WellKnownGroup DeletedAccount"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 40,
        "column": 12,
        "message_id": "E1120",
        "message_type": "error",
        "symbol": "no-value-for-parameter",
        "message": "No value for argument 'value' in unbound method call",
        "module": "author_utils",
        "line_content": "wintypes.DWORD.__init__(value)",
        "line_number": 40,
        "context_before": [
            "if value not in self.sid_types:",
            "raise ValueError('invalid SID type')"
        ],
        "context_after": [
            "",
            "def __str__(self):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 48,
        "column": 15,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "author_utils",
        "line_content": "return 'SID_NAME_USE(%s)' % self.value",
        "line_number": 48,
        "context_before": [
            "",
            "def __repr__(self):"
        ],
        "context_after": [
            "",
            "PSID_NAME_USE = ctypes.POINTER(SID_NAME_USE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 90,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"_SD\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "self.pDacl._SD = self",
        "line_number": 90,
        "context_before": [
            "self.pOwner._SD = self",
            "self.pGroup._SD = self"
        ],
        "context_after": [
            "self.pSacl._SD = self",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 55,
        "column": 8,
        "message_id": "R1725",
        "message_type": "refactor",
        "symbol": "super-with-arguments",
        "message": "Consider using Python 3 style super() without arguments",
        "module": "author_utils",
        "line_content": "super(PLOCAL, self).__init__(value)",
        "line_number": 55,
        "context_before": [
            "_needs_free = False",
            "def __init__(self, value=None, needs_free=False):"
        ],
        "context_after": [
            "self._needs_free = needs_free",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 52,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "module": "author_utils",
        "line_content": "class PLOCAL(wintypes.LPVOID):",
        "line_number": 52,
        "context_before": [
            "PSID_NAME_USE = ctypes.POINTER(SID_NAME_USE)",
            ""
        ],
        "context_after": [
            "_needs_free = False",
            "def __init__(self, value=None, needs_free=False):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 66,
        "column": 4,
        "message_id": "W0246",
        "message_type": "warning",
        "symbol": "useless-parent-delegation",
        "message": "Useless parent or super() delegation in method '__init__'",
        "module": "author_utils",
        "line_content": "def __init__(self, value=None, needs_free=False):",
        "line_number": 66,
        "context_before": [
            "",
            "class PSID(PLOCAL):"
        ],
        "context_after": [
            "super(PSID, self).__init__(value, needs_free)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 67,
        "column": 8,
        "message_id": "R1725",
        "message_type": "refactor",
        "symbol": "super-with-arguments",
        "message": "Consider using Python 3 style super() without arguments",
        "module": "author_utils",
        "line_content": "super(PSID, self).__init__(value, needs_free)",
        "line_number": 67,
        "context_before": [
            "class PSID(PLOCAL):",
            "def __init__(self, value=None, needs_free=False):"
        ],
        "context_after": [
            "",
            "def __str__(self):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 69,
        "column": 4,
        "message_id": "E0307",
        "message_type": "error",
        "symbol": "invalid-str-returned",
        "message": "__str__ does not return str",
        "module": "author_utils",
        "line_content": "def __str__(self):",
        "line_number": 69,
        "context_before": [
            "super(PSID, self).__init__(value, needs_free)",
            ""
        ],
        "context_after": [
            "if not self:",
            "raise ValueError('NULL pointer access')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 65,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "module": "author_utils",
        "line_content": "class PSID(PLOCAL):",
        "line_number": 65,
        "context_before": [
            "PACL = PLOCAL",
            ""
        ],
        "context_after": [
            "def __init__(self, value=None, needs_free=False):",
            "super(PSID, self).__init__(value, needs_free)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 80,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"PSECURITY_DESCRIPTOR\" doesn't conform to PascalCase naming style",
        "module": "author_utils",
        "line_content": "class PSECURITY_DESCRIPTOR(PLOCAL):",
        "line_number": 80,
        "context_before": [
            "kernel32.LocalFree(sid)",
            ""
        ],
        "context_after": [
            "def __init__(self, value=None, needs_free=False):",
            "super(PSECURITY_DESCRIPTOR, self).__init__(value, needs_free)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 83,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"pOwner\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "self.pOwner = PSID()",
        "line_number": 83,
        "context_before": [
            "def __init__(self, value=None, needs_free=False):",
            "super(PSECURITY_DESCRIPTOR, self).__init__(value, needs_free)"
        ],
        "context_after": [
            "self.pGroup = PSID()",
            "self.pDacl = PACL()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 84,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"pGroup\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "self.pGroup = PSID()",
        "line_number": 84,
        "context_before": [
            "super(PSECURITY_DESCRIPTOR, self).__init__(value, needs_free)",
            "self.pOwner = PSID()"
        ],
        "context_after": [
            "self.pDacl = PACL()",
            "self.pSacl = PACL()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 85,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"pDacl\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "self.pDacl = PACL()",
        "line_number": 85,
        "context_before": [
            "self.pOwner = PSID()",
            "self.pGroup = PSID()"
        ],
        "context_after": [
            "self.pSacl = PACL()",
            "# back references to keep this object alive"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 86,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"pSacl\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "self.pSacl = PACL()",
        "line_number": 86,
        "context_before": [
            "self.pGroup = PSID()",
            "self.pDacl = PACL()"
        ],
        "context_after": [
            "# back references to keep this object alive",
            "self.pOwner._SD = self"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 82,
        "column": 8,
        "message_id": "R1725",
        "message_type": "refactor",
        "symbol": "super-with-arguments",
        "message": "Consider using Python 3 style super() without arguments",
        "module": "author_utils",
        "line_content": "super(PSECURITY_DESCRIPTOR, self).__init__(value, needs_free)",
        "line_number": 82,
        "context_before": [
            "class PSECURITY_DESCRIPTOR(PLOCAL):",
            "def __init__(self, value=None, needs_free=False):"
        ],
        "context_after": [
            "self.pOwner = PSID()",
            "self.pGroup = PSID()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 103,
        "column": 24,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'func'",
        "module": "author_utils",
        "line_content": "def _check_bool(result, func, args):",
        "line_number": 103,
        "context_before": [
            "return look_up_account_sid(self.pGroup, system_name)",
            ""
        ],
        "context_after": [
            "if not result:",
            "raise ctypes.WinError(ctypes.get_last_error())"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 138,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"SIZE\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "SIZE = 256",
        "line_number": 138,
        "context_before": [
            "",
            "def look_up_account_sid(sid, system_name=None):"
        ],
        "context_after": [
            "name = ctypes.create_unicode_buffer(SIZE)",
            "domain = ctypes.create_unicode_buffer(SIZE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 151,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"pSD\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "pSD = PSECURITY_DESCRIPTOR(needs_free=True)",
        "line_number": 151,
        "context_before": [
            "# N.B. This query may fail with ERROR_INVALID_FUNCTION",
            "# for some filesystems."
        ],
        "context_after": [
            "error = advapi32.GetNamedSecurityInfoW(filename, SE_FILE_OBJECT, request,",
            "ctypes.byref(pSD.pOwner), ctypes.byref(pSD.pGroup),"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 167,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"pSD\" doesn't conform to snake_case naming style",
        "module": "author_utils",
        "line_content": "pSD = get_file_security(filename)",
        "line_number": 167,
        "context_before": [
            "filename = filename.decode(sys.getfilesystemencoding())",
            ""
        ],
        "context_after": [
            "owner_name, owner_domain, owner_sid_type = pSD.get_owner()",
            "if owner_domain:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 170,
        "column": 21,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "author_utils",
        "line_content": "owner_name = '{}\\\\{}'.format(owner_domain, owner_name)",
        "line_number": 170,
        "context_before": [
            "owner_name, owner_domain, owner_sid_type = pSD.get_owner()",
            "if owner_domain:"
        ],
        "context_after": [
            "return owner_name"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/author_utils.py",
        "line": 168,
        "column": 30,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'owner_sid_type'",
        "module": "author_utils",
        "line_content": "owner_name, owner_domain, owner_sid_type = pSD.get_owner()",
        "line_number": 168,
        "context_before": [
            "",
            "pSD = get_file_security(filename)"
        ],
        "context_after": [
            "if owner_domain:",
            "owner_name = '{}\\\\{}'.format(owner_domain, owner_name)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 43,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "get_meta_from_pic",
        "line_content": "if ('ExifImageWidth' in labeled.keys()):",
        "line_number": 43,
        "context_before": [
            "print(\"size: %sx%s\" % (w, h))",
            "print(\"FileExtension: %s\" %(file_extension))"
        ],
        "context_after": [
            "print(\"ImageWidth: %s\" % (labeled['ExifImageWidth']))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 48,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "get_meta_from_pic",
        "line_content": "if ('ExifImageHeight' in labeled.keys()):",
        "line_number": 48,
        "context_before": [
            "print(\"No ImageWidth\")",
            ""
        ],
        "context_after": [
            "print(\"ImageHeight: %s\" % (labeled['ExifImageHeight']))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 53,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "get_meta_from_pic",
        "line_content": "if ('DateTimeOriginal' in labeled.keys()):",
        "line_number": 53,
        "context_before": [
            "print(\"No ImageHeight\")",
            ""
        ],
        "context_after": [
            "print(\"DateTimeOriginal: %s\" % (labeled['DateTimeOriginal']))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "get_meta_from_pic",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from PIL.ExifTags import TAGS",
            "from author_utils import get_file_security, get_author"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL.ExifTags'",
        "module": "get_meta_from_pic",
        "line_content": "from PIL.ExifTags import TAGS",
        "line_number": 2,
        "context_before": [
            "from PIL import Image"
        ],
        "context_after": [
            "from author_utils import get_file_security, get_author",
            "from gps_utils import get_location"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 11,
        "column": 11,
        "message_id": "W0212",
        "message_type": "warning",
        "symbol": "protected-access",
        "message": "Access to a protected member _getexif of a client class",
        "module": "get_meta_from_pic",
        "line_content": "return image._getexif()",
        "line_number": 11,
        "context_before": [
            "def get_exif(image):",
            "image.verify()"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 14,
        "column": 21,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'exif' from outer scope (line 33)",
        "module": "get_meta_from_pic",
        "line_content": "def get_labeled_exif(exif):",
        "line_number": 14,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "labeled = {}",
            "for (key, val) in exif.items():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 15,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'labeled' from outer scope (line 34)",
        "module": "get_meta_from_pic",
        "line_content": "labeled = {}",
        "line_number": 15,
        "context_before": [
            "",
            "def get_labeled_exif(exif):"
        ],
        "context_after": [
            "for (key, val) in exif.items():",
            "labeled[TAGS.get(key)] = val"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 40,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"ImageName: %s\" %(name))",
        "line_number": 40,
        "context_before": [
            "",
            "# output information"
        ],
        "context_after": [
            "print(\"size: %sx%s\" % (w, h))",
            "print(\"FileExtension: %s\" %(file_extension))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 41,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"size: %sx%s\" % (w, h))",
        "line_number": 41,
        "context_before": [
            "# output information",
            "print(\"ImageName: %s\" %(name))"
        ],
        "context_after": [
            "print(\"FileExtension: %s\" %(file_extension))",
            "if ('ExifImageWidth' in labeled.keys()):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 42,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"FileExtension: %s\" %(file_extension))",
        "line_number": 42,
        "context_before": [
            "print(\"ImageName: %s\" %(name))",
            "print(\"size: %sx%s\" % (w, h))"
        ],
        "context_after": [
            "if ('ExifImageWidth' in labeled.keys()):",
            "print(\"ImageWidth: %s\" % (labeled['ExifImageWidth']))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 43,
        "column": 24,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "get_meta_from_pic",
        "line_content": "if ('ExifImageWidth' in labeled.keys()):",
        "line_number": 43,
        "context_before": [
            "print(\"size: %sx%s\" % (w, h))",
            "print(\"FileExtension: %s\" %(file_extension))"
        ],
        "context_after": [
            "print(\"ImageWidth: %s\" % (labeled['ExifImageWidth']))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 44,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"ImageWidth: %s\" % (labeled['ExifImageWidth']))",
        "line_number": 44,
        "context_before": [
            "print(\"FileExtension: %s\" %(file_extension))",
            "if ('ExifImageWidth' in labeled.keys()):"
        ],
        "context_after": [
            "else:",
            "print(\"No ImageWidth\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 48,
        "column": 25,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "get_meta_from_pic",
        "line_content": "if ('ExifImageHeight' in labeled.keys()):",
        "line_number": 48,
        "context_before": [
            "print(\"No ImageWidth\")",
            ""
        ],
        "context_after": [
            "print(\"ImageHeight: %s\" % (labeled['ExifImageHeight']))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 49,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"ImageHeight: %s\" % (labeled['ExifImageHeight']))",
        "line_number": 49,
        "context_before": [
            "",
            "if ('ExifImageHeight' in labeled.keys()):"
        ],
        "context_after": [
            "else:",
            "print(\"No ImageHeight\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 53,
        "column": 26,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "get_meta_from_pic",
        "line_content": "if ('DateTimeOriginal' in labeled.keys()):",
        "line_number": 53,
        "context_before": [
            "print(\"No ImageHeight\")",
            ""
        ],
        "context_after": [
            "print(\"DateTimeOriginal: %s\" % (labeled['DateTimeOriginal']))",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 54,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"DateTimeOriginal: %s\" % (labeled['DateTimeOriginal']))",
        "line_number": 54,
        "context_before": [
            "",
            "if ('DateTimeOriginal' in labeled.keys()):"
        ],
        "context_after": [
            "else:",
            "print(\"No DateTimeOriginal\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 58,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"CreateDate: %s\" % (datetime.fromtimestamp(ctime).strftime('%Y-%m-%d %H:%M:%S')))",
        "line_number": 58,
        "context_before": [
            "print(\"No DateTimeOriginal\")",
            ""
        ],
        "context_after": [
            "print(\"Author: %s\" % (get_author(sys.argv[1])))",
            "print(\"Location: %s\" % (get_location(sys.argv[1])))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 59,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"Author: %s\" % (get_author(sys.argv[1])))",
        "line_number": 59,
        "context_before": [
            "",
            "print(\"CreateDate: %s\" % (datetime.fromtimestamp(ctime).strftime('%Y-%m-%d %H:%M:%S')))"
        ],
        "context_after": [
            "print(\"Location: %s\" % (get_location(sys.argv[1])))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 60,
        "column": 6,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "get_meta_from_pic",
        "line_content": "print(\"Location: %s\" % (get_location(sys.argv[1])))",
        "line_number": 60,
        "context_before": [
            "print(\"CreateDate: %s\" % (datetime.fromtimestamp(ctime).strftime('%Y-%m-%d %H:%M:%S')))",
            "print(\"Author: %s\" % (get_author(sys.argv[1])))"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party imports \"PIL.Image\", \"PIL.ExifTags.TAGS\", \"author_utils.get_file_security\", \"gps_utils.get_location\"",
        "module": "get_meta_from_pic",
        "line_content": "import os",
        "line_number": 5,
        "context_before": [
            "from author_utils import get_file_security, get_author",
            "from gps_utils import get_location"
        ],
        "context_after": [
            "import sys",
            "from datetime import datetime"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 6,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party imports \"PIL.Image\", \"PIL.ExifTags.TAGS\", \"author_utils.get_file_security\", \"gps_utils.get_location\"",
        "module": "get_meta_from_pic",
        "line_content": "import sys",
        "line_number": 6,
        "context_before": [
            "from gps_utils import get_location",
            "import os"
        ],
        "context_after": [
            "from datetime import datetime",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 7,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"datetime.datetime\" should be placed before third party imports \"PIL.Image\", \"PIL.ExifTags.TAGS\", \"author_utils.get_file_security\", \"gps_utils.get_location\"",
        "module": "get_meta_from_pic",
        "line_content": "from datetime import datetime",
        "line_number": 7,
        "context_before": [
            "import os",
            "import sys"
        ],
        "context_after": [
            "",
            "def get_exif(image):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/get_meta_from_pic.py",
        "line": 3,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused get_file_security imported from author_utils",
        "module": "get_meta_from_pic",
        "line_content": "from author_utils import get_file_security, get_author",
        "line_number": 3,
        "context_before": [
            "from PIL import Image",
            "from PIL.ExifTags import TAGS"
        ],
        "context_after": [
            "from gps_utils import get_location",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 6,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "list_tmp=str(data).replace('[', '').replace(']', '').split(',')",
        "line_number": 6,
        "context_before": [
            "",
            "def format_lati_long(data):"
        ],
        "context_after": [
            "list=[ele.strip() for ele in list_tmp]",
            "if (list[-1].find('/') != -1):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 7,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "list=[ele.strip() for ele in list_tmp]",
        "line_number": 7,
        "context_before": [
            "def format_lati_long(data):",
            "list_tmp=str(data).replace('[', '').replace(']', '').split(',')"
        ],
        "context_after": [
            "if (list[-1].find('/') != -1):",
            "data_sec = int(list[-1].split('/')[0]) /(int(list[-1].split('/')[1])*3600)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 8,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "if (list[-1].find('/') != -1):",
        "line_number": 8,
        "context_before": [
            "list_tmp=str(data).replace('[', '').replace(']', '').split(',')",
            "list=[ele.strip() for ele in list_tmp]"
        ],
        "context_after": [
            "data_sec = int(list[-1].split('/')[0]) /(int(list[-1].split('/')[1])*3600)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 8,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "gps_utils",
        "line_content": "if (list[-1].find('/') != -1):",
        "line_number": 8,
        "context_before": [
            "list_tmp=str(data).replace('[', '').replace(']', '').split(',')",
            "list=[ele.strip() for ele in list_tmp]"
        ],
        "context_after": [
            "data_sec = int(list[-1].split('/')[0]) /(int(list[-1].split('/')[1])*3600)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 9,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "gps_utils",
        "line_content": "data_sec = int(list[-1].split('/')[0]) /(int(list[-1].split('/')[1])*3600)",
        "line_number": 9,
        "context_before": [
            "list=[ele.strip() for ele in list_tmp]",
            "if (list[-1].find('/') != -1):"
        ],
        "context_after": [
            "else:",
            "data_sec = int(list[-1])/3600"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 10,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "else:",
        "line_number": 10,
        "context_before": [
            "if (list[-1].find('/') != -1):",
            "data_sec = int(list[-1].split('/')[0]) /(int(list[-1].split('/')[1])*3600)"
        ],
        "context_after": [
            "data_sec = int(list[-1])/3600",
            "data_minute = int(list[1])/60"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 11,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "gps_utils",
        "line_content": "data_sec = int(list[-1])/3600",
        "line_number": 11,
        "context_before": [
            "data_sec = int(list[-1].split('/')[0]) /(int(list[-1].split('/')[1])*3600)",
            "else:"
        ],
        "context_after": [
            "data_minute = int(list[1])/60",
            "data_degree = int(list[0])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 12,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "data_minute = int(list[1])/60",
        "line_number": 12,
        "context_before": [
            "else:",
            "data_sec = int(list[-1])/3600"
        ],
        "context_after": [
            "data_degree = int(list[0])",
            "result=data_degree + data_minute + data_sec"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 13,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "data_degree = int(list[0])",
        "line_number": 13,
        "context_before": [
            "data_sec = int(list[-1])/3600",
            "data_minute = int(list[1])/60"
        ],
        "context_after": [
            "result=data_degree + data_minute + data_sec",
            "return result"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 14,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "result=data_degree + data_minute + data_sec",
        "line_number": 14,
        "context_before": [
            "data_minute = int(list[1])/60",
            "data_degree = int(list[0])"
        ],
        "context_after": [
            "return result",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 15,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "gps_utils",
        "line_content": "return result",
        "line_number": 15,
        "context_before": [
            "data_degree = int(list[0])",
            "result=data_degree + data_minute + data_sec"
        ],
        "context_after": [
            "",
            "def get_location(filename):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 23,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "gps_utils",
        "line_content": "return position.address",
        "line_number": 23,
        "context_before": [
            "geolocator = Nominatim(user_agent = \"your email\")",
            "position = geolocator.reverse(str(latitude) + ',' + str(longitude))"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'exifread'",
        "module": "gps_utils",
        "line_content": "import exifread",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            "from geopy.geocoders import Nominatim"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "gps_utils",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "import exifread"
        ],
        "context_after": [
            "from geopy.geocoders import Nominatim",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'geopy.geocoders'",
        "module": "gps_utils",
        "line_content": "from geopy.geocoders import Nominatim",
        "line_number": 3,
        "context_before": [
            "import exifread",
            "import requests"
        ],
        "context_after": [
            "",
            "def format_lati_long(data):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 7,
        "column": 1,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'list'",
        "module": "gps_utils",
        "line_content": "list=[ele.strip() for ele in list_tmp]",
        "line_number": 7,
        "context_before": [
            "def format_lati_long(data):",
            "list_tmp=str(data).replace('[', '').replace(']', '').split(',')"
        ],
        "context_after": [
            "if (list[-1].find('/') != -1):",
            "data_sec = int(list[-1].split('/')[0]) /(int(list[-1].split('/')[1])*3600)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 18,
        "column": 30,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "gps_utils",
        "line_content": "img=exifread.process_file(open(filename,'rb'))",
        "line_number": 18,
        "context_before": [
            "",
            "def get_location(filename):"
        ],
        "context_after": [
            "latitude=format_lati_long(str(img['GPS GPSLatitude']))",
            "longitude=format_lati_long(str(img['GPS GPSLongitude']))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_meta_information_of_images/gps_utils.py",
        "line": 2,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import requests",
        "module": "gps_utils",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "import exifread"
        ],
        "context_after": [
            "from geopy.geocoders import Nominatim",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Hashing_passwords/hashing_passwords.py",
        "line": 9,
        "column": 26,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "hashing_passwords",
        "line_content": "args = parser.parse_args()",
        "line_number": 9,
        "context_before": [
            "parser.add_argument('password', help='input password you want to hash')",
            "parser.add_argument('-t', '--type', default='sha256',choices=['sha256', 'sha512', 'md5'] )"
        ],
        "context_after": [
            "",
            "# hashing given password"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 24,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 24,
        "context_before": [
            "bvn = [str(i) for i in range (5)]",
            "gen_bvn= \"\".join(bvn)"
        ],
        "context_after": [
            "",
            "def open_acct( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 25,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 25,
        "context_before": [
            "gen_bvn= \"\".join(bvn)",
            ""
        ],
        "context_after": [
            "def open_acct( ):",
            "global gen_bvn"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 27,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "global gen_bvn",
        "line_number": 27,
        "context_before": [
            "",
            "def open_acct( ):"
        ],
        "context_after": [
            "print(\"Welcome to our online Account opening services.\")",
            "print(\"loading...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 28,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"Welcome to our online Account opening services.\")",
        "line_number": 28,
        "context_before": [
            "def open_acct( ):",
            "global gen_bvn"
        ],
        "context_after": [
            "print(\"loading...\")",
            "# creating an empty list to serve as a temporary place holder."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 29,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"loading...\")",
        "line_number": 29,
        "context_before": [
            "global gen_bvn",
            "print(\"Welcome to our online Account opening services.\")"
        ],
        "context_after": [
            "# creating an empty list to serve as a temporary place holder.",
            "temp_storage= [ ]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 31,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "temp_storage= [ ]",
        "line_number": 31,
        "context_before": [
            "print(\"loading...\")",
            "# creating an empty list to serve as a temporary place holder."
        ],
        "context_after": [
            "f_name= input(\"Enter your first name:\")",
            "s_name= input (\"Enter your second name:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 32,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "f_name= input(\"Enter your first name:\")",
        "line_number": 32,
        "context_before": [
            "# creating an empty list to serve as a temporary place holder.",
            "temp_storage= [ ]"
        ],
        "context_after": [
            "s_name= input (\"Enter your second name:\")",
            "sex = input(\"Enter sex [M/F]:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 33,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "s_name= input (\"Enter your second name:\")",
        "line_number": 33,
        "context_before": [
            "temp_storage= [ ]",
            "f_name= input(\"Enter your first name:\")"
        ],
        "context_after": [
            "sex = input(\"Enter sex [M/F]:\")",
            "BVN_checker( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 34,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "sex = input(\"Enter sex [M/F]:\")",
        "line_number": 34,
        "context_before": [
            "f_name= input(\"Enter your first name:\")",
            "s_name= input (\"Enter your second name:\")"
        ],
        "context_after": [
            "BVN_checker( )",
            "temp_storage.append(f_name)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 35,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "BVN_checker( )",
        "line_number": 35,
        "context_before": [
            "s_name= input (\"Enter your second name:\")",
            "sex = input(\"Enter sex [M/F]:\")"
        ],
        "context_after": [
            "temp_storage.append(f_name)",
            "temp_storage.append(s_name)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 36,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "temp_storage.append(f_name)",
        "line_number": 36,
        "context_before": [
            "sex = input(\"Enter sex [M/F]:\")",
            "BVN_checker( )"
        ],
        "context_after": [
            "temp_storage.append(s_name)",
            "temp_storage.append(sex)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 37,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "temp_storage.append(s_name)",
        "line_number": 37,
        "context_before": [
            "BVN_checker( )",
            "temp_storage.append(f_name)"
        ],
        "context_after": [
            "temp_storage.append(sex)",
            "temp_storage.append(gen_bvn)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 38,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "temp_storage.append(sex)",
        "line_number": 38,
        "context_before": [
            "temp_storage.append(f_name)",
            "temp_storage.append(s_name)"
        ],
        "context_after": [
            "temp_storage.append(gen_bvn)",
            "details= \" \".join(temp_storage)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 39,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "temp_storage.append(gen_bvn)",
        "line_number": 39,
        "context_before": [
            "temp_storage.append(s_name)",
            "temp_storage.append(sex)"
        ],
        "context_after": [
            "details= \" \".join(temp_storage)",
            "split_details = details.split(\" \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 40,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "details= \" \".join(temp_storage)",
        "line_number": 40,
        "context_before": [
            "temp_storage.append(sex)",
            "temp_storage.append(gen_bvn)"
        ],
        "context_after": [
            "split_details = details.split(\" \")",
            "#print(split_details)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 41,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "split_details = details.split(\" \")",
        "line_number": 41,
        "context_before": [
            "temp_storage.append(gen_bvn)",
            "details= \" \".join(temp_storage)"
        ],
        "context_after": [
            "#print(split_details)",
            "print(split_details[0]+\" \"+split_details[1])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 43,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(split_details[0]+\" \"+split_details[1])",
        "line_number": 43,
        "context_before": [
            "split_details = details.split(\" \")",
            "#print(split_details)"
        ],
        "context_after": [
            "print(split_details[2])",
            "print(\"Your bvn is :\"+split_details[3])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 44,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(split_details[2])",
        "line_number": 44,
        "context_before": [
            "#print(split_details)",
            "print(split_details[0]+\" \"+split_details[1])"
        ],
        "context_after": [
            "print(\"Your bvn is :\"+split_details[3])",
            "print(\"1. Press # to go back to options menu\\n2. Press * to exit\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 45,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"Your bvn is :\"+split_details[3])",
        "line_number": 45,
        "context_before": [
            "print(split_details[0]+\" \"+split_details[1])",
            "print(split_details[2])"
        ],
        "context_after": [
            "print(\"1. Press # to go back to options menu\\n2. Press * to exit\")",
            "bck=input(\":\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 46,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"1. Press # to go back to options menu\\n2. Press * to exit\")",
        "line_number": 46,
        "context_before": [
            "print(split_details[2])",
            "print(\"Your bvn is :\"+split_details[3])"
        ],
        "context_after": [
            "bck=input(\":\")",
            "if bck=='#':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 47,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "bck=input(\":\")",
        "line_number": 47,
        "context_before": [
            "print(\"Your bvn is :\"+split_details[3])",
            "print(\"1. Press # to go back to options menu\\n2. Press * to exit\")"
        ],
        "context_after": [
            "if bck=='#':",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 48,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "if bck=='#':",
        "line_number": 48,
        "context_before": [
            "print(\"1. Press # to go back to options menu\\n2. Press * to exit\")",
            "bck=input(\":\")"
        ],
        "context_after": [
            "options_menu( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 49,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 49,
        "context_before": [
            "bck=input(\":\")",
            "if bck=='#':"
        ],
        "context_after": [
            "else:",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 50,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 50,
        "context_before": [
            "if bck=='#':",
            "options_menu( )"
        ],
        "context_after": [
            "sys.exit( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 51,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 51,
        "context_before": [
            "options_menu( )",
            "else:"
        ],
        "context_after": [
            "",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 52,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 52,
        "context_before": [
            "else:",
            "sys.exit( )"
        ],
        "context_after": [
            "exit( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 53,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 53,
        "context_before": [
            "sys.exit( )",
            ""
        ],
        "context_after": [
            "",
            "def upgrade_migrate( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 54,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 54,
        "context_before": [
            "",
            "exit( )"
        ],
        "context_after": [
            "def upgrade_migrate( ):",
            "print(\"Welcome to our online Upgrade/Migration services.\\n 1. Ugrade\\n 2. Migrate\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 56,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"Welcome to our online Upgrade/Migration services.\\n 1. Ugrade\\n 2. Migrate\")",
        "line_number": 56,
        "context_before": [
            "",
            "def upgrade_migrate( ):"
        ],
        "context_after": [
            "print(\"press # is go back to the Main Menu.\")",
            "prompt = input(\"Enter preferred Choice:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 57,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"press # is go back to the Main Menu.\")",
        "line_number": 57,
        "context_before": [
            "def upgrade_migrate( ):",
            "print(\"Welcome to our online Upgrade/Migration services.\\n 1. Ugrade\\n 2. Migrate\")"
        ],
        "context_after": [
            "prompt = input(\"Enter preferred Choice:\")",
            "if prompt==\"1\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 58,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "prompt = input(\"Enter preferred Choice:\")",
        "line_number": 58,
        "context_before": [
            "print(\"Welcome to our online Upgrade/Migration services.\\n 1. Ugrade\\n 2. Migrate\")",
            "print(\"press # is go back to the Main Menu.\")"
        ],
        "context_after": [
            "if prompt==\"1\":",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 59,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "if prompt==\"1\":",
        "line_number": 59,
        "context_before": [
            "print(\"press # is go back to the Main Menu.\")",
            "prompt = input(\"Enter preferred Choice:\")"
        ],
        "context_after": [
            "time.sleep(5)",
            "print(\"Upgrading...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 60,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 60,
        "context_before": [
            "prompt = input(\"Enter preferred Choice:\")",
            "if prompt==\"1\":"
        ],
        "context_after": [
            "print(\"Upgrading...\")",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 61,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "print(\"Upgrading...\")",
        "line_number": 61,
        "context_before": [
            "if prompt==\"1\":",
            "time.sleep(5)"
        ],
        "context_after": [
            "exit( )",
            "elif prompt == \"2\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 62,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 62,
        "context_before": [
            "time.sleep(5)",
            "print(\"Upgrading...\")"
        ],
        "context_after": [
            "elif prompt == \"2\":",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 63,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "elif prompt == \"2\":",
        "line_number": 63,
        "context_before": [
            "print(\"Upgrading...\")",
            "exit( )"
        ],
        "context_after": [
            "time.sleep(5)",
            "print(\"Migrating...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 64,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 64,
        "context_before": [
            "exit( )",
            "elif prompt == \"2\":"
        ],
        "context_after": [
            "print(\"Migrating...\")",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 65,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "print(\"Migrating...\")",
        "line_number": 65,
        "context_before": [
            "elif prompt == \"2\":",
            "time.sleep(5)"
        ],
        "context_after": [
            "exit( )",
            "elif prompt == \"#\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 66,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 66,
        "context_before": [
            "time.sleep(5)",
            "print(\"Migrating...\")"
        ],
        "context_after": [
            "elif prompt == \"#\":",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 67,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "elif prompt == \"#\":",
        "line_number": 67,
        "context_before": [
            "print(\"Migrating...\")",
            "exit( )"
        ],
        "context_after": [
            "options_menu( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 68,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 68,
        "context_before": [
            "exit( )",
            "elif prompt == \"#\":"
        ],
        "context_after": [
            "else:",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 69,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 69,
        "context_before": [
            "elif prompt == \"#\":",
            "options_menu( )"
        ],
        "context_after": [
            "sys.exit( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 70,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 70,
        "context_before": [
            "options_menu( )",
            "else:"
        ],
        "context_after": [
            "",
            "def balance ( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 73,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"ACCOUNT\\tBALANCE\\n CHECKER\")",
        "line_number": 73,
        "context_before": [
            "",
            "def balance ( ):"
        ],
        "context_after": [
            "print(\"press # is go back to the Main Menu.\")",
            "pin=input(\"Enter your 4 digit pin:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 74,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"press # is go back to the Main Menu.\")",
        "line_number": 74,
        "context_before": [
            "def balance ( ):",
            "print(\"ACCOUNT\\tBALANCE\\n CHECKER\")"
        ],
        "context_after": [
            "pin=input(\"Enter your 4 digit pin:\")",
            "# isdigit( ) is used to  check for digits within a str while the nested if is used to make sure the user inputs 4 digits."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 75,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "pin=input(\"Enter your 4 digit pin:\")",
        "line_number": 75,
        "context_before": [
            "print(\"ACCOUNT\\tBALANCE\\n CHECKER\")",
            "print(\"press # is go back to the Main Menu.\")"
        ],
        "context_after": [
            "# isdigit( ) is used to  check for digits within a str while the nested if is used to make sure the user inputs 4 digits.",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 76,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "ussdtim",
        "line_content": "# isdigit( ) is used to  check for digits within a str while the nested if is used to make sure the user inputs 4 digits.",
        "line_number": 76,
        "context_before": [
            "print(\"press # is go back to the Main Menu.\")",
            "pin=input(\"Enter your 4 digit pin:\")"
        ],
        "context_after": [
            "",
            "###```i am to put the pin trial in a while loop```###REMINDER!!!"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 80,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "if len(pin)!=4:",
        "line_number": 80,
        "context_before": [
            "###```i am to put the pin trial in a while loop```###REMINDER!!!",
            ""
        ],
        "context_after": [
            "print(\"Make sure its a 4digit pin.\")",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 81,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "print(\"Make sure its a 4digit pin.\")",
        "line_number": 81,
        "context_before": [
            "",
            "if len(pin)!=4:"
        ],
        "context_after": [
            "time.sleep(5)",
            "balance( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 82,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 82,
        "context_before": [
            "if len(pin)!=4:",
            "print(\"Make sure its a 4digit pin.\")"
        ],
        "context_after": [
            "balance( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 83,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "balance( )",
        "line_number": 83,
        "context_before": [
            "print(\"Make sure its a 4digit pin.\")",
            "time.sleep(5)"
        ],
        "context_after": [
            "else:",
            "if pin.isdigit( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 84,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 84,
        "context_before": [
            "time.sleep(5)",
            "balance( )"
        ],
        "context_after": [
            "if pin.isdigit( ):",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 85,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "if pin.isdigit( ):",
        "line_number": 85,
        "context_before": [
            "balance( )",
            "else:"
        ],
        "context_after": [
            "time.sleep(5)",
            "print(\"Loading...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 86,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 86,
        "context_before": [
            "else:",
            "if pin.isdigit( ):"
        ],
        "context_after": [
            "print(\"Loading...\")",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 87,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "print(\"Loading...\")",
        "line_number": 87,
        "context_before": [
            "if pin.isdigit( ):",
            "time.sleep(5)"
        ],
        "context_after": [
            "exit( )",
            "elif pin== \"#\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 88,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 88,
        "context_before": [
            "time.sleep(5)",
            "print(\"Loading...\")"
        ],
        "context_after": [
            "elif pin== \"#\":",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 89,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "elif pin== \"#\":",
        "line_number": 89,
        "context_before": [
            "print(\"Loading...\")",
            "exit( )"
        ],
        "context_after": [
            "options_menu( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 90,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 90,
        "context_before": [
            "exit( )",
            "elif pin== \"#\":"
        ],
        "context_after": [
            "else:",
            "time.sleep(15)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 91,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 91,
        "context_before": [
            "elif pin== \"#\":",
            "options_menu( )"
        ],
        "context_after": [
            "time.sleep(15)",
            "print(\"wrong pin\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 92,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "time.sleep(15)",
        "line_number": 92,
        "context_before": [
            "options_menu( )",
            "else:"
        ],
        "context_after": [
            "print(\"wrong pin\")",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 93,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "print(\"wrong pin\")",
        "line_number": 93,
        "context_before": [
            "else:",
            "time.sleep(15)"
        ],
        "context_after": [
            "sys.exit( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 94,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 94,
        "context_before": [
            "time.sleep(15)",
            "print(\"wrong pin\")"
        ],
        "context_after": [
            "",
            "def transf( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 95,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 95,
        "context_before": [
            "print(\"wrong pin\")",
            "sys.exit( )"
        ],
        "context_after": [
            "def transf( ):",
            "print(\"1. Transfer self\\n2. Transfer others\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 97,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"1. Transfer self\\n2. Transfer others\")",
        "line_number": 97,
        "context_before": [
            "",
            "def transf( ):"
        ],
        "context_after": [
            "print(\"press # is go back to the Main Menu.\")",
            "trnsf=input(\":\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 98,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"press # is go back to the Main Menu.\")",
        "line_number": 98,
        "context_before": [
            "def transf( ):",
            "print(\"1. Transfer self\\n2. Transfer others\")"
        ],
        "context_after": [
            "trnsf=input(\":\")",
            "if trnsf == \"#\" :"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 99,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "trnsf=input(\":\")",
        "line_number": 99,
        "context_before": [
            "print(\"1. Transfer self\\n2. Transfer others\")",
            "print(\"press # is go back to the Main Menu.\")"
        ],
        "context_after": [
            "if trnsf == \"#\" :",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 100,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "if trnsf == \"#\" :",
        "line_number": 100,
        "context_before": [
            "print(\"press # is go back to the Main Menu.\")",
            "trnsf=input(\":\")"
        ],
        "context_after": [
            "options_menu( )",
            "elif trnsf == \"1\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 101,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 101,
        "context_before": [
            "trnsf=input(\":\")",
            "if trnsf == \"#\" :"
        ],
        "context_after": [
            "elif trnsf == \"1\":",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 102,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "elif trnsf == \"1\":",
        "line_number": 102,
        "context_before": [
            "if trnsf == \"#\" :",
            "options_menu( )"
        ],
        "context_after": [
            "time.sleep(5)",
            "print(\"Sending...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 103,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 103,
        "context_before": [
            "options_menu( )",
            "elif trnsf == \"1\":"
        ],
        "context_after": [
            "print(\"Sending...\")",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 104,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "print(\"Sending...\")",
        "line_number": 104,
        "context_before": [
            "elif trnsf == \"1\":",
            "time.sleep(5)"
        ],
        "context_after": [
            "exit( )",
            "elif trnsf==\"2\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 105,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 105,
        "context_before": [
            "time.sleep(5)",
            "print(\"Sending...\")"
        ],
        "context_after": [
            "elif trnsf==\"2\":",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 106,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "elif trnsf==\"2\":",
        "line_number": 106,
        "context_before": [
            "print(\"Sending...\")",
            "exit( )"
        ],
        "context_after": [
            "time.sleep(5)",
            "num=int(input(\"Enter receivers mobile number:\"))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 107,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 107,
        "context_before": [
            "exit( )",
            "elif trnsf==\"2\":"
        ],
        "context_after": [
            "num=int(input(\"Enter receivers mobile number:\"))",
            "print(\"Transferring to\",num)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 108,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "num=int(input(\"Enter receivers mobile number:\"))",
        "line_number": 108,
        "context_before": [
            "elif trnsf==\"2\":",
            "time.sleep(5)"
        ],
        "context_after": [
            "print(\"Transferring to\",num)",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 109,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "print(\"Transferring to\",num)",
        "line_number": 109,
        "context_before": [
            "time.sleep(5)",
            "num=int(input(\"Enter receivers mobile number:\"))"
        ],
        "context_after": [
            "exit( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 110,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 110,
        "context_before": [
            "num=int(input(\"Enter receivers mobile number:\"))",
            "print(\"Transferring to\",num)"
        ],
        "context_after": [
            "else:",
            "if trnsf.isdigit( )!= True:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 111,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 111,
        "context_before": [
            "print(\"Transferring to\",num)",
            "exit( )"
        ],
        "context_after": [
            "if trnsf.isdigit( )!= True:",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 112,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "if trnsf.isdigit( )!= True:",
        "line_number": 112,
        "context_before": [
            "exit( )",
            "else:"
        ],
        "context_after": [
            "time.sleep(5)",
            "print(\"Not an option\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 113,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 113,
        "context_before": [
            "else:",
            "if trnsf.isdigit( )!= True:"
        ],
        "context_after": [
            "print(\"Not an option\")",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 114,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "print(\"Not an option\")",
        "line_number": 114,
        "context_before": [
            "if trnsf.isdigit( )!= True:",
            "time.sleep(5)"
        ],
        "context_after": [
            "sys.exit( )",
            "elif trnsf.isdigit( ) and len(trnsf)>2:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 115,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 115,
        "context_before": [
            "time.sleep(5)",
            "print(\"Not an option\")"
        ],
        "context_after": [
            "elif trnsf.isdigit( ) and len(trnsf)>2:",
            "time.sleep( 5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 116,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "elif trnsf.isdigit( ) and len(trnsf)>2:",
        "line_number": 116,
        "context_before": [
            "print(\"Not an option\")",
            "sys.exit( )"
        ],
        "context_after": [
            "time.sleep( 5)",
            "print(\"wrong password.\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 117,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "time.sleep( 5)",
        "line_number": 117,
        "context_before": [
            "sys.exit( )",
            "elif trnsf.isdigit( ) and len(trnsf)>2:"
        ],
        "context_after": [
            "print(\"wrong password.\")",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 118,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "print(\"wrong password.\")",
        "line_number": 118,
        "context_before": [
            "elif trnsf.isdigit( ) and len(trnsf)>2:",
            "time.sleep( 5)"
        ],
        "context_after": [
            "sys.exit( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 119,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 119,
        "context_before": [
            "time.sleep( 5)",
            "print(\"wrong password.\")"
        ],
        "context_after": [
            "else:",
            "time.sleep(10)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 120,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 120,
        "context_before": [
            "print(\"wrong password.\")",
            "sys.exit( )"
        ],
        "context_after": [
            "time.sleep(10)",
            "print(\"An error has occurred\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 121,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "time.sleep(10)",
        "line_number": 121,
        "context_before": [
            "sys.exit( )",
            "else:"
        ],
        "context_after": [
            "print(\"An error has occurred\")",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 122,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "print(\"An error has occurred\")",
        "line_number": 122,
        "context_before": [
            "else:",
            "time.sleep(10)"
        ],
        "context_after": [
            "sys.exit( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 123,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 123,
        "context_before": [
            "time.sleep(10)",
            "print(\"An error has occurred\")"
        ],
        "context_after": [
            "",
            "def funds( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 124,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 124,
        "context_before": [
            "print(\"An error has occurred\")",
            "sys.exit( )"
        ],
        "context_after": [
            "def funds( ):",
            "time.sleep(3)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 126,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "time.sleep(3)",
        "line_number": 126,
        "context_before": [
            "",
            "def funds( ):"
        ],
        "context_after": [
            "print(bank_list)",
            "bnk = input(\"Select receipients Bank:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 127,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(bank_list)",
        "line_number": 127,
        "context_before": [
            "def funds( ):",
            "time.sleep(3)"
        ],
        "context_after": [
            "bnk = input(\"Select receipients Bank:\")",
            "acc_num= input(\"Entet account number:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 128,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "bnk = input(\"Select receipients Bank:\")",
        "line_number": 128,
        "context_before": [
            "time.sleep(3)",
            "print(bank_list)"
        ],
        "context_after": [
            "acc_num= input(\"Entet account number:\")",
            "print(\"Sending to\",acc_num)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 129,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "acc_num= input(\"Entet account number:\")",
        "line_number": 129,
        "context_before": [
            "print(bank_list)",
            "bnk = input(\"Select receipients Bank:\")"
        ],
        "context_after": [
            "print(\"Sending to\",acc_num)",
            "hash= input(\"1.Press # to go back to options menu\\n2. Press * to go exit.\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 130,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"Sending to\",acc_num)",
        "line_number": 130,
        "context_before": [
            "bnk = input(\"Select receipients Bank:\")",
            "acc_num= input(\"Entet account number:\")"
        ],
        "context_after": [
            "hash= input(\"1.Press # to go back to options menu\\n2. Press * to go exit.\")",
            "if hash == \"#\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 131,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "hash= input(\"1.Press # to go back to options menu\\n2. Press * to go exit.\")",
        "line_number": 131,
        "context_before": [
            "acc_num= input(\"Entet account number:\")",
            "print(\"Sending to\",acc_num)"
        ],
        "context_after": [
            "if hash == \"#\":",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 132,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "if hash == \"#\":",
        "line_number": 132,
        "context_before": [
            "print(\"Sending to\",acc_num)",
            "hash= input(\"1.Press # to go back to options menu\\n2. Press * to go exit.\")"
        ],
        "context_after": [
            "options_menu( )",
            "elif hash == \"*\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 133,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 133,
        "context_before": [
            "hash= input(\"1.Press # to go back to options menu\\n2. Press * to go exit.\")",
            "if hash == \"#\":"
        ],
        "context_after": [
            "elif hash == \"*\":",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 134,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "elif hash == \"*\":",
        "line_number": 134,
        "context_before": [
            "if hash == \"#\":",
            "options_menu( )"
        ],
        "context_after": [
            "exit( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 135,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 135,
        "context_before": [
            "options_menu( )",
            "elif hash == \"*\":"
        ],
        "context_after": [
            "else:",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 136,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 136,
        "context_before": [
            "elif hash == \"*\":",
            "exit( )"
        ],
        "context_after": [
            "sys.exit( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 137,
        "column": 25,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 137,
        "context_before": [
            "exit( )",
            "else:"
        ],
        "context_after": [
            "",
            "#--------------------------------------------------"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 137,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 137,
        "context_before": [
            "exit( )",
            "else:"
        ],
        "context_after": [
            "",
            "#--------------------------------------------------"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 139,
        "column": 67,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "#--------------------------------------------------",
        "line_number": 139,
        "context_before": [
            "sys.exit( )",
            ""
        ],
        "context_after": [
            "###i'm yet to catch an error for non -digit and more than one digit###REMINDER!!!\t\t\t\t\t\t#-#------------------------------------------------------",
            "# This is the function for options."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 140,
        "column": 144,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "###i'm yet to catch an error for non -digit and more than one digit###REMINDER!!!\t\t\t\t\t\t#-#------------------------------------------------------",
        "line_number": 140,
        "context_before": [
            "",
            "#--------------------------------------------------"
        ],
        "context_after": [
            "# This is the function for options.",
            "def options_menu( ) :"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 140,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (144/100)",
        "module": "ussdtim",
        "line_content": "###i'm yet to catch an error for non -digit and more than one digit###REMINDER!!!\t\t\t\t\t\t#-#------------------------------------------------------",
        "line_number": 140,
        "context_before": [
            "",
            "#--------------------------------------------------"
        ],
        "context_after": [
            "# This is the function for options.",
            "def options_menu( ) :"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 143,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "print(\"1. Open Account\\n2. Upgrade/Migrate\\n3. Balance\\n4. Transfer\\n5. Funds\")",
        "line_number": 143,
        "context_before": [
            "# This is the function for options.",
            "def options_menu( ) :"
        ],
        "context_after": [
            "select_options ={",
            "'1':open_acct,"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 144,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "select_options ={",
        "line_number": 144,
        "context_before": [
            "def options_menu( ) :",
            "print(\"1. Open Account\\n2. Upgrade/Migrate\\n3. Balance\\n4. Transfer\\n5. Funds\")"
        ],
        "context_after": [
            "'1':open_acct,",
            "'2':upgrade_migrate,"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 150,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "choice=input(\"Enter an option:\")",
        "line_number": 150,
        "context_before": [
            "'4':transf,",
            "'5':funds}"
        ],
        "context_after": [
            "if select_options.get(choice):",
            "select_options[choice]()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 151,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "if select_options.get(choice):",
        "line_number": 151,
        "context_before": [
            "'5':funds}",
            "choice=input(\"Enter an option:\")"
        ],
        "context_after": [
            "select_options[choice]()",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 152,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "select_options[choice]()",
        "line_number": 152,
        "context_before": [
            "choice=input(\"Enter an option:\")",
            "if select_options.get(choice):"
        ],
        "context_after": [
            "else:",
            "sys.exit()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 153,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 153,
        "context_before": [
            "if select_options.get(choice):",
            "select_options[choice]()"
        ],
        "context_after": [
            "sys.exit()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 154,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "sys.exit()",
        "line_number": 154,
        "context_before": [
            "select_options[choice]()",
            "else:"
        ],
        "context_after": [
            "",
            "# This is the function which prompts the user as to whether the user wishes to continue or stop transaction."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 155,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 155,
        "context_before": [
            "else:",
            "sys.exit()"
        ],
        "context_after": [
            "# This is the function which prompts the user as to whether the user wishes to continue or stop transaction.",
            "def exit( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 156,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (108/100)",
        "module": "ussdtim",
        "line_content": "# This is the function which prompts the user as to whether the user wishes to continue or stop transaction.",
        "line_number": 156,
        "context_before": [
            "sys.exit()",
            ""
        ],
        "context_after": [
            "def exit( ):",
            "exit= input(\"Do you wish to make another transaction [Y/N] :\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 158,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "exit= input(\"Do you wish to make another transaction [Y/N] :\")",
        "line_number": 158,
        "context_before": [
            "# This is the function which prompts the user as to whether the user wishes to continue or stop transaction.",
            "def exit( ):"
        ],
        "context_after": [
            "if exit== \"N\":",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 159,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "if exit== \"N\":",
        "line_number": 159,
        "context_before": [
            "def exit( ):",
            "exit= input(\"Do you wish to make another transaction [Y/N] :\")"
        ],
        "context_after": [
            "sys.exit( )",
            "elif exit == \"#\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 160,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 160,
        "context_before": [
            "exit= input(\"Do you wish to make another transaction [Y/N] :\")",
            "if exit== \"N\":"
        ],
        "context_after": [
            "elif exit == \"#\":",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 161,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "elif exit == \"#\":",
        "line_number": 161,
        "context_before": [
            "if exit== \"N\":",
            "sys.exit( )"
        ],
        "context_after": [
            "options_menu( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 162,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 5 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 162,
        "context_before": [
            "sys.exit( )",
            "elif exit == \"#\":"
        ],
        "context_after": [
            "else:",
            "log_in( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 163,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 163,
        "context_before": [
            "elif exit == \"#\":",
            "options_menu( )"
        ],
        "context_after": [
            "log_in( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 164,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "log_in( )",
        "line_number": 164,
        "context_before": [
            "options_menu( )",
            "else:"
        ],
        "context_after": [
            "",
            "# This is the function for logging using the fast code *919#"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 165,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 165,
        "context_before": [
            "else:",
            "log_in( )"
        ],
        "context_after": [
            "# This is the function for logging using the fast code *919#",
            "def log_in( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 166,
        "column": 60,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "# This is the function for logging using the fast code *919#",
        "line_number": 166,
        "context_before": [
            "log_in( )",
            ""
        ],
        "context_after": [
            "def log_in( ):",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 173,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "ussdtim",
        "line_content": "if(USSD !=\"*919#\"):",
        "line_number": 173,
        "context_before": [
            "a+=1",
            "USSD=input(\"ENTER USSD:\")"
        ],
        "context_after": [
            "print(\"please re-enter USSD ...\")",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 174,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 14 spaces, expected 16",
        "module": "ussdtim",
        "line_content": "print(\"please re-enter USSD ...\")",
        "line_number": 174,
        "context_before": [
            "USSD=input(\"ENTER USSD:\")",
            "if(USSD !=\"*919#\"):"
        ],
        "context_after": [
            "else:",
            "print(\"Welcome to our online services how may we help you\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 176,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 13 spaces, expected 16",
        "module": "ussdtim",
        "line_content": "print(\"Welcome to our online services how may we help you\")",
        "line_number": 176,
        "context_before": [
            "print(\"please re-enter USSD ...\")",
            "else:"
        ],
        "context_after": [
            "options_menu( )",
            "exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 177,
        "column": 28,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 177,
        "context_before": [
            "else:",
            "print(\"Welcome to our online services how may we help you\")"
        ],
        "context_after": [
            "exit( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 177,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 13 spaces, expected 16",
        "module": "ussdtim",
        "line_content": "options_menu( )",
        "line_number": 177,
        "context_before": [
            "else:",
            "print(\"Welcome to our online services how may we help you\")"
        ],
        "context_after": [
            "exit( )",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 178,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 13 spaces, expected 16",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 178,
        "context_before": [
            "print(\"Welcome to our online services how may we help you\")",
            "options_menu( )"
        ],
        "context_after": [
            "else:",
            "time.sleep(10)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 180,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "time.sleep(10)",
        "line_number": 180,
        "context_before": [
            "exit( )",
            "else:"
        ],
        "context_after": [
            "print(\"checking discrepancies...\")",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 181,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "print(\"checking discrepancies...\")",
        "line_number": 181,
        "context_before": [
            "else:",
            "time.sleep(10)"
        ],
        "context_after": [
            "time.sleep(5)",
            "print(\"An error has occured.\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 182,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "time.sleep(5)",
        "line_number": 182,
        "context_before": [
            "time.sleep(10)",
            "print(\"checking discrepancies...\")"
        ],
        "context_after": [
            "print(\"An error has occured.\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 183,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "ussdtim",
        "line_content": "print(\"An error has occured.\")",
        "line_number": 183,
        "context_before": [
            "print(\"checking discrepancies...\")",
            "time.sleep(5)"
        ],
        "context_after": [
            "",
            "except:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 184,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 184,
        "context_before": [
            "time.sleep(5)",
            "print(\"An error has occured.\")"
        ],
        "context_after": [
            "except:",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 186,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 6 spaces, expected 8",
        "module": "ussdtim",
        "line_content": "sys.exit( )",
        "line_number": 186,
        "context_before": [
            "",
            "except:"
        ],
        "context_after": [
            "",
            "log_in( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 187,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "ussdtim",
        "line_content": "",
        "line_number": 187,
        "context_before": [
            "except:",
            "sys.exit( )"
        ],
        "context_after": [
            "log_in( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 188,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "ussdtim",
        "line_content": "log_in( )",
        "line_number": 188,
        "context_before": [
            "sys.exit( )",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 157,
        "column": 0,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'exit'",
        "module": "ussdtim",
        "line_content": "def exit( ):",
        "line_number": 157,
        "context_before": [
            "",
            "# This is the function which prompts the user as to whether the user wishes to continue or stop transaction."
        ],
        "context_after": [
            "exit= input(\"Do you wish to make another transaction [Y/N] :\")",
            "if exit== \"N\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"bank_list\" doesn't conform to UPPER_CASE naming style",
        "module": "ussdtim",
        "line_content": "bank_list=\"\"\"",
        "line_number": 7,
        "context_before": [
            "time.sleep(8)",
            ""
        ],
        "context_after": [
            "1. Access Bank",
            "2. Fidelity Bank"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 18,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"gen_bvn\" doesn't conform to UPPER_CASE naming style",
        "module": "ussdtim",
        "line_content": "gen_bvn = \" \"",
        "line_number": 18,
        "context_before": [
            "\"\"\"",
            ""
        ],
        "context_after": [
            "",
            "def BVN_checker( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 20,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"BVN_checker\" doesn't conform to snake_case naming style",
        "module": "ussdtim",
        "line_content": "def BVN_checker( ):",
        "line_number": 20,
        "context_before": [
            "gen_bvn = \" \"",
            ""
        ],
        "context_after": [
            "global gen_bvn",
            "bvn = [str(i) for i in range (5)]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 21,
        "column": 4,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "ussdtim",
        "line_content": "global gen_bvn",
        "line_number": 21,
        "context_before": [
            "",
            "def BVN_checker( ):"
        ],
        "context_after": [
            "bvn = [str(i) for i in range (5)]",
            "gen_bvn= \"\".join(bvn)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 27,
        "column": 1,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'gen_bvn' but no assignment is done",
        "module": "ussdtim",
        "line_content": "global gen_bvn",
        "line_number": 27,
        "context_before": [
            "",
            "def open_acct( ):"
        ],
        "context_after": [
            "print(\"Welcome to our online Account opening services.\")",
            "print(\"loading...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 53,
        "column": 1,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 53,
        "context_before": [
            "sys.exit( )",
            ""
        ],
        "context_after": [
            "",
            "def upgrade_migrate( ):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 62,
        "column": 3,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 62,
        "context_before": [
            "time.sleep(5)",
            "print(\"Upgrading...\")"
        ],
        "context_after": [
            "elif prompt == \"2\":",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 66,
        "column": 3,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 66,
        "context_before": [
            "time.sleep(5)",
            "print(\"Migrating...\")"
        ],
        "context_after": [
            "elif prompt == \"#\":",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 88,
        "column": 14,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 88,
        "context_before": [
            "time.sleep(5)",
            "print(\"Loading...\")"
        ],
        "context_after": [
            "elif pin== \"#\":",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 105,
        "column": 5,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 105,
        "context_before": [
            "time.sleep(5)",
            "print(\"Sending...\")"
        ],
        "context_after": [
            "elif trnsf==\"2\":",
            "time.sleep(5)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 110,
        "column": 5,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 110,
        "context_before": [
            "num=int(input(\"Enter receivers mobile number:\"))",
            "print(\"Transferring to\",num)"
        ],
        "context_after": [
            "else:",
            "if trnsf.isdigit( )!= True:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 112,
        "column": 8,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'trnsf.isdigit() != True' should be 'trnsf.isdigit() is not True' if checking for the singleton value True, or 'not trnsf.isdigit()' if testing for falsiness",
        "module": "ussdtim",
        "line_content": "if trnsf.isdigit( )!= True:",
        "line_number": 112,
        "context_before": [
            "exit( )",
            "else:"
        ],
        "context_after": [
            "time.sleep(5)",
            "print(\"Not an option\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 131,
        "column": 1,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'hash'",
        "module": "ussdtim",
        "line_content": "hash= input(\"1.Press # to go back to options menu\\n2. Press * to go exit.\")",
        "line_number": 131,
        "context_before": [
            "acc_num= input(\"Entet account number:\")",
            "print(\"Sending to\",acc_num)"
        ],
        "context_after": [
            "if hash == \"#\":",
            "options_menu( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 135,
        "column": 5,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 135,
        "context_before": [
            "options_menu( )",
            "elif hash == \"*\":"
        ],
        "context_after": [
            "else:",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 128,
        "column": 1,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'bnk'",
        "module": "ussdtim",
        "line_content": "bnk = input(\"Select receipients Bank:\")",
        "line_number": 128,
        "context_before": [
            "time.sleep(3)",
            "print(bank_list)"
        ],
        "context_after": [
            "acc_num= input(\"Entet account number:\")",
            "print(\"Sending to\",acc_num)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 158,
        "column": 1,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'exit' from outer scope (line 157)",
        "module": "ussdtim",
        "line_content": "exit= input(\"Do you wish to make another transaction [Y/N] :\")",
        "line_number": 158,
        "context_before": [
            "# This is the function which prompts the user as to whether the user wishes to continue or stop transaction.",
            "def exit( ):"
        ],
        "context_after": [
            "if exit== \"N\":",
            "sys.exit( )"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 185,
        "column": 4,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "ussdtim",
        "line_content": "except:",
        "line_number": 185,
        "context_before": [
            "print(\"An error has occured.\")",
            ""
        ],
        "context_after": [
            "sys.exit( )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 179,
        "column": 8,
        "message_id": "W0120",
        "message_type": "warning",
        "symbol": "useless-else-on-loop",
        "message": "Else clause on loop without a break statement, remove the else and de-indent all the code inside it",
        "module": "ussdtim",
        "line_content": "else:",
        "line_number": 179,
        "context_before": [
            "options_menu( )",
            "exit( )"
        ],
        "context_after": [
            "time.sleep(10)",
            "print(\"checking discrepancies...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 172,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"USSD\" doesn't conform to snake_case naming style",
        "module": "ussdtim",
        "line_content": "USSD=input(\"ENTER USSD:\")",
        "line_number": 172,
        "context_before": [
            "while a<3:",
            "a+=1"
        ],
        "context_after": [
            "if(USSD !=\"*919#\"):",
            "print(\"please re-enter USSD ...\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Unstructured Supplemenrary  Service Data/ussdtim.py",
        "line": 178,
        "column": 13,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "ussdtim",
        "line_content": "exit( )",
        "line_number": 178,
        "context_before": [
            "print(\"Welcome to our online services how may we help you\")",
            "options_menu( )"
        ],
        "context_after": [
            "else:",
            "time.sleep(10)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 24,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "fetch_store_tweet",
        "line_content": "csvWriter.writerow([tweet.created_at, tweet.text.encode('utf-8')])",
        "line_number": 24,
        "context_before": [
            "since=\"2017-04-03\").items():",
            "print (tweet.created_at, tweet.text)"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tweepy'",
        "module": "fetch_store_tweet",
        "line_content": "import tweepy",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import csv",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 5,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"consumer_key\" doesn't conform to UPPER_CASE naming style",
        "module": "fetch_store_tweet",
        "line_content": "consumer_key = ''",
        "line_number": 5,
        "context_before": [
            "",
            "# input your credentials here"
        ],
        "context_after": [
            "consumer_secret = ''",
            "access_token = ''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"consumer_secret\" doesn't conform to UPPER_CASE naming style",
        "module": "fetch_store_tweet",
        "line_content": "consumer_secret = ''",
        "line_number": 6,
        "context_before": [
            "# input your credentials here",
            "consumer_key = ''"
        ],
        "context_after": [
            "access_token = ''",
            "access_token_secret = ''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"access_token\" doesn't conform to UPPER_CASE naming style",
        "module": "fetch_store_tweet",
        "line_content": "access_token = ''",
        "line_number": 7,
        "context_before": [
            "consumer_key = ''",
            "consumer_secret = ''"
        ],
        "context_after": [
            "access_token_secret = ''",
            "hastag = ''"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 8,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"access_token_secret\" doesn't conform to UPPER_CASE naming style",
        "module": "fetch_store_tweet",
        "line_content": "access_token_secret = ''",
        "line_number": 8,
        "context_before": [
            "consumer_secret = ''",
            "access_token = ''"
        ],
        "context_after": [
            "hastag = ''",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 9,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"hastag\" doesn't conform to UPPER_CASE naming style",
        "module": "fetch_store_tweet",
        "line_content": "hastag = ''",
        "line_number": 9,
        "context_before": [
            "access_token = ''",
            "access_token_secret = ''"
        ],
        "context_after": [
            "",
            "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 16,
        "column": 10,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "fetch_store_tweet",
        "line_content": "csvFile = open('tweets.csv', 'a')",
        "line_number": 16,
        "context_before": [
            "",
            "# Open/Create a file to append data"
        ],
        "context_after": [
            "#Use csv Writer",
            "csvWriter = csv.writer(csvFile)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"csv\" should be placed before third party import \"tweepy\"",
        "module": "fetch_store_tweet",
        "line_content": "import csv",
        "line_number": 2,
        "context_before": [
            "import tweepy"
        ],
        "context_after": [
            "",
            "# input your credentials here"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_and_store_tweets/fetch_store_tweet.py",
        "line": 16,
        "column": 10,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "fetch_store_tweet",
        "line_content": "csvFile = open('tweets.csv', 'a')",
        "line_number": 16,
        "context_before": [
            "",
            "# Open/Create a file to append data"
        ],
        "context_after": [
            "#Use csv Writer",
            "csvWriter = csv.writer(csvFile)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_wifi_password/wifi.py",
        "line": 18,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "wifi",
        "line_content": "print(\"{:<30}|  {:<}\".format(i, results[0]))",
        "line_number": 18,
        "context_before": [
            "results = [b.split(\":\")[1][1:-1] for b in results if \"Key Content\" in b]",
            "try:"
        ],
        "context_after": [
            "except IndexError:",
            "print(\"{:<30}|  {:<}\".format(i, \"\"))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Get_wifi_password/wifi.py",
        "line": 20,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "wifi",
        "line_content": "print(\"{:<30}|  {:<}\".format(i, \"\"))",
        "line_number": 20,
        "context_before": [
            "print(\"{:<30}|  {:<}\".format(i, results[0]))",
            "except IndexError:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Qr_code_generator/generate_qrcode.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'qrcode'",
        "module": "generate_qrcode",
        "line_content": "import qrcode",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "input_URL = \"https://www.google.com/\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Qr_code_generator/generate_qrcode.py",
        "line": 3,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"input_URL\" doesn't conform to UPPER_CASE naming style",
        "module": "generate_qrcode",
        "line_content": "input_URL = \"https://www.google.com/\"",
        "line_number": 3,
        "context_before": [
            "import qrcode",
            ""
        ],
        "context_after": [
            "",
            "qr = qrcode.QRCode("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Python_auto_draw/python-auto-draw.py",
        "line": 16,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "python-auto-draw",
        "line_content": "",
        "line_number": 16,
        "context_before": [
            "# right",
            "pyautogui.dragRel(distance, 0, duration = 0.1)"
        ],
        "context_after": [
            "distance -= 5",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Python_auto_draw/python-auto-draw.py",
        "line": 29,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "python-auto-draw",
        "line_content": "",
        "line_number": 29,
        "context_before": [
            "#up",
            "pyautogui.dragRel(0, -distance, duration = 0.1)"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Python_auto_draw/python-auto-draw.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"python-auto-draw\" doesn't conform to snake_case naming style",
        "module": "python-auto-draw",
        "line_content": "import pyautogui",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Python_auto_draw/python-auto-draw.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pyautogui'",
        "module": "python-auto-draw",
        "line_content": "import pyautogui",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Python_auto_draw/python-auto-draw.py",
        "line": 11,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"distance\" doesn't conform to UPPER_CASE naming style",
        "module": "python-auto-draw",
        "line_content": "distance = 250",
        "line_number": 11,
        "context_before": [
            "",
            "# can be varied according to convininence"
        ],
        "context_after": [
            "",
            "while distance > 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Python_auto_draw/python-auto-draw.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"pyautogui\"",
        "module": "python-auto-draw",
        "line_content": "import time",
        "line_number": 2,
        "context_before": [
            "import pyautogui"
        ],
        "context_after": [
            "",
            "# time to change tabs from editor to paint;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Image_watermark/watermark.py",
        "line": 45,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "watermark",
        "line_content": "",
        "line_number": 45,
        "context_before": [
            "if f.endswith(\".png\") or f.endswith(\".jpg\"):",
            "watermark_photo(f,watermark,\"output/\"+f)"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Image_watermark/watermark.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "watermark",
        "line_content": "from PIL import Image",
        "line_number": 2,
        "context_before": [
            "import os"
        ],
        "context_after": [
            "",
            "def watermark_photo(input_image_path,watermark_image_path,output_image_path):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Image_watermark/watermark.py",
        "line": 6,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'watermark' from outer scope (line 32)",
        "module": "watermark",
        "line_content": "watermark = Image.open(watermark_image_path).convert(\"RGBA\")",
        "line_number": 6,
        "context_before": [
            "def watermark_photo(input_image_path,watermark_image_path,output_image_path):",
            "base_image = Image.open(input_image_path)"
        ],
        "context_after": [
            "# add watermark to your image",
            "position = base_image.size"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Image_watermark/watermark.py",
        "line": 40,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"c\" doesn't conform to UPPER_CASE naming style",
        "module": "watermark",
        "line_content": "c = 1",
        "line_number": 40,
        "context_before": [
            "os.mkdir(\"output\")",
            ""
        ],
        "context_after": [
            "for f in files:",
            "if os.path.isfile(os.path.abspath(f)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 25,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (113/100)",
        "module": "snake_game",
        "line_content": "square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR, tag=\"snake\")",
        "line_number": 25,
        "context_before": [
            "",
            "for x, y in self.coordinates:"
        ],
        "context_after": [
            "self.squares.append(square)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 163,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "snake_game",
        "line_content": "window.mainloop()",
        "line_number": 163,
        "context_before": [
            "next_turn(snake, food)",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 1,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "snake_game",
        "line_content": "from tkinter import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import random",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 24,
        "column": 12,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'x' from outer scope (line 148)",
        "module": "snake_game",
        "line_content": "for x, y in self.coordinates:",
        "line_number": 24,
        "context_before": [
            "self.coordinates.append([0, 0])",
            ""
        ],
        "context_after": [
            "square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR, tag=\"snake\")",
            "self.squares.append(square)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 24,
        "column": 15,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'y' from outer scope (line 149)",
        "module": "snake_game",
        "line_content": "for x, y in self.coordinates:",
        "line_number": 24,
        "context_before": [
            "self.coordinates.append([0, 0])",
            ""
        ],
        "context_after": [
            "square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR, tag=\"snake\")",
            "self.squares.append(square)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 21,
        "column": 12,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'i'",
        "module": "snake_game",
        "line_content": "for i in range(0, BODY_PARTS):",
        "line_number": 21,
        "context_before": [
            "self.squares = []",
            ""
        ],
        "context_after": [
            "self.coordinates.append([0, 0])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 14,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (0/2)",
        "module": "snake_game",
        "line_content": "class Snake:",
        "line_number": 14,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "def __init__(self):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 33,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'x' from outer scope (line 148)",
        "module": "snake_game",
        "line_content": "x = random.randint(0, (GAME_WIDTH / SPACE_SIZE)-1) * SPACE_SIZE",
        "line_number": 33,
        "context_before": [
            "def __init__(self):",
            ""
        ],
        "context_after": [
            "y = random.randint(0, (GAME_HEIGHT / SPACE_SIZE) - 1) * SPACE_SIZE",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 34,
        "column": 8,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'y' from outer scope (line 149)",
        "module": "snake_game",
        "line_content": "y = random.randint(0, (GAME_HEIGHT / SPACE_SIZE) - 1) * SPACE_SIZE",
        "line_number": 34,
        "context_before": [
            "",
            "x = random.randint(0, (GAME_WIDTH / SPACE_SIZE)-1) * SPACE_SIZE"
        ],
        "context_after": [
            "",
            "self.coordinates = [x, y]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 29,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (0/2)",
        "module": "snake_game",
        "line_content": "class Food:",
        "line_number": 29,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "def __init__(self):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 41,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'snake' from outer scope (line 158)",
        "module": "snake_game",
        "line_content": "def next_turn(snake, food):",
        "line_number": 41,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "x, y = snake.coordinates[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 41,
        "column": 21,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'food' from outer scope (line 159)",
        "module": "snake_game",
        "line_content": "def next_turn(snake, food):",
        "line_number": 41,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "x, y = snake.coordinates[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 43,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'x' from outer scope (line 148)",
        "module": "snake_game",
        "line_content": "x, y = snake.coordinates[0]",
        "line_number": 43,
        "context_before": [
            "def next_turn(snake, food):",
            ""
        ],
        "context_after": [
            "",
            "if direction == \"up\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 43,
        "column": 7,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'y' from outer scope (line 149)",
        "module": "snake_game",
        "line_content": "x, y = snake.coordinates[0]",
        "line_number": 43,
        "context_before": [
            "def next_turn(snake, food):",
            ""
        ],
        "context_after": [
            "",
            "if direction == \"up\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 62,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "snake_game",
        "line_content": "global score",
        "line_number": 62,
        "context_before": [
            "if x == food.coordinates[0] and y == food.coordinates[1]:",
            ""
        ],
        "context_after": [
            "",
            "score += 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 64,
        "column": 8,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'score'",
        "module": "snake_game",
        "line_content": "score += 1",
        "line_number": 64,
        "context_before": [
            "global score",
            ""
        ],
        "context_after": [
            "",
            "label.config(text=\"Score:{}\".format(score))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 66,
        "column": 26,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "snake_game",
        "line_content": "label.config(text=\"Score:{}\".format(score))",
        "line_number": 66,
        "context_before": [
            "score += 1",
            ""
        ],
        "context_after": [
            "",
            "canvas.delete(\"food\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 89,
        "column": 4,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "snake_game",
        "line_content": "global direction",
        "line_number": 89,
        "context_before": [
            "def change_direction(new_direction):",
            ""
        ],
        "context_after": [
            "",
            "if new_direction == 'left':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 105,
        "column": 21,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'snake' from outer scope (line 158)",
        "module": "snake_game",
        "line_content": "def check_collisions(snake):",
        "line_number": 105,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "x, y = snake.coordinates[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 107,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'x' from outer scope (line 148)",
        "module": "snake_game",
        "line_content": "x, y = snake.coordinates[0]",
        "line_number": 107,
        "context_before": [
            "def check_collisions(snake):",
            ""
        ],
        "context_after": [
            "",
            "if x < 0 or x >= GAME_WIDTH:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 107,
        "column": 7,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'y' from outer scope (line 149)",
        "module": "snake_game",
        "line_content": "x, y = snake.coordinates[0]",
        "line_number": 107,
        "context_before": [
            "def check_collisions(snake):",
            ""
        ],
        "context_after": [
            "",
            "if x < 0 or x >= GAME_WIDTH:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 109,
        "column": 4,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
        "module": "snake_game",
        "line_content": "if x < 0 or x >= GAME_WIDTH:",
        "line_number": 109,
        "context_before": [
            "x, y = snake.coordinates[0]",
            ""
        ],
        "context_after": [
            "return True",
            "elif y < 0 or y >= GAME_HEIGHT:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 132,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score\" doesn't conform to UPPER_CASE naming style",
        "module": "snake_game",
        "line_content": "score = 0",
        "line_number": 132,
        "context_before": [
            "window.resizable(False, False)",
            ""
        ],
        "context_after": [
            "direction = 'down'",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 133,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"direction\" doesn't conform to UPPER_CASE naming style",
        "module": "snake_game",
        "line_content": "direction = 'down'",
        "line_number": 133,
        "context_before": [
            "",
            "score = 0"
        ],
        "context_after": [
            "",
            "label = Label(window, text=\"Score:{}\".format(score), font=('consolas', 40))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 135,
        "column": 27,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "snake_game",
        "line_content": "label = Label(window, text=\"Score:{}\".format(score), font=('consolas', 40))",
        "line_number": 135,
        "context_before": [
            "direction = 'down'",
            ""
        ],
        "context_after": [
            "label.pack()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snake Game/snake_game.py",
        "line": 1,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, StringVar, IntVar, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, Grid, BaseWidget, Widget, Toplevel, Button, Checkbutton, Entry, Frame, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, Scrollbar, Text, OptionMenu, Image, PhotoImage, BitmapImage, image_names, image_types, Spinbox, LabelFrame, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, E, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, X, Y, BOTH, LEFT, TOP, RIGHT, BOTTOM, RAISED, SUNKEN, FLAT, RIDGE, GROOVE, SOLID, HORIZONTAL, VERTICAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, END, INSERT, CURRENT, ANCHOR, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "snake_game",
        "line_content": "from tkinter import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import random",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 4,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "website_blocker",
        "line_content": "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
        "line_number": 4,
        "context_before": [
            "",
            "if platform.system() == \"Windows\":"
        ],
        "context_after": [
            "elif platform.system() == \"Linux\":",
            "pathToHosts=r\"/etc/hosts\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 6,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "website_blocker",
        "line_content": "pathToHosts=r\"/etc/hosts\"",
        "line_number": 6,
        "context_before": [
            "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
            "elif platform.system() == \"Linux\":"
        ],
        "context_after": [
            "",
            "redirect=\"127.0.0.1\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 9,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (168/100)",
        "module": "website_blocker",
        "line_content": "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]",
        "line_number": 9,
        "context_before": [
            "",
            "redirect=\"127.0.0.1\""
        ],
        "context_after": [
            "",
            "with open(pathToHosts,'r+') as file:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 18,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "website_blocker",
        "line_content": "",
        "line_number": 18,
        "context_before": [
            "else:",
            "file.write(redirect+\" \"+site+\"\\n\")"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 4,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pathToHosts\" doesn't conform to UPPER_CASE naming style",
        "module": "website_blocker",
        "line_content": "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
        "line_number": 4,
        "context_before": [
            "",
            "if platform.system() == \"Windows\":"
        ],
        "context_after": [
            "elif platform.system() == \"Linux\":",
            "pathToHosts=r\"/etc/hosts\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 6,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pathToHosts\" doesn't conform to UPPER_CASE naming style",
        "module": "website_blocker",
        "line_content": "pathToHosts=r\"/etc/hosts\"",
        "line_number": 6,
        "context_before": [
            "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
            "elif platform.system() == \"Linux\":"
        ],
        "context_after": [
            "",
            "redirect=\"127.0.0.1\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 8,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"redirect\" doesn't conform to UPPER_CASE naming style",
        "module": "website_blocker",
        "line_content": "redirect=\"127.0.0.1\"",
        "line_number": 8,
        "context_before": [
            "pathToHosts=r\"/etc/hosts\"",
            ""
        ],
        "context_after": [
            "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 11,
        "column": 5,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "website_blocker",
        "line_content": "with open(pathToHosts,'r+') as file:",
        "line_number": 11,
        "context_before": [
            "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]",
            ""
        ],
        "context_after": [
            "content=file.read()",
            "for site in websites:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_blocker.py",
        "line": 11,
        "column": 10,
        "message_id": "E0606",
        "message_type": "error",
        "symbol": "possibly-used-before-assignment",
        "message": "Possibly using variable 'pathToHosts' before assignment",
        "module": "website_blocker",
        "line_content": "with open(pathToHosts,'r+') as file:",
        "line_number": 11,
        "context_before": [
            "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]",
            ""
        ],
        "context_after": [
            "content=file.read()",
            "for site in websites:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 4,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "website_unblocker",
        "line_content": "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
        "line_number": 4,
        "context_before": [
            "",
            "if platform.system() == \"Windows\":"
        ],
        "context_after": [
            "elif platform.system() == \"Linux\":",
            "pathToHosts=r\"/etc/hosts\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 6,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 4",
        "module": "website_unblocker",
        "line_content": "pathToHosts=r\"/etc/hosts\"",
        "line_number": 6,
        "context_before": [
            "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
            "elif platform.system() == \"Linux\":"
        ],
        "context_after": [
            "",
            "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 8,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (168/100)",
        "module": "website_unblocker",
        "line_content": "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]",
        "line_number": 8,
        "context_before": [
            "pathToHosts=r\"/etc/hosts\"",
            ""
        ],
        "context_after": [
            "",
            "with open(pathToHosts,'r+') as file:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 17,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "website_unblocker",
        "line_content": "",
        "line_number": 17,
        "context_before": [
            "file.write(line)",
            "file.truncate()"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 4,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pathToHosts\" doesn't conform to UPPER_CASE naming style",
        "module": "website_unblocker",
        "line_content": "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
        "line_number": 4,
        "context_before": [
            "",
            "if platform.system() == \"Windows\":"
        ],
        "context_after": [
            "elif platform.system() == \"Linux\":",
            "pathToHosts=r\"/etc/hosts\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 6,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pathToHosts\" doesn't conform to UPPER_CASE naming style",
        "module": "website_unblocker",
        "line_content": "pathToHosts=r\"/etc/hosts\"",
        "line_number": 6,
        "context_before": [
            "pathToHosts=r\"C:\\Windows\\System32\\drivers\\etc\\hosts\"",
            "elif platform.system() == \"Linux\":"
        ],
        "context_after": [
            "",
            "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 10,
        "column": 5,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "website_unblocker",
        "line_content": "with open(pathToHosts,'r+') as file:",
        "line_number": 10,
        "context_before": [
            "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]",
            ""
        ],
        "context_after": [
            "content=file.readlines()",
            "file.seek(0)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Website_blocker/website_unblocker.py",
        "line": 10,
        "column": 10,
        "message_id": "E0606",
        "message_type": "error",
        "symbol": "possibly-used-before-assignment",
        "message": "Possibly using variable 'pathToHosts' before assignment",
        "module": "website_unblocker",
        "line_content": "with open(pathToHosts,'r+') as file:",
        "line_number": 10,
        "context_before": [
            "websites=[\"https://www.sislovesme.com/\",\"https://motherless.com/\",\"https://xhamster.com/\",\"https://www.xnxx.com/\",\"https://www.xvideos.com/\",\"https://www.pornhub.com/\"]",
            ""
        ],
        "context_after": [
            "content=file.readlines()",
            "file.seek(0)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'Cryptodome.Cipher'",
        "module": "encrypt",
        "line_content": "from Cryptodome.Cipher import AES",
        "line_number": 3,
        "context_before": [
            "import sys",
            "import os"
        ],
        "context_after": [
            "from Cryptodome import Random",
            "from binascii import b2a_hex"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'Cryptodome'",
        "module": "encrypt",
        "line_content": "from Cryptodome import Random",
        "line_number": 4,
        "context_before": [
            "import os",
            "from Cryptodome.Cipher import AES"
        ],
        "context_after": [
            "from binascii import b2a_hex",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 8,
        "column": 16,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'path' from outer scope (line 33)",
        "module": "encrypt",
        "line_content": "def encrypt_dir(path):",
        "line_number": 8,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "for root, _, files in os.walk(\".\"):",
            "for file in files:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 8,
        "column": 16,
        "message_id": "W0613",
        "message_type": "warning",
        "symbol": "unused-argument",
        "message": "Unused argument 'path'",
        "module": "encrypt",
        "line_content": "def encrypt_dir(path):",
        "line_number": 8,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "for root, _, files in os.walk(\".\"):",
            "for file in files:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 16,
        "column": 17,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'path' from outer scope (line 33)",
        "module": "encrypt",
        "line_content": "def encrypt_file(path):",
        "line_number": 16,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# get the plaintext",
            "with open(path) as f:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 18,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "encrypt",
        "line_content": "with open(path) as f:",
        "line_number": 18,
        "context_before": [
            "def encrypt_file(path):",
            "# get the plaintext"
        ],
        "context_after": [
            "plain_text = f.read()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"binascii.b2a_hex\" should be placed before third party imports \"Cryptodome.Cipher.AES\", \"Cryptodome.Random\"",
        "module": "encrypt",
        "line_content": "from binascii import b2a_hex",
        "line_number": 5,
        "context_before": [
            "from Cryptodome.Cipher import AES",
            "from Cryptodome import Random"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Create_a_script_to_encrypt_files_and_folder/encrypt.py",
        "line": 5,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused b2a_hex imported from binascii",
        "module": "encrypt",
        "line_content": "from binascii import b2a_hex",
        "line_number": 5,
        "context_before": [
            "from Cryptodome.Cipher import AES",
            "from Cryptodome import Random"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_folder_into_subfolders/split_and_copy.py",
        "line": 7,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'path' from outer scope (line 67)",
        "module": "split_and_copy",
        "line_content": "def get_files(path):",
        "line_number": 7,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''",
            "return a list of files avialable in given folder"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_folder_into_subfolders/split_and_copy.py",
        "line": 15,
        "column": 16,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'path' from outer scope (line 67)",
        "module": "split_and_copy",
        "line_content": "def getfullpath(path):",
        "line_number": 15,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''",
            "Return absolute path of given file"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_folder_into_subfolders/split_and_copy.py",
        "line": 32,
        "column": 16,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'count' from outer scope (line 69)",
        "module": "split_and_copy",
        "line_content": "def split(data, count):",
        "line_number": 32,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "'''",
            "Split Given list of files and return generator"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_folder_into_subfolders/split_and_copy.py",
        "line": 44,
        "column": 18,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'path' from outer scope (line 67)",
        "module": "split_and_copy",
        "line_content": "def start_process(path, count):",
        "line_number": 44,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "files = get_files(path)",
            "splited_data = split(files, count)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_folder_into_subfolders/split_and_copy.py",
        "line": 44,
        "column": 24,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'count' from outer scope (line 69)",
        "module": "split_and_copy",
        "line_content": "def start_process(path, count):",
        "line_number": 44,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "files = get_files(path)",
            "splited_data = split(files, count)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_folder_into_subfolders/split_and_copy.py",
        "line": 55,
        "column": 4,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "split_and_copy",
        "line_content": "'''",
        "line_number": 55,
        "context_before": [
            "",
            "if __name__ == \"__main__\":"
        ],
        "context_after": [
            "driver code",
            "To run this script"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 19,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "EasyVideoPlayer",
        "line_content": "if(file_name == name):",
        "line_number": 19,
        "context_before": [
            "for path, subdirs, files in os.walk(directory_name):",
            "for name in files:"
        ],
        "context_after": [
            "file_path = os.path.join(path, name)",
            "files_found.append(file_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"EasyVideoPlayer\" doesn't conform to snake_case naming style",
        "module": "EasyVideoPlayer",
        "line_content": "import cv2",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "from pathlib import Path"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "EasyVideoPlayer",
        "line_content": "import cv2",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "from pathlib import Path"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'ffpyplayer.player'",
        "module": "EasyVideoPlayer",
        "line_content": "from ffpyplayer.player import MediaPlayer",
        "line_number": 4,
        "context_before": [
            "import os",
            "from pathlib import Path"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 17,
        "column": 14,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'subdirs'",
        "module": "EasyVideoPlayer",
        "line_content": "for path, subdirs, files in os.walk(directory_name):",
        "line_number": 17,
        "context_before": [
            "def find_the_video(file_name, directory_name):",
            "files_found = []"
        ],
        "context_after": [
            "for name in files:",
            "if(file_name == name):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 40,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"PlayVideo\" doesn't conform to snake_case naming style",
        "module": "EasyVideoPlayer",
        "line_content": "def PlayVideo(video_path):",
        "line_number": 40,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "video = cv2.VideoCapture(video_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 40,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'video_path' from outer scope (line 37)",
        "module": "EasyVideoPlayer",
        "line_content": "def PlayVideo(video_path):",
        "line_number": 40,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "video = cv2.VideoCapture(video_path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 55,
        "column": 12,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'img'",
        "module": "EasyVideoPlayer",
        "line_content": "img, t = audio_frame",
        "line_number": 55,
        "context_before": [
            "cv2.imshow(\"Video\", frame)",
            "if val != 'eof' and audio_frame is not None:"
        ],
        "context_after": [
            "video.release()",
            "cv2.destroyAllWindows()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 55,
        "column": 17,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 't'",
        "module": "EasyVideoPlayer",
        "line_content": "img, t = audio_frame",
        "line_number": 55,
        "context_before": [
            "cv2.imshow(\"Video\", frame)",
            "if val != 'eof' and audio_frame is not None:"
        ],
        "context_after": [
            "video.release()",
            "cv2.destroyAllWindows()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"cv2\"",
        "module": "EasyVideoPlayer",
        "line_content": "import os",
        "line_number": 2,
        "context_before": [
            "import cv2"
        ],
        "context_after": [
            "from pathlib import Path",
            "from ffpyplayer.player import MediaPlayer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/EasyVideoPlayer/EasyVideoPlayer.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"pathlib.Path\" should be placed before third party import \"cv2\"",
        "module": "EasyVideoPlayer",
        "line_content": "from pathlib import Path",
        "line_number": 3,
        "context_before": [
            "import cv2",
            "import os"
        ],
        "context_after": [
            "from ffpyplayer.player import MediaPlayer",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Check_website_connectivity/check_connectivity.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "check_connectivity",
        "line_content": "import requests",
        "line_number": 3,
        "context_before": [
            "import csv",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Check_website_connectivity/check_connectivity.py",
        "line": 10,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "check_connectivity",
        "line_content": "with open(\"websites.txt\", \"r\") as fr:",
        "line_number": 10,
        "context_before": [
            "",
            "def main():"
        ],
        "context_after": [
            "for line in fr:",
            "website = line.strip()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Check_website_connectivity/check_connectivity.py",
        "line": 18,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "check_connectivity",
        "line_content": "with open(\"website_status.csv\", \"w\", newline=\"\") as fw:",
        "line_number": 18,
        "context_before": [
            "",
            "# print(status_dict)"
        ],
        "context_after": [
            "csv_writers = csv.writer(fw)",
            "for key in status_dict.keys():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Check_website_connectivity/check_connectivity.py",
        "line": 20,
        "column": 8,
        "message_id": "C0206",
        "message_type": "convention",
        "symbol": "consider-using-dict-items",
        "message": "Consider iterating with .items()",
        "module": "check_connectivity",
        "line_content": "for key in status_dict.keys():",
        "line_number": 20,
        "context_before": [
            "with open(\"website_status.csv\", \"w\", newline=\"\") as fw:",
            "csv_writers = csv.writer(fw)"
        ],
        "context_after": [
            "csv_writers.writerow([key, status_dict[key]])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Check_website_connectivity/check_connectivity.py",
        "line": 20,
        "column": 19,
        "message_id": "C0201",
        "message_type": "convention",
        "symbol": "consider-iterating-dictionary",
        "message": "Consider iterating the dictionary directly instead of calling .keys()",
        "module": "check_connectivity",
        "line_content": "for key in status_dict.keys():",
        "line_number": 20,
        "context_before": [
            "with open(\"website_status.csv\", \"w\", newline=\"\") as fw:",
            "csv_writers = csv.writer(fw)"
        ],
        "context_after": [
            "csv_writers.writerow([key, status_dict[key]])",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 8,
        "column": 0,
        "message_id": "W0301",
        "message_type": "warning",
        "symbol": "unnecessary-semicolon",
        "message": "Unnecessary semicolon",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.b=[];n=4;",
        "line_number": 8,
        "context_before": [
            "a=['#270101', '#F08B33', '#776B04', '#F1B848', '#8F715B', '#0486DB', '#C1403D', '#F3D4A0']",
            "import random"
        ],
        "context_after": [
            "while n!=0:",
            "p=random.choice(a)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 9,
        "column": 19,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "Mastermind_GUIinterface",
        "line_content": "while n!=0:",
        "line_number": 9,
        "context_before": [
            "import random",
            "self.b=[];n=4;"
        ],
        "context_after": [
            "p=random.choice(a)",
            "if p not in self.b:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 15,
        "column": 20,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "Mastermind_GUIinterface",
        "line_content": "l=[] # hints",
        "line_number": 15,
        "context_before": [
            "n-=1",
            "def compare(self,g,l1):"
        ],
        "context_after": [
            "for x in range(4):",
            "if l1[x]==g[x]:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 26,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.colors = ['#270101', '#F08B33', '#776B04', '#F1B848', '#8F715B', '#0486DB', '#C1403D', '#F3D4A0']",
        "line_number": 26,
        "context_before": [
            "obj=medium()",
            "self.gen=obj.b  # generated color combo"
        ],
        "context_after": [
            "root.geometry('390x600')",
            "for y in range(20):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 37,
        "column": 0,
        "message_id": "W0301",
        "message_type": "warning",
        "symbol": "unnecessary-semicolon",
        "message": "Unnecessary semicolon",
        "module": "Mastermind_GUIinterface",
        "line_content": "n+=1;c+=1;",
        "line_number": 37,
        "context_before": [
            "self.palette.append(Button(root, bg=i, height=1, width=5, relief=SUNKEN))",
            "self.palette[n].grid(row=20, column=c)"
        ],
        "context_after": [
            "self.palette[0].config(command=lambda: self.guess(root, self.palette[0]['bg'],obj))         # binding function to palette",
            "self.palette[1].config(command=lambda: self.guess(root, self.palette[1]['bg'],obj))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 38,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (129/100)",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.palette[0].config(command=lambda: self.guess(root, self.palette[0]['bg'],obj))         # binding function to palette",
        "line_number": 38,
        "context_before": [
            "self.palette[n].grid(row=20, column=c)",
            "n+=1;c+=1;"
        ],
        "context_after": [
            "self.palette[1].config(command=lambda: self.guess(root, self.palette[1]['bg'],obj))",
            "self.palette[2].config(command=lambda: self.guess(root, self.palette[2]['bg'],obj))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 52,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 12 spaces, expected 8",
        "module": "Mastermind_GUIinterface",
        "line_content": "global ccol",
        "line_number": 52,
        "context_before": [
            "ccol,cro = 2,19",
            "def guess(self, root, choice,obj):"
        ],
        "context_after": [
            "global cro",
            "f=True  # boolean flag"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 53,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 12 spaces, expected 8",
        "module": "Mastermind_GUIinterface",
        "line_content": "global cro",
        "line_number": 53,
        "context_before": [
            "def guess(self, root, choice,obj):",
            "global ccol"
        ],
        "context_after": [
            "f=True  # boolean flag",
            "if cro != 1:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 54,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 12 spaces, expected 8",
        "module": "Mastermind_GUIinterface",
        "line_content": "f=True  # boolean flag",
        "line_number": 54,
        "context_before": [
            "global ccol",
            "global cro"
        ],
        "context_after": [
            "if cro != 1:",
            "self.user_choice.append(Button(root, bg=choice, height=1, width=5, relief=RAISED))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 55,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 12 spaces, expected 8",
        "module": "Mastermind_GUIinterface",
        "line_content": "if cro != 1:",
        "line_number": 55,
        "context_before": [
            "global cro",
            "f=True  # boolean flag"
        ],
        "context_after": [
            "self.user_choice.append(Button(root, bg=choice, height=1, width=5, relief=RAISED))",
            "if len(self.user_choice) < 4:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 56,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 16 spaces, expected 12",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.user_choice.append(Button(root, bg=choice, height=1, width=5, relief=RAISED))",
        "line_number": 56,
        "context_before": [
            "f=True  # boolean flag",
            "if cro != 1:"
        ],
        "context_after": [
            "if len(self.user_choice) < 4:",
            "self.user_choice[-1].grid(row=cro, column=ccol)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 57,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 16 spaces, expected 12",
        "module": "Mastermind_GUIinterface",
        "line_content": "if len(self.user_choice) < 4:",
        "line_number": 57,
        "context_before": [
            "if cro != 1:",
            "self.user_choice.append(Button(root, bg=choice, height=1, width=5, relief=RAISED))"
        ],
        "context_after": [
            "self.user_choice[-1].grid(row=cro, column=ccol)",
            "self.code.append(self.user_choice[-1]['bg'])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 58,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.user_choice[-1].grid(row=cro, column=ccol)",
        "line_number": 58,
        "context_before": [
            "self.user_choice.append(Button(root, bg=choice, height=1, width=5, relief=RAISED))",
            "if len(self.user_choice) < 4:"
        ],
        "context_after": [
            "self.code.append(self.user_choice[-1]['bg'])",
            "ccol += 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 59,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.code.append(self.user_choice[-1]['bg'])",
        "line_number": 59,
        "context_before": [
            "if len(self.user_choice) < 4:",
            "self.user_choice[-1].grid(row=cro, column=ccol)"
        ],
        "context_after": [
            "ccol += 1",
            "elif len(self.user_choice) == 4:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 60,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "ccol += 1",
        "line_number": 60,
        "context_before": [
            "self.user_choice[-1].grid(row=cro, column=ccol)",
            "self.code.append(self.user_choice[-1]['bg'])"
        ],
        "context_after": [
            "elif len(self.user_choice) == 4:",
            "self.user_choice[-1].grid(row=cro, column=ccol)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 61,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 16 spaces, expected 12",
        "module": "Mastermind_GUIinterface",
        "line_content": "elif len(self.user_choice) == 4:",
        "line_number": 61,
        "context_before": [
            "self.code.append(self.user_choice[-1]['bg'])",
            "ccol += 1"
        ],
        "context_after": [
            "self.user_choice[-1].grid(row=cro, column=ccol)",
            "self.code.append(self.user_choice[-1]['bg'])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 62,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.user_choice[-1].grid(row=cro, column=ccol)",
        "line_number": 62,
        "context_before": [
            "ccol += 1",
            "elif len(self.user_choice) == 4:"
        ],
        "context_after": [
            "self.code.append(self.user_choice[-1]['bg'])",
            "ccol += 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 63,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.code.append(self.user_choice[-1]['bg'])",
        "line_number": 63,
        "context_before": [
            "elif len(self.user_choice) == 4:",
            "self.user_choice[-1].grid(row=cro, column=ccol)"
        ],
        "context_after": [
            "ccol += 1",
            "ccol = 2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 64,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "ccol += 1",
        "line_number": 64,
        "context_before": [
            "self.user_choice[-1].grid(row=cro, column=ccol)",
            "self.code.append(self.user_choice[-1]['bg'])"
        ],
        "context_after": [
            "ccol = 2",
            "cro = cro-1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 65,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "ccol = 2",
        "line_number": 65,
        "context_before": [
            "self.code.append(self.user_choice[-1]['bg'])",
            "ccol += 1"
        ],
        "context_after": [
            "cro = cro-1",
            "obj.user(self.code) # send the user's choice"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 66,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "cro = cro-1",
        "line_number": 66,
        "context_before": [
            "ccol += 1",
            "ccol = 2"
        ],
        "context_after": [
            "obj.user(self.code) # send the user's choice",
            "self.key=obj.compare(self.code,self.gen) #get the hints"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 67,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "obj.user(self.code) # send the user's choice",
        "line_number": 67,
        "context_before": [
            "ccol = 2",
            "cro = cro-1"
        ],
        "context_after": [
            "self.key=obj.compare(self.code,self.gen) #get the hints",
            "if self.key==['red','red','red','red']:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 68,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.key=obj.compare(self.code,self.gen) #get the hints",
        "line_number": 68,
        "context_before": [
            "cro = cro-1",
            "obj.user(self.code) # send the user's choice"
        ],
        "context_after": [
            "if self.key==['red','red','red','red']:",
            "f=False"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 69,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "if self.key==['red','red','red','red']:",
        "line_number": 69,
        "context_before": [
            "obj.user(self.code) # send the user's choice",
            "self.key=obj.compare(self.code,self.gen) #get the hints"
        ],
        "context_after": [
            "f=False",
            "self.hint(root, self.key)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 70,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "f=False",
        "line_number": 70,
        "context_before": [
            "self.key=obj.compare(self.code,self.gen) #get the hints",
            "if self.key==['red','red','red','red']:"
        ],
        "context_after": [
            "self.hint(root, self.key)",
            "l=Label(root,text=\"CONGRATULATIONS!!!\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 71,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.hint(root, self.key)",
        "line_number": 71,
        "context_before": [
            "if self.key==['red','red','red','red']:",
            "f=False"
        ],
        "context_after": [
            "l=Label(root,text=\"CONGRATULATIONS!!!\")",
            "l.grid(row=0,columnspan=8)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 72,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "l=Label(root,text=\"CONGRATULATIONS!!!\")",
        "line_number": 72,
        "context_before": [
            "f=False",
            "self.hint(root, self.key)"
        ],
        "context_after": [
            "l.grid(row=0,columnspan=8)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 73,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "l.grid(row=0,columnspan=8)",
        "line_number": 73,
        "context_before": [
            "self.hint(root, self.key)",
            "l=Label(root,text=\"CONGRATULATIONS!!!\")"
        ],
        "context_after": [
            "else:",
            "self.hint(root, self.key)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 74,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "else:",
        "line_number": 74,
        "context_before": [
            "l=Label(root,text=\"CONGRATULATIONS!!!\")",
            "l.grid(row=0,columnspan=8)"
        ],
        "context_after": [
            "self.hint(root, self.key)",
            "self.code = []"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 75,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.hint(root, self.key)",
        "line_number": 75,
        "context_before": [
            "l.grid(row=0,columnspan=8)",
            "else:"
        ],
        "context_after": [
            "self.code = []",
            "self.user_choice = []"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 76,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.code = []",
        "line_number": 76,
        "context_before": [
            "else:",
            "self.hint(root, self.key)"
        ],
        "context_after": [
            "self.user_choice = []",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 77,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.user_choice = []",
        "line_number": 77,
        "context_before": [
            "self.hint(root, self.key)",
            "self.code = []"
        ],
        "context_after": [
            "else:",
            "if f:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 78,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 12 spaces, expected 8",
        "module": "Mastermind_GUIinterface",
        "line_content": "else:",
        "line_number": 78,
        "context_before": [
            "self.code = []",
            "self.user_choice = []"
        ],
        "context_after": [
            "if f:",
            "l=Label(root,text=\"You are a LOSER!!!!        ANSWER:\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 79,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 16 spaces, expected 12",
        "module": "Mastermind_GUIinterface",
        "line_content": "if f:",
        "line_number": 79,
        "context_before": [
            "self.user_choice = []",
            "else:"
        ],
        "context_after": [
            "l=Label(root,text=\"You are a LOSER!!!!        ANSWER:\")",
            "l.grid(row=0,columnspan=4)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 80,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "l=Label(root,text=\"You are a LOSER!!!!        ANSWER:\")",
        "line_number": 80,
        "context_before": [
            "else:",
            "if f:"
        ],
        "context_after": [
            "l.grid(row=0,columnspan=4)",
            "c=5"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 81,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "l.grid(row=0,columnspan=4)",
        "line_number": 81,
        "context_before": [
            "if f:",
            "l=Label(root,text=\"You are a LOSER!!!!        ANSWER:\")"
        ],
        "context_after": [
            "c=5",
            "for i in self.gen:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 82,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "c=5",
        "line_number": 82,
        "context_before": [
            "l=Label(root,text=\"You are a LOSER!!!!        ANSWER:\")",
            "l.grid(row=0,columnspan=4)"
        ],
        "context_after": [
            "for i in self.gen:",
            "b=Button(root,bg=i,height=1, width=5, relief=SUNKEN)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 83,
        "column": 38,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "Mastermind_GUIinterface",
        "line_content": "for i in self.gen:",
        "line_number": 83,
        "context_before": [
            "l.grid(row=0,columnspan=4)",
            "c=5"
        ],
        "context_after": [
            "b=Button(root,bg=i,height=1, width=5, relief=SUNKEN)",
            "b.grid(row=0,column=c)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 83,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 20 spaces, expected 16",
        "module": "Mastermind_GUIinterface",
        "line_content": "for i in self.gen:",
        "line_number": 83,
        "context_before": [
            "l.grid(row=0,columnspan=4)",
            "c=5"
        ],
        "context_after": [
            "b=Button(root,bg=i,height=1, width=5, relief=SUNKEN)",
            "b.grid(row=0,column=c)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 84,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "b=Button(root,bg=i,height=1, width=5, relief=SUNKEN)",
        "line_number": 84,
        "context_before": [
            "c=5",
            "for i in self.gen:"
        ],
        "context_after": [
            "b.grid(row=0,column=c)",
            "c+=1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 85,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "b.grid(row=0,column=c)",
        "line_number": 85,
        "context_before": [
            "for i in self.gen:",
            "b=Button(root,bg=i,height=1, width=5, relief=SUNKEN)"
        ],
        "context_after": [
            "c+=1",
            "global hcol, hro"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 86,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 24 spaces, expected 20",
        "module": "Mastermind_GUIinterface",
        "line_content": "c+=1",
        "line_number": 86,
        "context_before": [
            "b=Button(root,bg=i,height=1, width=5, relief=SUNKEN)",
            "b.grid(row=0,column=c)"
        ],
        "context_after": [
            "global hcol, hro",
            "hcol,hro = 8,19"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 96,
        "column": 0,
        "message_id": "W0301",
        "message_type": "warning",
        "symbol": "unnecessary-semicolon",
        "message": "Unnecessary semicolon",
        "module": "Mastermind_GUIinterface",
        "line_content": "hro -= 1;hcol = 8;",
        "line_number": 96,
        "context_before": [
            "a[-1].grid(row=hro, column=hcol, sticky=E)",
            "hcol += 1"
        ],
        "context_after": [
            "master = Tk()",
            "M = MasterMind(master)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Mastermind_GUIinterface\" doesn't conform to snake_case naming style",
        "module": "Mastermind_GUIinterface",
        "line_content": "from tkinter import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "class medium:",
            "def user(self,color): # takes user' choice"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 1,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "Mastermind_GUIinterface",
        "line_content": "from tkinter import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "class medium:",
            "def user(self,color): # takes user' choice"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 2,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"medium\" doesn't conform to PascalCase naming style",
        "module": "Mastermind_GUIinterface",
        "line_content": "class medium:",
        "line_number": 2,
        "context_before": [
            "from tkinter import *"
        ],
        "context_after": [
            "def user(self,color): # takes user' choice",
            "self.color=color"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 7,
        "column": 8,
        "message_id": "C0415",
        "message_type": "convention",
        "symbol": "import-outside-toplevel",
        "message": "Import outside toplevel (random)",
        "module": "Mastermind_GUIinterface",
        "line_content": "import random",
        "line_number": 7,
        "context_before": [
            "def __init__(self): # generates random palette",
            "a=['#270101', '#F08B33', '#776B04', '#F1B848', '#8F715B', '#0486DB', '#C1403D', '#F3D4A0']"
        ],
        "context_after": [
            "self.b=[];n=4;",
            "while n!=0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 8,
        "column": 18,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.b=[];n=4;",
        "line_number": 8,
        "context_before": [
            "a=['#270101', '#F08B33', '#776B04', '#F1B848', '#8F715B', '#0486DB', '#C1403D', '#F3D4A0']",
            "import random"
        ],
        "context_after": [
            "while n!=0:",
            "p=random.choice(a)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 4,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'color' defined outside __init__",
        "module": "Mastermind_GUIinterface",
        "line_content": "self.color=color",
        "line_number": 4,
        "context_before": [
            "class medium:",
            "def user(self,color): # takes user' choice"
        ],
        "context_after": [
            "def __init__(self): # generates random palette",
            "a=['#270101', '#F08B33', '#776B04', '#F1B848', '#8F715B', '#0486DB', '#C1403D', '#F3D4A0']"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 37,
        "column": 17,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "Mastermind_GUIinterface",
        "line_content": "n+=1;c+=1;",
        "line_number": 37,
        "context_before": [
            "self.palette.append(Button(root, bg=i, height=1, width=5, relief=SUNKEN))",
            "self.palette[n].grid(row=20, column=c)"
        ],
        "context_after": [
            "self.palette[0].config(command=lambda: self.guess(root, self.palette[0]['bg'],obj))         # binding function to palette",
            "self.palette[1].config(command=lambda: self.guess(root, self.palette[1]['bg'],obj))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 49,
        "column": 8,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'ccol' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global ccol, cro",
        "line_number": 49,
        "context_before": [
            "self.code = []  # stores the colors",
            "self.key = []  # stores the hints"
        ],
        "context_after": [
            "ccol,cro = 2,19",
            "def guess(self, root, choice,obj):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 49,
        "column": 8,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'cro' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global ccol, cro",
        "line_number": 49,
        "context_before": [
            "self.code = []  # stores the colors",
            "self.key = []  # stores the hints"
        ],
        "context_after": [
            "ccol,cro = 2,19",
            "def guess(self, root, choice,obj):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 52,
        "column": 12,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'ccol' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global ccol",
        "line_number": 52,
        "context_before": [
            "ccol,cro = 2,19",
            "def guess(self, root, choice,obj):"
        ],
        "context_after": [
            "global cro",
            "f=True  # boolean flag"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 53,
        "column": 12,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'cro' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global cro",
        "line_number": 53,
        "context_before": [
            "def guess(self, root, choice,obj):",
            "global ccol"
        ],
        "context_after": [
            "f=True  # boolean flag",
            "if cro != 1:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 87,
        "column": 4,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'hcol' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global hcol, hro",
        "line_number": 87,
        "context_before": [
            "b.grid(row=0,column=c)",
            "c+=1"
        ],
        "context_after": [
            "hcol,hro = 8,19",
            "def hint(self, root, key):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 87,
        "column": 4,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'hro' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global hcol, hro",
        "line_number": 87,
        "context_before": [
            "b.grid(row=0,column=c)",
            "c+=1"
        ],
        "context_after": [
            "hcol,hro = 8,19",
            "def hint(self, root, key):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 90,
        "column": 8,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'hcol' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global hcol, hro",
        "line_number": 90,
        "context_before": [
            "hcol,hro = 8,19",
            "def hint(self, root, key):"
        ],
        "context_after": [
            "a = []",
            "for i in key:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 90,
        "column": 8,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'hro' undefined at the module level",
        "module": "Mastermind_GUIinterface",
        "line_content": "global hcol, hro",
        "line_number": 90,
        "context_before": [
            "hcol,hro = 8,19",
            "def hint(self, root, key):"
        ],
        "context_after": [
            "a = []",
            "for i in key:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 94,
        "column": 27,
        "message_id": "E0601",
        "message_type": "error",
        "symbol": "used-before-assignment",
        "message": "Using variable 'hro' before assignment",
        "module": "Mastermind_GUIinterface",
        "line_content": "a[-1].grid(row=hro, column=hcol, sticky=E)",
        "line_number": 94,
        "context_before": [
            "for i in key:",
            "a.append(Label(root, bg=i,relief=SUNKEN))"
        ],
        "context_after": [
            "hcol += 1",
            "hro -= 1;hcol = 8;"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 96,
        "column": 17,
        "message_id": "C0321",
        "message_type": "convention",
        "symbol": "multiple-statements",
        "message": "More than one statement on a single line",
        "module": "Mastermind_GUIinterface",
        "line_content": "hro -= 1;hcol = 8;",
        "line_number": 96,
        "context_before": [
            "a[-1].grid(row=hro, column=hcol, sticky=E)",
            "hcol += 1"
        ],
        "context_after": [
            "master = Tk()",
            "M = MasterMind(master)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/MasterMind/Mastermind_GUIinterface.py",
        "line": 1,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, StringVar, IntVar, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, BaseWidget, Widget, Toplevel, Canvas, Checkbutton, Entry, Frame, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, Scrollbar, Text, OptionMenu, Image, PhotoImage, BitmapImage, image_names, image_types, Spinbox, LabelFrame, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, X, Y, BOTH, LEFT, TOP, RIGHT, BOTTOM, FLAT, RIDGE, GROOVE, SOLID, HORIZONTAL, VERTICAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, END, INSERT, CURRENT, ANCHOR, ALL, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "Mastermind_GUIinterface",
        "line_content": "from tkinter import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "class medium:",
            "def user(self,color): # takes user' choice"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Extract_zip_files/extract_zip_files.py",
        "line": 24,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "extract_zip_files",
        "line_content": "",
        "line_number": 24,
        "context_before": [
            "file_name = zip_file.split(\".zip\")[0]",
            "if zip_file.endswith(\".zip\"):"
        ],
        "context_after": [
            "#Will use this to save the unzipped file in the current directory",
            "current_working_directory = os.getcwd()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Extract_zip_files/extract_zip_files.py",
        "line": 35,
        "column": 17,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "extract_zip_files",
        "line_content": "extract(zip_file)",
        "line_number": 35,
        "context_before": [
            "print(\"Not a zip file\")",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Extract_zip_files/extract_zip_files.py",
        "line": 17,
        "column": 3,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'os.path.exists(zip_file) == False' should be 'os.path.exists(zip_file) is False' if checking for the singleton value False, or 'not os.path.exists(zip_file)' if testing for falsiness",
        "module": "extract_zip_files",
        "line_content": "if os.path.exists(zip_file) == False:",
        "line_number": 17,
        "context_before": [
            "",
            "#To check if the entered zip file is present in the directory"
        ],
        "context_after": [
            "sys.exit(\"No such file present in the directory\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Extract_zip_files/extract_zip_files.py",
        "line": 21,
        "column": 12,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'zip_file' from outer scope (line 12)",
        "module": "extract_zip_files",
        "line_content": "def extract(zip_file):",
        "line_number": 21,
        "context_before": [
            "",
            "#Function to extract the zip file"
        ],
        "context_after": [
            "file_name = zip_file.split(\".zip\")[0]",
            "if zip_file.endswith(\".zip\"):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Extract_zip_files/extract_zip_files.py",
        "line": 22,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'file_name' from outer scope (line 14)",
        "module": "extract_zip_files",
        "line_content": "file_name = zip_file.split(\".zip\")[0]",
        "line_number": 22,
        "context_before": [
            "#Function to extract the zip file",
            "def extract(zip_file):"
        ],
        "context_after": [
            "if zip_file.endswith(\".zip\"):",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_a_video_file_by_given_time_period/videosplitter.py",
        "line": 17,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after '=' keyword",
        "module": "videosplitter",
        "line_content": "v1 = in1.filter('trim', start=float(args.starttime), end=(args.endtime))",
        "line_number": 17,
        "context_before": [
            "in1 = ffmpeg.input(args.inputfile)",
            ""
        ],
        "context_after": [
            "v2 = in1.filter('trim', start=float(args.endtime))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_a_video_file_by_given_time_period/videosplitter.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'ffmpeg'",
        "module": "videosplitter",
        "line_content": "import ffmpeg",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import argparse",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Split_a_video_file_by_given_time_period/videosplitter.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"argparse\" should be placed before third party import \"ffmpeg\"",
        "module": "videosplitter",
        "line_content": "import argparse",
        "line_number": 2,
        "context_before": [
            "import ffmpeg"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 6,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 4",
        "module": "fetch_open_port",
        "line_content": "target = input('Enter the host to be scanned: ')",
        "line_number": 6,
        "context_before": [
            "",
            "if __name__ == '__main__':"
        ],
        "context_after": [
            "t_IP = gethostbyname(target)",
            "print ('Starting scan on host: ', t_IP)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 7,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 4",
        "module": "fetch_open_port",
        "line_content": "t_IP = gethostbyname(target)",
        "line_number": 7,
        "context_before": [
            "if __name__ == '__main__':",
            "target = input('Enter the host to be scanned: ')"
        ],
        "context_after": [
            "print ('Starting scan on host: ', t_IP)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 8,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 4",
        "module": "fetch_open_port",
        "line_content": "print ('Starting scan on host: ', t_IP)",
        "line_number": 8,
        "context_before": [
            "target = input('Enter the host to be scanned: ')",
            "t_IP = gethostbyname(target)"
        ],
        "context_after": [
            "",
            "for i in range(50, 500):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 9,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_open_port",
        "line_content": "",
        "line_number": 9,
        "context_before": [
            "t_IP = gethostbyname(target)",
            "print ('Starting scan on host: ', t_IP)"
        ],
        "context_after": [
            "for i in range(50, 500):",
            "s = socket(AF_INET, SOCK_STREAM)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 10,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 4",
        "module": "fetch_open_port",
        "line_content": "for i in range(50, 500):",
        "line_number": 10,
        "context_before": [
            "print ('Starting scan on host: ', t_IP)",
            ""
        ],
        "context_after": [
            "s = socket(AF_INET, SOCK_STREAM)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 11,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 6 spaces, expected 8",
        "module": "fetch_open_port",
        "line_content": "s = socket(AF_INET, SOCK_STREAM)",
        "line_number": 11,
        "context_before": [
            "",
            "for i in range(50, 500):"
        ],
        "context_after": [
            "",
            "conn = s.connect_ex((t_IP, i))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 12,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "fetch_open_port",
        "line_content": "",
        "line_number": 12,
        "context_before": [
            "for i in range(50, 500):",
            "s = socket(AF_INET, SOCK_STREAM)"
        ],
        "context_after": [
            "conn = s.connect_ex((t_IP, i))",
            "if(conn == 0) :"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 13,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 6 spaces, expected 8",
        "module": "fetch_open_port",
        "line_content": "conn = s.connect_ex((t_IP, i))",
        "line_number": 13,
        "context_before": [
            "s = socket(AF_INET, SOCK_STREAM)",
            ""
        ],
        "context_after": [
            "if(conn == 0) :",
            "print ('Port %d: OPEN' % (i,))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 14,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 6 spaces, expected 8",
        "module": "fetch_open_port",
        "line_content": "if(conn == 0) :",
        "line_number": 14,
        "context_before": [
            "",
            "conn = s.connect_ex((t_IP, i))"
        ],
        "context_after": [
            "print ('Port %d: OPEN' % (i,))",
            "s.close()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 14,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "fetch_open_port",
        "line_content": "if(conn == 0) :",
        "line_number": 14,
        "context_before": [
            "",
            "conn = s.connect_ex((t_IP, i))"
        ],
        "context_after": [
            "print ('Port %d: OPEN' % (i,))",
            "s.close()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 15,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 9 spaces, expected 12",
        "module": "fetch_open_port",
        "line_content": "print ('Port %d: OPEN' % (i,))",
        "line_number": 15,
        "context_before": [
            "conn = s.connect_ex((t_IP, i))",
            "if(conn == 0) :"
        ],
        "context_after": [
            "s.close()",
            "print('Time taken:', time.time() - startTime)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 16,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 6 spaces, expected 8",
        "module": "fetch_open_port",
        "line_content": "s.close()",
        "line_number": 16,
        "context_before": [
            "if(conn == 0) :",
            "print ('Port %d: OPEN' % (i,))"
        ],
        "context_after": [
            "print('Time taken:', time.time() - startTime)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 17,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "fetch_open_port",
        "line_content": "print('Time taken:', time.time() - startTime)",
        "line_number": 17,
        "context_before": [
            "print ('Port %d: OPEN' % (i,))",
            "s.close()"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 1,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import socket",
        "module": "fetch_open_port",
        "line_content": "from socket import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import time",
            "startTime = time.time()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 15,
        "column": 16,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "fetch_open_port",
        "line_content": "print ('Port %d: OPEN' % (i,))",
        "line_number": 15,
        "context_before": [
            "conn = s.connect_ex((t_IP, i))",
            "if(conn == 0) :"
        ],
        "context_after": [
            "s.close()",
            "print('Time taken:', time.time() - startTime)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Fetch_open_ports/fetch_open_port.py",
        "line": 1,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) os, sys, io, selectors, errno, EBADF, EAGAIN, EWOULDBLOCK, errorTab, fromfd, array, send_fds, recv_fds, fromshare, socketpair, SocketIO, getfqdn, create_connection, has_dualstack_ipv6, create_server, getaddrinfo, AF_APPLETALK, AF_DECnet, AF_INET6, AF_IPX, AF_LINK, AF_ROUTE, AF_SNA, AF_SYSTEM, AF_UNIX, AF_UNSPEC, AI_ADDRCONFIG, AI_ALL, AI_CANONNAME, AI_DEFAULT, AI_MASK, AI_NUMERICHOST, AI_NUMERICSERV, AI_PASSIVE, AI_V4MAPPED, AI_V4MAPPED_CFG, CAPI, CMSG_LEN, CMSG_SPACE, EAI_ADDRFAMILY, EAI_AGAIN, EAI_BADFLAGS, EAI_BADHINTS, EAI_FAIL, EAI_FAMILY, EAI_MAX, EAI_MEMORY, EAI_NODATA, EAI_NONAME, EAI_OVERFLOW, EAI_PROTOCOL, EAI_SERVICE, EAI_SOCKTYPE, EAI_SYSTEM, ETHERTYPE_ARP, ETHERTYPE_IP, ETHERTYPE_IPV6, ETHERTYPE_VLAN, INADDR_ALLHOSTS_GROUP, INADDR_ANY, INADDR_BROADCAST, INADDR_LOOPBACK, INADDR_MAX_LOCAL_GROUP, INADDR_NONE, INADDR_UNSPEC_GROUP, IPPORT_RESERVED, IPPORT_USERRESERVED, IPPROTO_AH, IPPROTO_DSTOPTS, IPPROTO_EGP, IPPROTO_EON, IPPROTO_ESP, IPPROTO_FRAGMENT, IPPROTO_GGP, IPPROTO_GRE, IPPROTO_HELLO, IPPROTO_HOPOPTS, IPPROTO_ICMP, IPPROTO_ICMPV6, IPPROTO_IDP, IPPROTO_IGMP, IPPROTO_IP, IPPROTO_IPCOMP, IPPROTO_IPIP, IPPROTO_IPV4, IPPROTO_IPV6, IPPROTO_MAX, IPPROTO_ND, IPPROTO_NONE, IPPROTO_PIM, IPPROTO_PUP, IPPROTO_RAW, IPPROTO_ROUTING, IPPROTO_RSVP, IPPROTO_SCTP, IPPROTO_TCP, IPPROTO_TP, IPPROTO_UDP, IPPROTO_XTP, IPV6_CHECKSUM, IPV6_DONTFRAG, IPV6_DSTOPTS, IPV6_HOPLIMIT, IPV6_HOPOPTS, IPV6_JOIN_GROUP, IPV6_LEAVE_GROUP, IPV6_MULTICAST_HOPS, IPV6_MULTICAST_IF, IPV6_MULTICAST_LOOP, IPV6_NEXTHOP, IPV6_PATHMTU, IPV6_PKTINFO, IPV6_RECVDSTOPTS, IPV6_RECVHOPLIMIT, IPV6_RECVHOPOPTS, IPV6_RECVPATHMTU, IPV6_RECVPKTINFO, IPV6_RECVRTHDR, IPV6_RECVTCLASS, IPV6_RTHDR, IPV6_RTHDRDSTOPTS, IPV6_RTHDR_TYPE_0, IPV6_TCLASS, IPV6_UNICAST_HOPS, IPV6_USE_MIN_MTU, IPV6_V6ONLY, IP_ADD_MEMBERSHIP, IP_ADD_SOURCE_MEMBERSHIP, IP_BLOCK_SOURCE, IP_DEFAULT_MULTICAST_LOOP, IP_DEFAULT_MULTICAST_TTL, IP_DROP_MEMBERSHIP, IP_DROP_SOURCE_MEMBERSHIP, IP_HDRINCL, IP_MAX_MEMBERSHIPS, IP_MULTICAST_IF, IP_MULTICAST_LOOP, IP_MULTICAST_TTL, IP_OPTIONS, IP_PKTINFO, IP_RECVDSTADDR, IP_RECVOPTS, IP_RECVRETOPTS, IP_RECVTOS, IP_RETOPTS, IP_TOS, IP_TTL, IP_UNBLOCK_SOURCE, LOCAL_PEERCRED, MSG_CTRUNC, MSG_DONTROUTE, MSG_DONTWAIT, MSG_EOF, MSG_EOR, MSG_NOSIGNAL, MSG_OOB, MSG_PEEK, MSG_TRUNC, MSG_WAITALL, NI_DGRAM, NI_MAXHOST, NI_MAXSERV, NI_NAMEREQD, NI_NOFQDN, NI_NUMERICHOST, NI_NUMERICSERV, PF_SYSTEM, SCM_CREDS, SCM_RIGHTS, SHUT_RD, SHUT_RDWR, SHUT_WR, SOCK_DGRAM, SOCK_RAW, SOCK_RDM, SOCK_SEQPACKET, SOL_IP, SOL_SOCKET, SOL_TCP, SOL_UDP, SOMAXCONN, SO_ACCEPTCONN, SO_BINDTODEVICE, SO_BROADCAST, SO_DEBUG, SO_DONTROUTE, SO_ERROR, SO_KEEPALIVE, SO_LINGER, SO_OOBINLINE, SO_RCVBUF, SO_RCVLOWAT, SO_RCVTIMEO, SO_REUSEADDR, SO_REUSEPORT, SO_SNDBUF, SO_SNDLOWAT, SO_SNDTIMEO, SO_TYPE, SO_USELOOPBACK, SYSPROTO_CONTROL, SocketType, TCP_CONNECTION_INFO, TCP_FASTOPEN, TCP_KEEPALIVE, TCP_KEEPCNT, TCP_KEEPINTVL, TCP_MAXSEG, TCP_NODELAY, TCP_NOTSENT_LOWAT, close, dup, error, gaierror, getdefaulttimeout, gethostbyaddr, gethostbyname_ex, gethostname, getnameinfo, getprotobyname, getservbyname, getservbyport, has_ipv6, herror, htonl, htons, if_indextoname, if_nameindex, if_nametoindex, inet_aton, inet_ntoa, inet_ntop, inet_pton, ntohl, ntohs, setdefaulttimeout, sethostname, timeout, IntEnum and IntFlag from wildcard import of socket",
        "module": "fetch_open_port",
        "line_content": "from socket import *",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import time",
            "startTime = time.time()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 30,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'while' keyword",
        "module": "drowsiness detection",
        "line_content": "while(True):",
        "line_number": 30,
        "context_before": [
            "lpred=[99]",
            ""
        ],
        "context_after": [
            "ret, frame = cap.read()",
            "height,width = frame.shape[:2]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 32,
        "column": 34,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "height,width = frame.shape[:2]",
        "line_number": 32,
        "context_before": [
            "while(True):",
            "ret, frame = cap.read()"
        ],
        "context_after": [
            "",
            "gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 35,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "",
        "line_number": 35,
        "context_before": [
            "",
            "gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)"
        ],
        "context_after": [
            "faces = face.detectMultiScale(gray,minNeighbors=5,scaleFactor=1.1,minSize=(25,25))",
            "left_eye = leye.detectMultiScale(gray)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 54,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(rpred[0]==1):",
        "line_number": 54,
        "context_before": [
            "r_eye = np.expand_dims(r_eye,axis=0)",
            "rpred = model.predict_classes(r_eye)"
        ],
        "context_after": [
            "lbl='Open'",
            "if(rpred[0]==0):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 55,
        "column": 22,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "lbl='Open'",
        "line_number": 55,
        "context_before": [
            "rpred = model.predict_classes(r_eye)",
            "if(rpred[0]==1):"
        ],
        "context_after": [
            "if(rpred[0]==0):",
            "lbl='Closed'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 56,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(rpred[0]==0):",
        "line_number": 56,
        "context_before": [
            "if(rpred[0]==1):",
            "lbl='Open'"
        ],
        "context_after": [
            "lbl='Closed'",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 63,
        "column": 54,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "l_eye = cv2.cvtColor(l_eye,cv2.COLOR_BGR2GRAY)",
        "line_number": 63,
        "context_before": [
            "l_eye=frame[y:y+h,x:x+w]",
            "count=count+1"
        ],
        "context_after": [
            "l_eye = cv2.resize(l_eye,(24,24))",
            "l_eye= l_eye/255"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 69,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(lpred[0]==1):",
        "line_number": 69,
        "context_before": [
            "l_eye = np.expand_dims(l_eye,axis=0)",
            "lpred = model.predict_classes(l_eye)"
        ],
        "context_after": [
            "lbl='Open'",
            "if(lpred[0]==0):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 70,
        "column": 22,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "lbl='Open'",
        "line_number": 70,
        "context_before": [
            "lpred = model.predict_classes(l_eye)",
            "if(lpred[0]==1):"
        ],
        "context_after": [
            "if(lpred[0]==0):",
            "lbl='Closed'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 71,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(lpred[0]==0):",
        "line_number": 71,
        "context_before": [
            "if(lpred[0]==1):",
            "lbl='Open'"
        ],
        "context_after": [
            "lbl='Closed'",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 82,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "",
        "line_number": 82,
        "context_before": [
            "score=score-1",
            "cv2.putText(frame,\"Open\",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)"
        ],
        "context_after": [
            "",
            "if(score<0):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 83,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "",
        "line_number": 83,
        "context_before": [
            "cv2.putText(frame,\"Open\",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)",
            ""
        ],
        "context_after": [
            "if(score<0):",
            "score=0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 84,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(score<0):",
        "line_number": 84,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "score=0",
            "cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 85,
        "column": 15,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "score=0",
        "line_number": 85,
        "context_before": [
            "",
            "if(score<0):"
        ],
        "context_after": [
            "cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)",
            "if(score>15):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 87,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(score>15):",
        "line_number": 87,
        "context_before": [
            "score=0",
            "cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)"
        ],
        "context_after": [
            "#person is feeling sleepy so we beep the alarm",
            "cv2.imwrite(os.path.join(path,'image.jpg'),frame)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 92,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "",
        "line_number": 92,
        "context_before": [
            "try:",
            "sound.play()"
        ],
        "context_after": [
            "except:  # isplaying = False",
            "pass"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 95,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(thicc<16):",
        "line_number": 95,
        "context_before": [
            "except:  # isplaying = False",
            "pass"
        ],
        "context_after": [
            "thicc= thicc+2",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 99,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "drowsiness detection",
        "line_content": "if(thicc<2):",
        "line_number": 99,
        "context_before": [
            "else:",
            "thicc=thicc-2"
        ],
        "context_after": [
            "thicc=2",
            "cv2.rectangle(frame,(0,0),(width,height),(0,0,255),thicc)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 101,
        "column": 65,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "drowsiness detection",
        "line_content": "cv2.rectangle(frame,(0,0),(width,height),(0,0,255),thicc)",
        "line_number": 101,
        "context_before": [
            "if(thicc<2):",
            "thicc=2"
        ],
        "context_after": [
            "cv2.imshow('frame',frame)",
            "if cv2.waitKey(1) & 0xFF == ord('q'):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 12,
        "column": 48,
        "message_id": "W1401",
        "message_type": "warning",
        "symbol": "anomalous-backslash-in-string",
        "message": "Anomalous backslash in string: '\\h'. String constant might be missing an r prefix.",
        "module": "drowsiness detection",
        "line_content": "face = cv2.CascadeClassifier('haar cascade files\\haarcascade_frontalface_alt.xml')",
        "line_number": 12,
        "context_before": [
            "sound = mixer.Sound('alarm.wav')",
            ""
        ],
        "context_after": [
            "leye = cv2.CascadeClassifier('haar cascade files\\haarcascade_lefteye_2splits.xml')",
            "reye = cv2.CascadeClassifier('haar cascade files\\haarcascade_righteye_2splits.xml')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 13,
        "column": 48,
        "message_id": "W1401",
        "message_type": "warning",
        "symbol": "anomalous-backslash-in-string",
        "message": "Anomalous backslash in string: '\\h'. String constant might be missing an r prefix.",
        "module": "drowsiness detection",
        "line_content": "leye = cv2.CascadeClassifier('haar cascade files\\haarcascade_lefteye_2splits.xml')",
        "line_number": 13,
        "context_before": [
            "",
            "face = cv2.CascadeClassifier('haar cascade files\\haarcascade_frontalface_alt.xml')"
        ],
        "context_after": [
            "reye = cv2.CascadeClassifier('haar cascade files\\haarcascade_righteye_2splits.xml')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 14,
        "column": 48,
        "message_id": "W1401",
        "message_type": "warning",
        "symbol": "anomalous-backslash-in-string",
        "message": "Anomalous backslash in string: '\\h'. String constant might be missing an r prefix.",
        "module": "drowsiness detection",
        "line_content": "reye = cv2.CascadeClassifier('haar cascade files\\haarcascade_righteye_2splits.xml')",
        "line_number": 14,
        "context_before": [
            "face = cv2.CascadeClassifier('haar cascade files\\haarcascade_frontalface_alt.xml')",
            "leye = cv2.CascadeClassifier('haar cascade files\\haarcascade_lefteye_2splits.xml')"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"drowsiness detection\" doesn't conform to snake_case naming style",
        "module": "drowsiness detection",
        "line_content": "import cv2",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "from keras.models import load_model"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "drowsiness detection",
        "line_content": "import cv2",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "from keras.models import load_model"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'keras.models'",
        "module": "drowsiness detection",
        "line_content": "from keras.models import load_model",
        "line_number": 3,
        "context_before": [
            "import cv2",
            "import os"
        ],
        "context_after": [
            "import numpy as np",
            "from pygame import mixer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "drowsiness detection",
        "line_content": "import numpy as np",
        "line_number": 4,
        "context_before": [
            "import os",
            "from keras.models import load_model"
        ],
        "context_after": [
            "from pygame import mixer",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pygame'",
        "module": "drowsiness detection",
        "line_content": "from pygame import mixer",
        "line_number": 5,
        "context_before": [
            "from keras.models import load_model",
            "import numpy as np"
        ],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 24,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"count\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "count=0",
        "line_number": 24,
        "context_before": [
            "cap = cv2.VideoCapture(0)",
            "font = cv2.FONT_HERSHEY_COMPLEX_SMALL"
        ],
        "context_after": [
            "score=0",
            "thicc=2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 25,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "score=0",
        "line_number": 25,
        "context_before": [
            "font = cv2.FONT_HERSHEY_COMPLEX_SMALL",
            "count=0"
        ],
        "context_after": [
            "thicc=2",
            "rpred=[99]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 26,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"thicc\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "thicc=2",
        "line_number": 26,
        "context_before": [
            "count=0",
            "score=0"
        ],
        "context_after": [
            "rpred=[99]",
            "lpred=[99]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 47,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"count\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "count=count+1",
        "line_number": 47,
        "context_before": [
            "for (x,y,w,h) in right_eye:",
            "r_eye=frame[y:y+h,x:x+w]"
        ],
        "context_after": [
            "r_eye = cv2.cvtColor(r_eye,cv2.COLOR_BGR2GRAY)",
            "r_eye = cv2.resize(r_eye,(24,24))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 55,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"lbl\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "lbl='Open'",
        "line_number": 55,
        "context_before": [
            "rpred = model.predict_classes(r_eye)",
            "if(rpred[0]==1):"
        ],
        "context_after": [
            "if(rpred[0]==0):",
            "lbl='Closed'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 57,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"lbl\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "lbl='Closed'",
        "line_number": 57,
        "context_before": [
            "lbl='Open'",
            "if(rpred[0]==0):"
        ],
        "context_after": [
            "break",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 62,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"count\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "count=count+1",
        "line_number": 62,
        "context_before": [
            "for (x,y,w,h) in left_eye:",
            "l_eye=frame[y:y+h,x:x+w]"
        ],
        "context_after": [
            "l_eye = cv2.cvtColor(l_eye,cv2.COLOR_BGR2GRAY)",
            "l_eye = cv2.resize(l_eye,(24,24))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 70,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"lbl\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "lbl='Open'",
        "line_number": 70,
        "context_before": [
            "lpred = model.predict_classes(l_eye)",
            "if(lpred[0]==1):"
        ],
        "context_after": [
            "if(lpred[0]==0):",
            "lbl='Closed'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 72,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"lbl\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "lbl='Closed'",
        "line_number": 72,
        "context_before": [
            "lbl='Open'",
            "if(lpred[0]==0):"
        ],
        "context_after": [
            "break",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 76,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "score=score+1",
        "line_number": 76,
        "context_before": [
            "",
            "if(rpred[0]==0 and lpred[0]==0):"
        ],
        "context_after": [
            "cv2.putText(frame,\"Closed\",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)",
            "# if(rpred[0]==1 or lpred[0]==1):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 80,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "score=score-1",
        "line_number": 80,
        "context_before": [
            "# if(rpred[0]==1 or lpred[0]==1):",
            "else:"
        ],
        "context_after": [
            "cv2.putText(frame,\"Open\",(10,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 84,
        "column": 4,
        "message_id": "R1731",
        "message_type": "refactor",
        "symbol": "consider-using-max-builtin",
        "message": "Consider using 'score = max(score, 0)' instead of unnecessary if block",
        "module": "drowsiness detection",
        "line_content": "if(score<0):",
        "line_number": 84,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "score=0",
            "cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 85,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "score=0",
        "line_number": 85,
        "context_before": [
            "",
            "if(score<0):"
        ],
        "context_after": [
            "cv2.putText(frame,'Score:'+str(score),(100,height-20), font, 1,(255,255,255),1,cv2.LINE_AA)",
            "if(score>15):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 93,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "drowsiness detection",
        "line_content": "except:  # isplaying = False",
        "line_number": 93,
        "context_before": [
            "sound.play()",
            ""
        ],
        "context_after": [
            "pass",
            "if(thicc<16):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 96,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"thicc\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "thicc= thicc+2",
        "line_number": 96,
        "context_before": [
            "pass",
            "if(thicc<16):"
        ],
        "context_after": [
            "else:",
            "thicc=thicc-2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 98,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"thicc\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "thicc=thicc-2",
        "line_number": 98,
        "context_before": [
            "thicc= thicc+2",
            "else:"
        ],
        "context_after": [
            "if(thicc<2):",
            "thicc=2"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 99,
        "column": 12,
        "message_id": "R1731",
        "message_type": "refactor",
        "symbol": "consider-using-max-builtin",
        "message": "Consider using 'thicc = max(thicc, 2)' instead of unnecessary if block",
        "module": "drowsiness detection",
        "line_content": "if(thicc<2):",
        "line_number": 99,
        "context_before": [
            "else:",
            "thicc=thicc-2"
        ],
        "context_after": [
            "thicc=2",
            "cv2.rectangle(frame,(0,0),(width,height),(0,0,255),thicc)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 100,
        "column": 16,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"thicc\" doesn't conform to UPPER_CASE naming style",
        "module": "drowsiness detection",
        "line_content": "thicc=2",
        "line_number": 100,
        "context_before": [
            "thicc=thicc-2",
            "if(thicc<2):"
        ],
        "context_after": [
            "cv2.rectangle(frame,(0,0),(width,height),(0,0,255),thicc)",
            "cv2.imshow('frame',frame)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"cv2\"",
        "module": "drowsiness detection",
        "line_content": "import os",
        "line_number": 2,
        "context_before": [
            "import cv2"
        ],
        "context_after": [
            "from keras.models import load_model",
            "import numpy as np"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 6,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party imports \"cv2\", \"keras.models.load_model\", \"numpy\", \"pygame.mixer\"",
        "module": "drowsiness detection",
        "line_content": "import time",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from pygame import mixer"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/drowsiness detection.py",
        "line": 6,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import time",
        "module": "drowsiness detection",
        "line_content": "import time",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from pygame import mixer"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 3,
        "column": 31,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "model",
        "line_content": "import matplotlib.pyplot as plt",
        "line_number": 3,
        "context_before": [
            "import os",
            "from keras.preprocessing import image"
        ],
        "context_after": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 12,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (138/100)",
        "module": "model",
        "line_content": "def generator(dir, gen=image.ImageDataGenerator(rescale=1./255), shuffle=True,batch_size=1,target_size=(24,24),class_mode='categorical' ):",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "return gen.flow_from_directory(dir,batch_size=batch_size,shuffle=shuffle,color_mode='grayscale',class_mode=class_mode,target_size=target_size)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 14,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (146/100)",
        "module": "model",
        "line_content": "return gen.flow_from_directory(dir,batch_size=batch_size,shuffle=shuffle,color_mode='grayscale',class_mode=class_mode,target_size=target_size)",
        "line_number": 14,
        "context_before": [
            "def generator(dir, gen=image.ImageDataGenerator(rescale=1./255), shuffle=True,batch_size=1,target_size=(24,24),class_mode='categorical' ):",
            ""
        ],
        "context_after": [
            "",
            "BS= 32"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 40,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "model",
        "line_content": "",
        "line_number": 40,
        "context_before": [
            "#64 convolution filters used each of size 3x3",
            "#choose the best features via pooling"
        ],
        "context_after": [
            "#randomly turn neurons on and off to improve convergence",
            "Dropout(0.25),"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 47,
        "column": 42,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "model",
        "line_content": "#one more dropout for convergence' sake :)",
        "line_number": 47,
        "context_before": [
            "#fully connected to get all relevant data",
            "Dense(128, activation='relu'),"
        ],
        "context_after": [
            "Dropout(0.5),",
            "#output a softmax to squash the matrix into output probabilities"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 55,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (112/100)",
        "module": "model",
        "line_content": "model.fit_generator(train_batch, validation_data=valid_batch,epochs=15,steps_per_epoch=SPE ,validation_steps=VS)",
        "line_number": 55,
        "context_before": [
            "model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])",
            ""
        ],
        "context_after": [
            "",
            "model.save('models/cnnCat2.h5', overwrite=True)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 57,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "model",
        "line_content": "model.save('models/cnnCat2.h5', overwrite=True)",
        "line_number": 57,
        "context_before": [
            "model.fit_generator(train_batch, validation_data=valid_batch,epochs=15,steps_per_epoch=SPE ,validation_steps=VS)",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'keras.preprocessing'",
        "module": "model",
        "line_content": "from keras.preprocessing import image",
        "line_number": 2,
        "context_before": [
            "import os"
        ],
        "context_after": [
            "import matplotlib.pyplot as plt",
            "import numpy as np"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'matplotlib.pyplot'",
        "module": "model",
        "line_content": "import matplotlib.pyplot as plt",
        "line_number": 3,
        "context_before": [
            "import os",
            "from keras.preprocessing import image"
        ],
        "context_after": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "model",
        "line_content": "import numpy as np",
        "line_number": 4,
        "context_before": [
            "from keras.preprocessing import image",
            "import matplotlib.pyplot as plt"
        ],
        "context_after": [
            "from keras.utils.np_utils import to_categorical",
            "import random,shutil"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'keras.utils.np_utils'",
        "module": "model",
        "line_content": "from keras.utils.np_utils import to_categorical",
        "line_number": 5,
        "context_before": [
            "import matplotlib.pyplot as plt",
            "import numpy as np"
        ],
        "context_after": [
            "import random,shutil",
            "from keras.models import Sequential"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 6,
        "column": 0,
        "message_id": "C0410",
        "message_type": "convention",
        "symbol": "multiple-imports",
        "message": "Multiple imports on one line (random, shutil)",
        "module": "model",
        "line_content": "import random,shutil",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ],
        "context_after": [
            "from keras.models import Sequential",
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'keras.models'",
        "module": "model",
        "line_content": "from keras.models import Sequential",
        "line_number": 7,
        "context_before": [
            "from keras.utils.np_utils import to_categorical",
            "import random,shutil"
        ],
        "context_after": [
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization",
            "from keras.models import load_model"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 8,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'keras.layers'",
        "module": "model",
        "line_content": "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization",
        "line_number": 8,
        "context_before": [
            "import random,shutil",
            "from keras.models import Sequential"
        ],
        "context_after": [
            "from keras.models import load_model",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 9,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'keras.models'",
        "module": "model",
        "line_content": "from keras.models import load_model",
        "line_number": 9,
        "context_before": [
            "from keras.models import Sequential",
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 12,
        "column": 0,
        "message_id": "R0913",
        "message_type": "refactor",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (6/5)",
        "module": "model",
        "line_content": "def generator(dir, gen=image.ImageDataGenerator(rescale=1./255), shuffle=True,batch_size=1,target_size=(24,24),class_mode='categorical' ):",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "return gen.flow_from_directory(dir,batch_size=batch_size,shuffle=shuffle,color_mode='grayscale',class_mode=class_mode,target_size=target_size)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 12,
        "column": 0,
        "message_id": "R0917",
        "message_type": "refactor",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "module": "model",
        "line_content": "def generator(dir, gen=image.ImageDataGenerator(rescale=1./255), shuffle=True,batch_size=1,target_size=(24,24),class_mode='categorical' ):",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "return gen.flow_from_directory(dir,batch_size=batch_size,shuffle=shuffle,color_mode='grayscale',class_mode=class_mode,target_size=target_size)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 12,
        "column": 14,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'dir'",
        "module": "model",
        "line_content": "def generator(dir, gen=image.ImageDataGenerator(rescale=1./255), shuffle=True,batch_size=1,target_size=(24,24),class_mode='categorical' ):",
        "line_number": 12,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "return gen.flow_from_directory(dir,batch_size=batch_size,shuffle=shuffle,color_mode='grayscale',class_mode=class_mode,target_size=target_size)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 6,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"random\" should be placed before third party imports \"keras.preprocessing.image\", \"matplotlib.pyplot\", \"numpy\", \"keras.utils.np_utils.to_categorical\"",
        "module": "model",
        "line_content": "import random,shutil",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ],
        "context_after": [
            "from keras.models import Sequential",
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 6,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"shutil\" should be placed before third party imports \"keras.preprocessing.image\", \"matplotlib.pyplot\", \"numpy\", \"keras.utils.np_utils.to_categorical\"",
        "module": "model",
        "line_content": "import random,shutil",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ],
        "context_after": [
            "from keras.models import Sequential",
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 5,
        "column": 0,
        "message_id": "C0412",
        "message_type": "convention",
        "symbol": "ungrouped-imports",
        "message": "Imports from package keras are not grouped",
        "module": "model",
        "line_content": "from keras.utils.np_utils import to_categorical",
        "line_number": 5,
        "context_before": [
            "import matplotlib.pyplot as plt",
            "import numpy as np"
        ],
        "context_after": [
            "import random,shutil",
            "from keras.models import Sequential"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 1,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import os",
        "module": "model",
        "line_content": "import os",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from keras.preprocessing import image",
            "import matplotlib.pyplot as plt"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 3,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused matplotlib.pyplot imported as plt",
        "module": "model",
        "line_content": "import matplotlib.pyplot as plt",
        "line_number": 3,
        "context_before": [
            "import os",
            "from keras.preprocessing import image"
        ],
        "context_after": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 4,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused numpy imported as np",
        "module": "model",
        "line_content": "import numpy as np",
        "line_number": 4,
        "context_before": [
            "from keras.preprocessing import image",
            "import matplotlib.pyplot as plt"
        ],
        "context_after": [
            "from keras.utils.np_utils import to_categorical",
            "import random,shutil"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 5,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused to_categorical imported from keras.utils.np_utils",
        "module": "model",
        "line_content": "from keras.utils.np_utils import to_categorical",
        "line_number": 5,
        "context_before": [
            "import matplotlib.pyplot as plt",
            "import numpy as np"
        ],
        "context_after": [
            "import random,shutil",
            "from keras.models import Sequential"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 6,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import random",
        "module": "model",
        "line_content": "import random,shutil",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ],
        "context_after": [
            "from keras.models import Sequential",
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 6,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import shutil",
        "module": "model",
        "line_content": "import random,shutil",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from keras.utils.np_utils import to_categorical"
        ],
        "context_after": [
            "from keras.models import Sequential",
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 8,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused BatchNormalization imported from keras.layers",
        "module": "model",
        "line_content": "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization",
        "line_number": 8,
        "context_before": [
            "import random,shutil",
            "from keras.models import Sequential"
        ],
        "context_after": [
            "from keras.models import load_model",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Drowsiness detection/model.py",
        "line": 9,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused load_model imported from keras.models",
        "module": "model",
        "line_content": "from keras.models import load_model",
        "line_number": 9,
        "context_before": [
            "from keras.models import Sequential",
            "from keras.layers import Dropout,Conv2D,Flatten,Dense, MaxPooling2D, BatchNormalization"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 19,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (128/100)",
        "module": "wiki-search-cloud",
        "line_content": "wordcloud = WordCloud(stopwords=stopwords, max_words=200, background_color=\"black\", width=600, height=350).generate(content)",
        "line_number": 19,
        "context_before": [
            "STOPWORDS.add('==')",
            "stopwords = set(STOPWORDS)"
        ],
        "context_after": [
            "return wordcloud",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"wiki-search-cloud\" doesn't conform to snake_case naming style",
        "module": "wiki-search-cloud",
        "line_content": "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import matplotlib.pyplot as plt",
            "import wikipedia"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'wordcloud'",
        "module": "wiki-search-cloud",
        "line_content": "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import matplotlib.pyplot as plt",
            "import wikipedia"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'matplotlib.pyplot'",
        "module": "wiki-search-cloud",
        "line_content": "import matplotlib.pyplot as plt",
        "line_number": 2,
        "context_before": [
            "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator"
        ],
        "context_after": [
            "import wikipedia",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'wikipedia'",
        "module": "wiki-search-cloud",
        "line_content": "import wikipedia",
        "line_number": 3,
        "context_before": [
            "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator",
            "import matplotlib.pyplot as plt"
        ],
        "context_after": [
            "import sys",
            "import warnings"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 11,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'topic' from outer scope (line 37)",
        "module": "wiki-search-cloud",
        "line_content": "def gen_cloud(topic):",
        "line_number": 11,
        "context_before": [
            "",
            "# function to search the wikipedia article and generate the wordcloud"
        ],
        "context_after": [
            "try:",
            "content = str(wikipedia.page(topic).content)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 19,
        "column": 4,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'wordcloud' from outer scope (line 38)",
        "module": "wiki-search-cloud",
        "line_content": "wordcloud = WordCloud(stopwords=stopwords, max_words=200, background_color=\"black\", width=600, height=350).generate(content)",
        "line_number": 19,
        "context_before": [
            "STOPWORDS.add('==')",
            "stopwords = set(STOPWORDS)"
        ],
        "context_after": [
            "return wordcloud",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 14,
        "column": 4,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "wiki-search-cloud",
        "line_content": "except:",
        "line_number": 14,
        "context_before": [
            "try:",
            "content = str(wikipedia.page(topic).content)"
        ],
        "context_after": [
            "print(\"Error, try searching something else...\")",
            "sys.exit()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 24,
        "column": 15,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'wordcloud' from outer scope (line 38)",
        "module": "wiki-search-cloud",
        "line_content": "def save_cloud(wordcloud):",
        "line_number": 24,
        "context_before": [
            "",
            "# function to save the wordcloud to current directory"
        ],
        "context_after": [
            "wordcloud.to_file(\"./wordcloud.png\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 29,
        "column": 15,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'wordcloud' from outer scope (line 38)",
        "module": "wiki-search-cloud",
        "line_content": "def show_cloud(wordcloud):",
        "line_number": 29,
        "context_before": [
            "",
            "# function to display the wordcloud with matplotlib"
        ],
        "context_after": [
            "plt.imshow(wordcloud, interpolation='bilinear')",
            "plt.axis(\"off\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party imports \"wordcloud.WordCloud\", \"matplotlib.pyplot\", \"wikipedia\"",
        "module": "wiki-search-cloud",
        "line_content": "import sys",
        "line_number": 4,
        "context_before": [
            "import matplotlib.pyplot as plt",
            "import wikipedia"
        ],
        "context_after": [
            "import warnings",
            "# supressing unnecessary warnings"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"warnings\" should be placed before third party imports \"wordcloud.WordCloud\", \"matplotlib.pyplot\", \"wikipedia\"",
        "module": "wiki-search-cloud",
        "line_content": "import warnings",
        "line_number": 5,
        "context_before": [
            "import wikipedia",
            "import sys"
        ],
        "context_after": [
            "# supressing unnecessary warnings",
            "warnings.filterwarnings(\"ignore\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wikipedia_search_wordcloud/wiki-search-cloud.py",
        "line": 1,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused ImageColorGenerator imported from wordcloud",
        "module": "wiki-search-cloud",
        "line_content": "from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import matplotlib.pyplot as plt",
            "import wikipedia"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_dictionary_to_python_object/conversion.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"obj\" doesn't conform to PascalCase naming style",
        "module": "conversion",
        "line_content": "class obj(object):",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "def __init__(self, d):",
            "for x, y in d.items():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_dictionary_to_python_object/conversion.py",
        "line": 1,
        "column": 0,
        "message_id": "R0205",
        "message_type": "refactor",
        "symbol": "useless-object-inheritance",
        "message": "Class 'obj' inherits from object, can be safely removed from bases in python3",
        "module": "conversion",
        "line_content": "class obj(object):",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "def __init__(self, d):",
            "for x, y in d.items():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_dictionary_to_python_object/conversion.py",
        "line": 1,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (0/2)",
        "module": "conversion",
        "line_content": "class obj(object):",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "def __init__(self, d):",
            "for x, y in d.items():"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/String_search_from_multiple_files/findstring.py",
        "line": 10,
        "column": 13,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'path' from outer scope (line 5)",
        "module": "findstring",
        "line_content": "def getfiles(path):",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "f = 0",
            "os.chdir(path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/String_search_from_multiple_files/findstring.py",
        "line": 20,
        "column": 16,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "findstring",
        "line_content": "f = open(file_name, \"r\")",
        "line_number": 20,
        "context_before": [
            "getfiles(abs_path)",
            "if os.path.isfile(abs_path):"
        ],
        "context_after": [
            "if text in f.read():",
            "f = 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/String_search_from_multiple_files/findstring.py",
        "line": 10,
        "column": 0,
        "message_id": "R1710",
        "message_type": "refactor",
        "symbol": "inconsistent-return-statements",
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "module": "findstring",
        "line_content": "def getfiles(path):",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "f = 0",
            "os.chdir(path)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/String_search_from_multiple_files/findstring.py",
        "line": 20,
        "column": 16,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "findstring",
        "line_content": "f = open(file_name, \"r\")",
        "line_number": 20,
        "context_before": [
            "getfiles(abs_path)",
            "if os.path.isfile(abs_path):"
        ],
        "context_after": [
            "if text in f.read():",
            "f = 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Hello/Hello.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Hello\" doesn't conform to snake_case naming style",
        "module": "Hello",
        "line_content": "# This is simple program to show how print statement works",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "print('Hello Python World')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 6,
        "column": 0,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'print'",
        "module": "diff",
        "line_content": "from rich import print",
        "line_number": 6,
        "context_before": [
            "# rich: for coloring the text.",
            "import sys"
        ],
        "context_after": [
            "",
            "# Print Usage message if enough arguments are not passed."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'rich'",
        "module": "diff",
        "line_content": "from rich import print",
        "line_number": 6,
        "context_before": [
            "# rich: for coloring the text.",
            "import sys"
        ],
        "context_after": [
            "",
            "# Print Usage message if enough arguments are not passed."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 13,
        "column": 4,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "diff",
        "line_content": "exit(1)",
        "line_number": 13,
        "context_before": [
            "print(\"\\tMust provide two file names as command-line arguments.\")",
            "print(\"\\tdiff.py <orignal_file> <changed_file>\")"
        ],
        "context_after": [
            "",
            "orignal = sys.argv[1]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 19,
        "column": 19,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "diff",
        "line_content": "orignal_contents = open(orignal, \"r\").readlines()",
        "line_number": 19,
        "context_before": [
            "",
            "# Read the contents of the files in lists."
        ],
        "context_after": [
            "changed_contents = open(changed, \"r\").readlines()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 19,
        "column": 19,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "diff",
        "line_content": "orignal_contents = open(orignal, \"r\").readlines()",
        "line_number": 19,
        "context_before": [
            "",
            "# Read the contents of the files in lists."
        ],
        "context_after": [
            "changed_contents = open(changed, \"r\").readlines()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 20,
        "column": 19,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "diff",
        "line_content": "changed_contents = open(changed, \"r\").readlines()",
        "line_number": 20,
        "context_before": [
            "# Read the contents of the files in lists.",
            "orignal_contents = open(orignal, \"r\").readlines()"
        ],
        "context_after": [
            "",
            "color = \"green\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 20,
        "column": 19,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "diff",
        "line_content": "changed_contents = open(changed, \"r\").readlines()",
        "line_number": 20,
        "context_before": [
            "# Read the contents of the files in lists.",
            "orignal_contents = open(orignal, \"r\").readlines()"
        ],
        "context_after": [
            "",
            "color = \"green\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 22,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"color\" doesn't conform to UPPER_CASE naming style",
        "module": "diff",
        "line_content": "color = \"green\"",
        "line_number": 22,
        "context_before": [
            "changed_contents = open(changed, \"r\").readlines()",
            ""
        ],
        "context_after": [
            "symbol = f\"[bold {color}][+]\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 23,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"symbol\" doesn't conform to UPPER_CASE naming style",
        "module": "diff",
        "line_content": "symbol = f\"[bold {color}][+]\"",
        "line_number": 23,
        "context_before": [
            "",
            "color = \"green\""
        ],
        "context_after": [
            "",
            "print()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 29,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"color\" doesn't conform to UPPER_CASE naming style",
        "module": "diff",
        "line_content": "color = \"red\"",
        "line_number": 29,
        "context_before": [
            "# Determine which file has changed much.",
            "if len(changed_contents) <= len(orignal_contents):"
        ],
        "context_after": [
            "symbol = f\"[bold {color}][-]\"",
            "smallest_sloc, largest_sloc = changed_contents, orignal_contents"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 30,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"symbol\" doesn't conform to UPPER_CASE naming style",
        "module": "diff",
        "line_content": "symbol = f\"[bold {color}][-]\"",
        "line_number": 30,
        "context_before": [
            "if len(changed_contents) <= len(orignal_contents):",
            "color = \"red\""
        ],
        "context_after": [
            "smallest_sloc, largest_sloc = changed_contents, orignal_contents",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Diff_Util/diff.py",
        "line": 37,
        "column": 4,
        "message_id": "R1724",
        "message_type": "refactor",
        "symbol": "no-else-continue",
        "message": "Unnecessary \"else\" after \"continue\", remove the \"else\" and de-indent the code inside it",
        "module": "diff",
        "line_content": "if orignal_contents[line] == changed_contents[line]:",
        "line_number": 37,
        "context_before": [
            "# Go over all the lines to check the changes.",
            "for line in range(0, len(smallest_sloc)):"
        ],
        "context_after": [
            "# Ignore if the lines are same.",
            "continue"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 67,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "app",
        "line_content": "",
        "line_number": 67,
        "context_before": [
            "if __name__ == \"__main__\":",
            "app.run(debug=True)"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'flask'",
        "module": "app",
        "line_content": "from flask import Flask, render_template, url_for, request, redirect",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from flask_sqlalchemy import SQLAlchemy",
            "from datetime import datetime"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'flask_sqlalchemy'",
        "module": "app",
        "line_content": "from flask_sqlalchemy import SQLAlchemy",
        "line_number": 2,
        "context_before": [
            "from flask import Flask, render_template, url_for, request, redirect"
        ],
        "context_after": [
            "from datetime import datetime",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 18,
        "column": 15,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "app",
        "line_content": "return \"<Task %r>\" % self.id",
        "line_number": 18,
        "context_before": [
            "",
            "def __repr__(self):"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 11,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (1/2)",
        "module": "app",
        "line_content": "class Todo(db.Model):",
        "line_number": 11,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "id = db.Column(db.Integer, primary_key=True)",
            "content = db.Column(db.String(200), nullable=False)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 30,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 30,
        "context_before": [
            "db.session.commit()",
            "return redirect(\"/\")"
        ],
        "context_after": [
            "return \"There is an issue\"",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 38,
        "column": 11,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'id'",
        "module": "app",
        "line_content": "def delete(id):",
        "line_number": 38,
        "context_before": [
            "",
            "@app.route(\"/delete/<int:id>\")"
        ],
        "context_after": [
            "task = Todo.query.get_or_404(id)",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 44,
        "column": 4,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 44,
        "context_before": [
            "db.session.commit()",
            "return redirect(\"/\")"
        ],
        "context_after": [
            "return \"This is an Problem while deleting\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 49,
        "column": 11,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'id'",
        "module": "app",
        "line_content": "def update(id):",
        "line_number": 49,
        "context_before": [
            "",
            "@app.route(\"/update/<int:id>\", methods=[\"POST\", \"GET\"])"
        ],
        "context_after": [
            "task = Todo.query.get_or_404(id)",
            "if request.method == \"POST\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 57,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 57,
        "context_before": [
            "db.session.commit()",
            "return redirect(\"/\")"
        ],
        "context_after": [
            "return \"There is an issue\"",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"datetime.datetime\" should be placed before third party imports \"flask.Flask\", \"flask_sqlalchemy.SQLAlchemy\"",
        "module": "app",
        "line_content": "from datetime import datetime",
        "line_number": 3,
        "context_before": [
            "from flask import Flask, render_template, url_for, request, redirect",
            "from flask_sqlalchemy import SQLAlchemy"
        ],
        "context_after": [
            "",
            "app = Flask(__name__)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Todo_app/app.py",
        "line": 1,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused url_for imported from flask",
        "module": "app",
        "line_content": "from flask import Flask, render_template, url_for, request, redirect",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from flask_sqlalchemy import SQLAlchemy",
            "from datetime import datetime"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 12,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "global url",
        "line_number": 12,
        "context_before": [
            "# function to get the html of the page",
            "def get_page():"
        ],
        "context_after": [
            "url = input('Enter url of a medium article: ')",
            "# handling possible error"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 13,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "url = input('Enter url of a medium article: ')",
        "line_number": 13,
        "context_before": [
            "def get_page():",
            "global url"
        ],
        "context_after": [
            "# handling possible error",
            "if not re.match(r'https?://medium.com/',url):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 15,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "if not re.match(r'https?://medium.com/',url):",
        "line_number": 15,
        "context_before": [
            "url = input('Enter url of a medium article: ')",
            "# handling possible error"
        ],
        "context_after": [
            "print('Please enter a valid website, or make sure it is a medium article')",
            "sys.exit(1)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 16,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "print('Please enter a valid website, or make sure it is a medium article')",
        "line_number": 16,
        "context_before": [
            "# handling possible error",
            "if not re.match(r'https?://medium.com/',url):"
        ],
        "context_after": [
            "sys.exit(1)",
            "res = requests.get(url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 17,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "sys.exit(1)",
        "line_number": 17,
        "context_before": [
            "if not re.match(r'https?://medium.com/',url):",
            "print('Please enter a valid website, or make sure it is a medium article')"
        ],
        "context_after": [
            "res = requests.get(url)",
            "res.raise_for_status()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 18,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "res = requests.get(url)",
        "line_number": 18,
        "context_before": [
            "print('Please enter a valid website, or make sure it is a medium article')",
            "sys.exit(1)"
        ],
        "context_after": [
            "res.raise_for_status()",
            "soup = BeautifulSoup(res.text, 'html.parser')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 19,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "res.raise_for_status()",
        "line_number": 19,
        "context_before": [
            "sys.exit(1)",
            "res = requests.get(url)"
        ],
        "context_after": [
            "soup = BeautifulSoup(res.text, 'html.parser')",
            "return soup"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 20,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "soup = BeautifulSoup(res.text, 'html.parser')",
        "line_number": 20,
        "context_before": [
            "res = requests.get(url)",
            "res.raise_for_status()"
        ],
        "context_after": [
            "return soup",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 21,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "return soup",
        "line_number": 21,
        "context_before": [
            "res.raise_for_status()",
            "soup = BeautifulSoup(res.text, 'html.parser')"
        ],
        "context_after": [
            "",
            "# function to remove all the html tags and replace some with specific strings"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 26,
        "column": 57,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "scraping_medium",
        "line_content": "rep = dict((re.escape(k), v) for k, v in rep.items())",
        "line_number": 26,
        "context_before": [
            "def purify(text):",
            "rep = {\"<br>\": \"\\n\", \"<br/>\": \"\\n\", \"<li>\":  \"\\n\"}"
        ],
        "context_after": [
            "pattern = re.compile(\"|\".join(rep.keys()))",
            "text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 34,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "fin = f'url: {url}\\n\\n'",
        "line_number": 34,
        "context_before": [
            "# function to compile all of the scraped text in one string",
            "def collect_text(soup):"
        ],
        "context_after": [
            "main = (soup.head.title.text).split('|')",
            "global title"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 35,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "main = (soup.head.title.text).split('|')",
        "line_number": 35,
        "context_before": [
            "def collect_text(soup):",
            "fin = f'url: {url}\\n\\n'"
        ],
        "context_after": [
            "global title",
            "title = main[0].strip()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 36,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "global title",
        "line_number": 36,
        "context_before": [
            "fin = f'url: {url}\\n\\n'",
            "main = (soup.head.title.text).split('|')"
        ],
        "context_after": [
            "title = main[0].strip()",
            "fin += f'Title: {title.upper()}\\n{main[1].strip()}'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 37,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "title = main[0].strip()",
        "line_number": 37,
        "context_before": [
            "main = (soup.head.title.text).split('|')",
            "global title"
        ],
        "context_after": [
            "fin += f'Title: {title.upper()}\\n{main[1].strip()}'",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 38,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "fin += f'Title: {title.upper()}\\n{main[1].strip()}'",
        "line_number": 38,
        "context_before": [
            "global title",
            "title = main[0].strip()"
        ],
        "context_after": [
            "",
            "header = soup.find_all('h1')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 40,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "header = soup.find_all('h1')",
        "line_number": 40,
        "context_before": [
            "fin += f'Title: {title.upper()}\\n{main[1].strip()}'",
            ""
        ],
        "context_after": [
            "j = 1",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 41,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "j = 1",
        "line_number": 41,
        "context_before": [
            "",
            "header = soup.find_all('h1')"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 43,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "try:",
        "line_number": 43,
        "context_before": [
            "j = 1",
            ""
        ],
        "context_after": [
            "fin += '\\n\\nINTRODUCTION\\n'",
            "for elem in list(header[j].previous_siblings)[::-1]:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 44,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "fin += '\\n\\nINTRODUCTION\\n'",
        "line_number": 44,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "for elem in list(header[j].previous_siblings)[::-1]:",
            "fin += f'\\n{purify(str(elem))}'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 45,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "for elem in list(header[j].previous_siblings)[::-1]:",
        "line_number": 45,
        "context_before": [
            "try:",
            "fin += '\\n\\nINTRODUCTION\\n'"
        ],
        "context_after": [
            "fin += f'\\n{purify(str(elem))}'",
            "except:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 46,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "scraping_medium",
        "line_content": "fin += f'\\n{purify(str(elem))}'",
        "line_number": 46,
        "context_before": [
            "fin += '\\n\\nINTRODUCTION\\n'",
            "for elem in list(header[j].previous_siblings)[::-1]:"
        ],
        "context_after": [
            "except:",
            "pass"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 47,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "except:",
        "line_number": 47,
        "context_before": [
            "for elem in list(header[j].previous_siblings)[::-1]:",
            "fin += f'\\n{purify(str(elem))}'"
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 48,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "pass",
        "line_number": 48,
        "context_before": [
            "fin += f'\\n{purify(str(elem))}'",
            "except:"
        ],
        "context_after": [
            "",
            "fin += f'\\n\\n{header[j].text.upper()}'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 50,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "fin += f'\\n\\n{header[j].text.upper()}'",
        "line_number": 50,
        "context_before": [
            "pass",
            ""
        ],
        "context_after": [
            "for elem in header[j].next_siblings:",
            "if elem.name == 'h1':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 51,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "for elem in header[j].next_siblings:",
        "line_number": 51,
        "context_before": [
            "",
            "fin += f'\\n\\n{header[j].text.upper()}'"
        ],
        "context_after": [
            "if elem.name == 'h1':",
            "j+=1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 52,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "if elem.name == 'h1':",
        "line_number": 52,
        "context_before": [
            "fin += f'\\n\\n{header[j].text.upper()}'",
            "for elem in header[j].next_siblings:"
        ],
        "context_after": [
            "j+=1",
            "fin += f'\\n\\n{header[j].text.upper()}'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 53,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "scraping_medium",
        "line_content": "j+=1",
        "line_number": 53,
        "context_before": [
            "for elem in header[j].next_siblings:",
            "if elem.name == 'h1':"
        ],
        "context_after": [
            "fin += f'\\n\\n{header[j].text.upper()}'",
            "continue"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 54,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "scraping_medium",
        "line_content": "fin += f'\\n\\n{header[j].text.upper()}'",
        "line_number": 54,
        "context_before": [
            "if elem.name == 'h1':",
            "j+=1"
        ],
        "context_after": [
            "continue",
            "fin += f'\\n{purify(str(elem))}'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 55,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "scraping_medium",
        "line_content": "continue",
        "line_number": 55,
        "context_before": [
            "j+=1",
            "fin += f'\\n\\n{header[j].text.upper()}'"
        ],
        "context_after": [
            "fin += f'\\n{purify(str(elem))}'",
            "return fin"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 56,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "fin += f'\\n{purify(str(elem))}'",
        "line_number": 56,
        "context_before": [
            "fin += f'\\n\\n{header[j].text.upper()}'",
            "continue"
        ],
        "context_after": [
            "return fin",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 57,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "return fin",
        "line_number": 57,
        "context_before": [
            "continue",
            "fin += f'\\n{purify(str(elem))}'"
        ],
        "context_after": [
            "",
            "# function to save file in the current directory"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 61,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "if not os.path.exists('./scraped_articles'):",
        "line_number": 61,
        "context_before": [
            "# function to save file in the current directory",
            "def save_file(fin):"
        ],
        "context_after": [
            "os.mkdir('./scraped_articles')",
            "fname = './scraped_articles/' + '_'.join(title.split()) + '.txt'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 62,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "os.mkdir('./scraped_articles')",
        "line_number": 62,
        "context_before": [
            "def save_file(fin):",
            "if not os.path.exists('./scraped_articles'):"
        ],
        "context_after": [
            "fname = './scraped_articles/' + '_'.join(title.split()) + '.txt'",
            "with open(fname, 'w', encoding='utf8') as outfile:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 63,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "fname = './scraped_articles/' + '_'.join(title.split()) + '.txt'",
        "line_number": 63,
        "context_before": [
            "if not os.path.exists('./scraped_articles'):",
            "os.mkdir('./scraped_articles')"
        ],
        "context_after": [
            "with open(fname, 'w', encoding='utf8') as outfile:",
            "outfile.write(fin)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 64,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "with open(fname, 'w', encoding='utf8') as outfile:",
        "line_number": 64,
        "context_before": [
            "os.mkdir('./scraped_articles')",
            "fname = './scraped_articles/' + '_'.join(title.split()) + '.txt'"
        ],
        "context_after": [
            "outfile.write(fin)",
            "print(f'File saved in directory {fname}')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 65,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "scraping_medium",
        "line_content": "outfile.write(fin)",
        "line_number": 65,
        "context_before": [
            "fname = './scraped_articles/' + '_'.join(title.split()) + '.txt'",
            "with open(fname, 'w', encoding='utf8') as outfile:"
        ],
        "context_after": [
            "print(f'File saved in directory {fname}')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 66,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "print(f'File saved in directory {fname}')",
        "line_number": 66,
        "context_before": [
            "with open(fname, 'w', encoding='utf8') as outfile:",
            "outfile.write(fin)"
        ],
        "context_after": [
            "",
            "# driver code"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 70,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "fin = collect_text(get_page())",
        "line_number": 70,
        "context_before": [
            "# driver code",
            "if __name__ == '__main__':"
        ],
        "context_after": [
            "save_file(fin)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 71,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "scraping_medium",
        "line_content": "save_file(fin)",
        "line_number": 71,
        "context_before": [
            "if __name__ == '__main__':",
            "fin = collect_text(get_page())"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 29,
        "column": 19,
        "message_id": "W1401",
        "message_type": "warning",
        "symbol": "anomalous-backslash-in-string",
        "message": "Anomalous backslash in string: '\\<'. String constant might be missing an r prefix.",
        "module": "scraping_medium",
        "line_content": "text = re.sub('\\<(.*?)\\>', '', text)",
        "line_number": 29,
        "context_before": [
            "pattern = re.compile(\"|\".join(rep.keys()))",
            "text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)"
        ],
        "context_after": [
            "return text",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 29,
        "column": 26,
        "message_id": "W1401",
        "message_type": "warning",
        "symbol": "anomalous-backslash-in-string",
        "message": "Anomalous backslash in string: '\\>'. String constant might be missing an r prefix.",
        "module": "scraping_medium",
        "line_content": "text = re.sub('\\<(.*?)\\>', '', text)",
        "line_number": 29,
        "context_before": [
            "pattern = re.compile(\"|\".join(rep.keys()))",
            "text = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)"
        ],
        "context_after": [
            "return text",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "scraping_medium",
        "line_content": "import requests",
        "line_number": 3,
        "context_before": [
            "import os",
            "import sys"
        ],
        "context_after": [
            "import re",
            "from bs4 import BeautifulSoup"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "scraping_medium",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 5,
        "context_before": [
            "import requests",
            "import re"
        ],
        "context_after": [
            "",
            "# switching to current running python files directory"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 12,
        "column": 1,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'url' undefined at the module level",
        "module": "scraping_medium",
        "line_content": "global url",
        "line_number": 12,
        "context_before": [
            "# function to get the html of the page",
            "def get_page():"
        ],
        "context_after": [
            "url = input('Enter url of a medium article: ')",
            "# handling possible error"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 34,
        "column": 1,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'fin' from outer scope (line 70)",
        "module": "scraping_medium",
        "line_content": "fin = f'url: {url}\\n\\n'",
        "line_number": 34,
        "context_before": [
            "# function to compile all of the scraped text in one string",
            "def collect_text(soup):"
        ],
        "context_after": [
            "main = (soup.head.title.text).split('|')",
            "global title"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 36,
        "column": 1,
        "message_id": "W0601",
        "message_type": "warning",
        "symbol": "global-variable-undefined",
        "message": "Global variable 'title' undefined at the module level",
        "module": "scraping_medium",
        "line_content": "global title",
        "line_number": 36,
        "context_before": [
            "fin = f'url: {url}\\n\\n'",
            "main = (soup.head.title.text).split('|')"
        ],
        "context_after": [
            "title = main[0].strip()",
            "fin += f'Title: {title.upper()}\\n{main[1].strip()}'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 47,
        "column": 1,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "scraping_medium",
        "line_content": "except:",
        "line_number": 47,
        "context_before": [
            "for elem in list(header[j].previous_siblings)[::-1]:",
            "fin += f'\\n{purify(str(elem))}'"
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 60,
        "column": 14,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'fin' from outer scope (line 70)",
        "module": "scraping_medium",
        "line_content": "def save_file(fin):",
        "line_number": 60,
        "context_before": [
            "",
            "# function to save file in the current directory"
        ],
        "context_after": [
            "if not os.path.exists('./scraped_articles'):",
            "os.mkdir('./scraped_articles')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scraping Medium Articles/scraping_medium.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"re\" should be placed before third party import \"requests\"",
        "module": "scraping_medium",
        "line_content": "import re",
        "line_number": 4,
        "context_before": [
            "import sys",
            "import requests"
        ],
        "context_after": [
            "from bs4 import BeautifulSoup",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Dominant_color/find-color.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"find-color\" doesn't conform to snake_case naming style",
        "module": "find-color",
        "line_content": "import cv2",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import numpy as np",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Dominant_color/find-color.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'cv2'",
        "module": "find-color",
        "line_content": "import cv2",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import numpy as np",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Dominant_color/find-color.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "find-color",
        "line_content": "import numpy as np",
        "line_number": 2,
        "context_before": [
            "import cv2"
        ],
        "context_after": [
            "",
            "path = input(\"Enter Path :- \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Dominant_color/find-color.py",
        "line": 8,
        "column": 7,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "find-color",
        "line_content": "except Exception:",
        "line_number": 8,
        "context_before": [
            "img = cv2.imread(path)",
            "cv2.imshow(\"img\", img)"
        ],
        "context_after": [
            "print(\"Path not found\")",
            "exit()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Dominant_color/find-color.py",
        "line": 10,
        "column": 4,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "find-color",
        "line_content": "exit()",
        "line_number": 10,
        "context_before": [
            "except Exception:",
            "print(\"Path not found\")"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 8,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "converter1",
        "line_content": "if(os.path.isdir(\"temp\") == False):",
        "line_number": 8,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "os.mkdir(\"temp\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 10,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter1",
        "line_content": "",
        "line_number": 10,
        "context_before": [
            "if(os.path.isdir(\"temp\") == False):",
            "os.mkdir(\"temp\")"
        ],
        "context_after": [
            "txtpath = \"\"",
            "pdfpath = \"\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 16,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (143/100)",
        "module": "converter1",
        "line_content": "pdfpath = input(\"Enter the name of your pdf file - please use backslash when typing in directory path: \")   #Provide the path for your pdf here",
        "line_number": 16,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "txtpath = input(\"Enter the name of your txt file - please use backslash when typing in directory path: \")   #Provide the path for the output text file",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 17,
        "column": 150,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter1",
        "line_content": "txtpath = input(\"Enter the name of your txt file - please use backslash when typing in directory path: \")   #Provide the path for the output text file",
        "line_number": 17,
        "context_before": [
            "",
            "pdfpath = input(\"Enter the name of your pdf file - please use backslash when typing in directory path: \")   #Provide the path for your pdf here"
        ],
        "context_after": [
            "",
            "BASEDIR = os.path.realpath(\"temp\") # This is the sample base directory where all your text files will be stored if you do not give a specific path"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 17,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (150/100)",
        "module": "converter1",
        "line_content": "txtpath = input(\"Enter the name of your txt file - please use backslash when typing in directory path: \")   #Provide the path for the output text file",
        "line_number": 17,
        "context_before": [
            "",
            "pdfpath = input(\"Enter the name of your pdf file - please use backslash when typing in directory path: \")   #Provide the path for your pdf here"
        ],
        "context_after": [
            "",
            "BASEDIR = os.path.realpath(\"temp\") # This is the sample base directory where all your text files will be stored if you do not give a specific path"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 19,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (146/100)",
        "module": "converter1",
        "line_content": "BASEDIR = os.path.realpath(\"temp\") # This is the sample base directory where all your text files will be stored if you do not give a specific path",
        "line_number": 19,
        "context_before": [
            "txtpath = input(\"Enter the name of your txt file - please use backslash when typing in directory path: \")   #Provide the path for the output text file",
            ""
        ],
        "context_after": [
            "print(BASEDIR)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 23,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "converter1",
        "line_content": "if(len(txtpath) == 0):",
        "line_number": 23,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "txtpath = os.path.join(BASEDIR,os.path.basename(os.path.normpath(pdfpath)).replace(\".pdf\", \"\")+\".txt\")",
            "pdfobj = open(pdfpath, 'rb')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 24,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (106/100)",
        "module": "converter1",
        "line_content": "txtpath = os.path.join(BASEDIR,os.path.basename(os.path.normpath(pdfpath)).replace(\".pdf\", \"\")+\".txt\")",
        "line_number": 24,
        "context_before": [
            "",
            "if(len(txtpath) == 0):"
        ],
        "context_after": [
            "pdfobj = open(pdfpath, 'rb')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 34,
        "column": 34,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter1",
        "line_content": "with open(txtpath, 'a+') as f:",
        "line_number": 34,
        "context_before": [
            "for i in range(x):",
            "pageObj = pdfread.getPage(i)"
        ],
        "context_after": [
            "f.write((pageObj.extractText()))",
            "print(pageObj.extractText()) #This just provides the overview of what is being added to your output, you can remove it if want"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 36,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (130/100)",
        "module": "converter1",
        "line_content": "print(pageObj.extractText()) #This just provides the overview of what is being added to your output, you can remove it if want",
        "line_number": 36,
        "context_before": [
            "with open(txtpath, 'a+') as f:",
            "f.write((pageObj.extractText()))"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 37,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter1",
        "line_content": "",
        "line_number": 37,
        "context_before": [
            "f.write((pageObj.extractText()))",
            "print(pageObj.extractText()) #This just provides the overview of what is being added to your output, you can remove it if want"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 38,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter1",
        "line_content": "",
        "line_number": 38,
        "context_before": [
            "print(pageObj.extractText()) #This just provides the overview of what is being added to your output, you can remove it if want",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 39,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter1",
        "line_content": "",
        "line_number": 39,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "pdfobj.close()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 41,
        "column": 14,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "converter1",
        "line_content": "pdfobj.close()",
        "line_number": 41,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 43,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "converter1",
        "line_content": "",
        "line_number": 43,
        "context_before": [
            "pdfobj.close()",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PyPDF2'",
        "module": "converter1",
        "line_content": "import PyPDF2",
        "line_number": 4,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 8,
        "column": 3,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'os.path.isdir('temp') == False' should be 'os.path.isdir('temp') is False' if checking for the singleton value False, or 'not os.path.isdir('temp')' if testing for falsiness",
        "module": "converter1",
        "line_content": "if(os.path.isdir(\"temp\") == False):",
        "line_number": 8,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "os.mkdir(\"temp\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 11,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"txtpath\" doesn't conform to UPPER_CASE naming style",
        "module": "converter1",
        "line_content": "txtpath = \"\"",
        "line_number": 11,
        "context_before": [
            "os.mkdir(\"temp\")",
            ""
        ],
        "context_after": [
            "pdfpath = \"\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 12,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pdfpath\" doesn't conform to UPPER_CASE naming style",
        "module": "converter1",
        "line_content": "pdfpath = \"\"",
        "line_number": 12,
        "context_before": [
            "",
            "txtpath = \"\""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 34,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "converter1",
        "line_content": "with open(txtpath, 'a+') as f:",
        "line_number": 34,
        "context_before": [
            "for i in range(x):",
            "pageObj = pdfread.getPage(i)"
        ],
        "context_after": [
            "f.write((pageObj.extractText()))",
            "print(pageObj.extractText()) #This just provides the overview of what is being added to your output, you can remove it if want"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"PyPDF2\"",
        "module": "converter1",
        "line_content": "import os",
        "line_number": 5,
        "context_before": [
            "",
            "import PyPDF2"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert pdf to text/converter1.py",
        "line": 25,
        "column": 9,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "converter1",
        "line_content": "pdfobj = open(pdfpath, 'rb')",
        "line_number": 25,
        "context_before": [
            "if(len(txtpath) == 0):",
            "txtpath = os.path.join(BASEDIR,os.path.basename(os.path.normpath(pdfpath)).replace(\".pdf\", \"\")+\".txt\")"
        ],
        "context_after": [
            "",
            "pdfread = PyPDF2.PdfFileReader(pdfobj)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Password_generator/password_generator.py",
        "line": 20,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (124/100)",
        "module": "password_generator",
        "line_content": "label_title = Label(self.window, text='Welcome to password generator', font=('Courrier', 20), bg='gray', fg='black')",
        "line_number": 20,
        "context_before": [
            "",
            "def label(self):"
        ],
        "context_after": [
            "label_title.pack()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Password_generator/password_generator.py",
        "line": 24,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "password_generator",
        "line_content": "self.password_entry = Entry(self.window, font=('Courrier', 25), bg='white', fg='black', width=30, relief='solid')",
        "line_number": 24,
        "context_before": [
            "",
            "def entry(self):"
        ],
        "context_after": [
            "self.password_entry.pack(pady=50)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Password_generator/password_generator.py",
        "line": 28,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (164/100)",
        "module": "password_generator",
        "line_content": "password_generator = Button(self.window, text=\"Generate_password\",  font=('Courrier', 12), bg='white', fg='black', width=25, command=self.generate_password)",
        "line_number": 28,
        "context_before": [
            "",
            "def button(self):"
        ],
        "context_after": [
            "password_generator.pack()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Password_generator/password_generator.py",
        "line": 38,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "password_generator",
        "line_content": "",
        "line_number": 38,
        "context_before": [
            "self.password_entry.delete(0, END)",
            "self.password_entry.insert(0, password)"
        ],
        "context_after": [
            "#display",
            "app = App()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Password_generator/password_generator.py",
        "line": 1,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "password_generator",
        "line_content": "from tkinter import*",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from random import choice",
            "import string"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Password_generator/password_generator.py",
        "line": 34,
        "column": 12,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'x'",
        "module": "password_generator",
        "line_content": "for x in range(28):",
        "line_number": 34,
        "context_before": [
            "characters = string.ascii_letters + string.punctuation + string.digits",
            "password = \"\""
        ],
        "context_after": [
            "password+=choice(characters)",
            "self.password_entry.delete(0, END)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Password_generator/password_generator.py",
        "line": 1,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, StringVar, IntVar, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, Grid, BaseWidget, Widget, Toplevel, Canvas, Checkbutton, Frame, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, Scrollbar, Text, OptionMenu, Image, BitmapImage, image_names, image_types, Spinbox, LabelFrame, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, E, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, X, Y, BOTH, LEFT, TOP, RIGHT, BOTTOM, RAISED, SUNKEN, FLAT, RIDGE, GROOVE, SOLID, HORIZONTAL, VERTICAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, INSERT, CURRENT, ANCHOR, ALL, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "password_generator",
        "line_content": "from tkinter import*",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from random import choice",
            "import string"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/JPGtoPNG.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"JPGtoPNG\" doesn't conform to snake_case naming style",
        "module": "JPGtoPNG",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "im = Image.open(\"naruto_first.jpg\").convert(\"RGB\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/JPGtoPNG.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "JPGtoPNG",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "im = Image.open(\"naruto_first.jpg\").convert(\"RGB\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 6,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "convertDynamic",
        "line_content": "im = None",
        "line_number": 6,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "for root, dirs, files in os.walk(\".\"):",
            "for filename in files:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 7,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "convertDynamic",
        "line_content": "for root, dirs, files in os.walk(\".\"):",
        "line_number": 7,
        "context_before": [
            "try:",
            "im = None"
        ],
        "context_after": [
            "for filename in files:",
            "if filename.endswith('.jpg'):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 8,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 8",
        "module": "convertDynamic",
        "line_content": "for filename in files:",
        "line_number": 8,
        "context_before": [
            "im = None",
            "for root, dirs, files in os.walk(\".\"):"
        ],
        "context_after": [
            "if filename.endswith('.jpg'):",
            "im = Image.open(filename).convert(\"RGB\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 9,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 12",
        "module": "convertDynamic",
        "line_content": "if filename.endswith('.jpg'):",
        "line_number": 9,
        "context_before": [
            "for root, dirs, files in os.walk(\".\"):",
            "for filename in files:"
        ],
        "context_after": [
            "im = Image.open(filename).convert(\"RGB\")",
            "im.save(filename.replace('jpg', 'png'), \"png\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 10,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 16",
        "module": "convertDynamic",
        "line_content": "im = Image.open(filename).convert(\"RGB\")",
        "line_number": 10,
        "context_before": [
            "for filename in files:",
            "if filename.endswith('.jpg'):"
        ],
        "context_after": [
            "im.save(filename.replace('jpg', 'png'), \"png\")",
            "elif filename.endswith('.png'):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 11,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 16",
        "module": "convertDynamic",
        "line_content": "im.save(filename.replace('jpg', 'png'), \"png\")",
        "line_number": 11,
        "context_before": [
            "if filename.endswith('.jpg'):",
            "im = Image.open(filename).convert(\"RGB\")"
        ],
        "context_after": [
            "elif filename.endswith('.png'):",
            "im = Image.open(filename).convert(\"RGB\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 12,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 12",
        "module": "convertDynamic",
        "line_content": "elif filename.endswith('.png'):",
        "line_number": 12,
        "context_before": [
            "im = Image.open(filename).convert(\"RGB\")",
            "im.save(filename.replace('jpg', 'png'), \"png\")"
        ],
        "context_after": [
            "im = Image.open(filename).convert(\"RGB\")",
            "im.save(filename.replace('png', 'jpg'), \"jpeg\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 13,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 16",
        "module": "convertDynamic",
        "line_content": "im = Image.open(filename).convert(\"RGB\")",
        "line_number": 13,
        "context_before": [
            "im.save(filename.replace('jpg', 'png'), \"png\")",
            "elif filename.endswith('.png'):"
        ],
        "context_after": [
            "im.save(filename.replace('png', 'jpg'), \"jpeg\")",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 14,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 16",
        "module": "convertDynamic",
        "line_content": "im.save(filename.replace('png', 'jpg'), \"jpeg\")",
        "line_number": 14,
        "context_before": [
            "elif filename.endswith('.png'):",
            "im = Image.open(filename).convert(\"RGB\")"
        ],
        "context_after": [
            "else:",
            "print('dont have image to convert')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 15,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 8 spaces, expected 12",
        "module": "convertDynamic",
        "line_content": "else:",
        "line_number": 15,
        "context_before": [
            "im = Image.open(filename).convert(\"RGB\")",
            "im.save(filename.replace('png', 'jpg'), \"jpeg\")"
        ],
        "context_after": [
            "print('dont have image to convert')",
            "except IOError:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 16,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 10 spaces, expected 16",
        "module": "convertDynamic",
        "line_content": "print('dont have image to convert')",
        "line_number": 16,
        "context_before": [
            "im.save(filename.replace('png', 'jpg'), \"jpeg\")",
            "else:"
        ],
        "context_after": [
            "except IOError:",
            "print('directory empty!')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 18,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "convertDynamic",
        "line_content": "print('directory empty!')",
        "line_number": 18,
        "context_before": [
            "print('dont have image to convert')",
            "except IOError:"
        ],
        "context_after": [
            "sys.exit()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 19,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 4",
        "module": "convertDynamic",
        "line_content": "sys.exit()",
        "line_number": 19,
        "context_before": [
            "except IOError:",
            "print('directory empty!')"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"convertDynamic\" doesn't conform to snake_case naming style",
        "module": "convertDynamic",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import sys",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "convertDynamic",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import sys",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 6,
        "column": 2,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"im\" doesn't conform to UPPER_CASE naming style",
        "module": "convertDynamic",
        "line_content": "im = None",
        "line_number": 6,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "for root, dirs, files in os.walk(\".\"):",
            "for filename in files:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party import \"PIL.Image\"",
        "module": "convertDynamic",
        "line_content": "import sys",
        "line_number": 2,
        "context_before": [
            "from PIL import Image"
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/convertDynamic.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"PIL.Image\"",
        "module": "convertDynamic",
        "line_content": "import os",
        "line_number": 3,
        "context_before": [
            "from PIL import Image",
            "import sys"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/PNGtoJPG.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"PNGtoJPG\" doesn't conform to snake_case naming style",
        "module": "PNGtoJPG",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "im = Image.open(\"naruto_first.png\").convert(\"RGB\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/convert_Imgs/PNGtoJPG.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "PNGtoJPG",
        "line_content": "from PIL import Image",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "im = Image.open(\"naruto_first.png\").convert(\"RGB\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 11,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "store_emails",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 11,
        "context_before": [
            "import ssl",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 14,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"credential_path\" doesn't conform to UPPER_CASE naming style",
        "module": "store_emails",
        "line_content": "credential_path = \"credentials.txt\"",
        "line_number": 14,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "csv_path = \"mails.csv\"",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 15,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"csv_path\" doesn't conform to UPPER_CASE naming style",
        "module": "store_emails",
        "line_content": "csv_path = \"mails.csv\"",
        "line_number": 15,
        "context_before": [
            "",
            "credential_path = \"credentials.txt\""
        ],
        "context_after": [
            "",
            "logger = logging.getLogger('imap_poller')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 19,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"host\" doesn't conform to UPPER_CASE naming style",
        "module": "store_emails",
        "line_content": "host = \"imap.gmail.com\"",
        "line_number": 19,
        "context_before": [
            "logger = logging.getLogger('imap_poller')",
            ""
        ],
        "context_after": [
            "port = 993",
            "ssl_context = ssl.create_default_context()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 20,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"port\" doesn't conform to UPPER_CASE naming style",
        "module": "store_emails",
        "line_content": "port = 993",
        "line_number": 20,
        "context_before": [
            "",
            "host = \"imap.gmail.com\""
        ],
        "context_after": [
            "ssl_context = ssl.create_default_context()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 28,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "store_emails",
        "line_content": "with open(credential_path, \"rt\") as fr:",
        "line_number": 28,
        "context_before": [
            "mail = imaplib.IMAP4_SSL(host, port, ssl_context=ssl_context)",
            ""
        ],
        "context_after": [
            "user = fr.readline().strip()",
            "pw = fr.readline().strip()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 34,
        "column": 4,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'status'",
        "module": "store_emails",
        "line_content": "status, messages = mail.select(\"INBOX\")",
        "line_number": 34,
        "context_before": [
            "",
            "# get mail box response and select a mail box"
        ],
        "context_after": [
            "return mail, messages",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 44,
        "column": 31,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"N\" doesn't conform to snake_case naming style",
        "module": "store_emails",
        "line_content": "def write_to_csv(mail, writer, N, total_no_of_mails):",
        "line_number": 44,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "for i in range(total_no_of_mails, total_no_of_mails - N, -1):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 44,
        "column": 0,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (19/15)",
        "module": "store_emails",
        "line_content": "def write_to_csv(mail, writer, N, total_no_of_mails):",
        "line_number": 44,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "",
            "for i in range(total_no_of_mails, total_no_of_mails - N, -1):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 71,
        "column": 27,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "store_emails",
        "line_content": "except Exception as exc:",
        "line_number": 71,
        "context_before": [
            "if email_body:",
            "email_text = get_text(email_body.decode('utf-8'))"
        ],
        "context_after": [
            "logger.warning('Caught exception: %r', exc)",
            "if ("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 46,
        "column": 4,
        "message_id": "R1702",
        "message_type": "refactor",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (6/5)",
        "module": "store_emails",
        "line_content": "for i in range(total_no_of_mails, total_no_of_mails - N, -1):",
        "line_number": 46,
        "context_before": [
            "def write_to_csv(mail, writer, N, total_no_of_mails):",
            ""
        ],
        "context_after": [
            "res, data = mail.fetch(str(i), \"(RFC822)\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 47,
        "column": 8,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'res'",
        "module": "store_emails",
        "line_content": "res, data = mail.fetch(str(i), \"(RFC822)\")",
        "line_number": 47,
        "context_before": [
            "",
            "for i in range(total_no_of_mails, total_no_of_mails - N, -1):"
        ],
        "context_after": [
            "",
            "response = data[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 106,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"N\" doesn't conform to snake_case naming style",
        "module": "store_emails",
        "line_content": "N = 2",
        "line_number": 106,
        "context_before": [
            "# no. of latest mails to fetch",
            "# set it equal to total_no_of_emails to fetch all mail in the inbox"
        ],
        "context_after": [
            "",
            "with open(csv_path, \"wt\", encoding=\"utf-8\", newline=\"\") as fw:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 113,
        "column": 15,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "store_emails",
        "line_content": "except Exception as exc:",
        "line_number": 113,
        "context_before": [
            "try:",
            "write_to_csv(mail, writer, N, total_no_of_mails)"
        ],
        "context_after": [
            "logger.warning('Caught exception: %r', exc)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Store_emails_in_csv/store_emails.py",
        "line": 8,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import os",
        "module": "store_emails",
        "line_content": "import os",
        "line_number": 8,
        "context_before": [
            "import imaplib",
            "import logging"
        ],
        "context_after": [
            "import ssl",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_Based_Hangman_Game/hangman.py",
        "line": 7,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "hangman",
        "line_content": "with open('words.json') as json_file:",
        "line_number": 7,
        "context_before": [
            "# function to randomly get one word from words.py and convert the word to uppercase",
            "def get_word():"
        ],
        "context_after": [
            "data = load(json_file)",
            "wordArray = data[\"word_list\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_Based_Hangman_Game/hangman.py",
        "line": 9,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"wordArray\" doesn't conform to snake_case naming style",
        "module": "hangman",
        "line_content": "wordArray = data[\"word_list\"]",
        "line_number": 9,
        "context_before": [
            "with open('words.json') as json_file:",
            "data = load(json_file)"
        ],
        "context_after": [
            "word = random.choice(wordArray)",
            "word = word.upper()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Terminal_Based_Hangman_Game/hangman.py",
        "line": 16,
        "column": 0,
        "message_id": "R0912",
        "message_type": "refactor",
        "symbol": "too-many-branches",
        "message": "Too many branches (14/12)",
        "module": "hangman",
        "line_content": "def play(word):",
        "line_number": 16,
        "context_before": [
            "",
            "# function to play the game"
        ],
        "context_after": [
            "",
            "# intialise variable"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Spell_checker/spell_checker.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'textblob'",
        "module": "spell_checker",
        "line_content": "from textblob import TextBlob    # importing textblob library",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "t = 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Spell_checker/spell_checker.py",
        "line": 3,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"t\" doesn't conform to UPPER_CASE naming style",
        "module": "spell_checker",
        "line_content": "t = 1",
        "line_number": 3,
        "context_before": [
            "from textblob import TextBlob    # importing textblob library",
            ""
        ],
        "context_after": [
            "while t:",
            "a = input(\"Enter the word to be checked:- \")\t # incorrect spelling"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 6,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (182/100)",
        "module": "linearEquations",
        "line_content": "print('The 3 equations are entered individually, each value of the equation is entered separated by a space, for example: \\ninput = 6 5 -3 4 \\nThis will be equal to 6x + 5y- 3z = 4')",
        "line_number": 6,
        "context_before": [
            "from matplotlib import cm",
            ""
        ],
        "context_after": [
            "",
            "print('Enter values for equation 1: ')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 9,
        "column": 40,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "linearEquations",
        "line_content": "a, b, c, d = map(float, input().split())",
        "line_number": 9,
        "context_before": [
            "",
            "print('Enter values for equation 1: ')"
        ],
        "context_after": [
            "",
            "print('Enter values for equation 2: ')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 37,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "linearEquations",
        "line_content": "ax.plot((sol[0],),(sol[1],),(sol[2],),lw=2,c='k', marker='o', markersize=7, markeredgecolor='g', markerfacecolor='white')",
        "line_number": 37,
        "context_before": [
            "ax.plot_surface(X,Y,Z2,alpha=0.5,cmap=cm.Paired,rstride=100,cstride=100)",
            "ax.plot_surface(X,Y,Z3,alpha=0.5,cmap=cm.Pastel1,rstride=100,cstride=100)"
        ],
        "context_after": [
            "ax.set_xlabel('X axis')",
            "ax.set_ylabel('Y axis')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 44,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "linearEquations",
        "line_content": "",
        "line_number": 44,
        "context_before": [
            "plt.show()",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"linearEquations\" doesn't conform to snake_case naming style",
        "module": "linearEquations",
        "line_content": "import numpy as np",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import matplotlib.pyplot as plt",
            "from mpl_toolkits.mplot3d import Axes3D"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "linearEquations",
        "line_content": "import numpy as np",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import matplotlib.pyplot as plt",
            "from mpl_toolkits.mplot3d import Axes3D"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'matplotlib.pyplot'",
        "module": "linearEquations",
        "line_content": "import matplotlib.pyplot as plt",
        "line_number": 2,
        "context_before": [
            "import numpy as np"
        ],
        "context_after": [
            "from mpl_toolkits.mplot3d import Axes3D",
            "from matplotlib import cm"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'mpl_toolkits.mplot3d'",
        "module": "linearEquations",
        "line_content": "from mpl_toolkits.mplot3d import Axes3D",
        "line_number": 3,
        "context_before": [
            "import numpy as np",
            "import matplotlib.pyplot as plt"
        ],
        "context_after": [
            "from matplotlib import cm",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'matplotlib'",
        "module": "linearEquations",
        "line_content": "from matplotlib import cm",
        "line_number": 4,
        "context_before": [
            "import matplotlib.pyplot as plt",
            "from mpl_toolkits.mplot3d import Axes3D"
        ],
        "context_after": [
            "",
            "print('The 3 equations are entered individually, each value of the equation is entered separated by a space, for example: \\ninput = 6 5 -3 4 \\nThis will be equal to 6x + 5y- 3z = 4')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Solver_linear_equations/linearEquations.py",
        "line": 3,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused Axes3D imported from mpl_toolkits.mplot3d",
        "module": "linearEquations",
        "line_content": "from mpl_toolkits.mplot3d import Axes3D",
        "line_number": 3,
        "context_before": [
            "import numpy as np",
            "import matplotlib.pyplot as plt"
        ],
        "context_after": [
            "from matplotlib import cm",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 42,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "scrap-img",
        "line_content": "",
        "line_number": 42,
        "context_before": [
            "with open(output + \"\\\\\" + str(index + 1) + extension, \"wb+\") as f:",
            "f.write(img_data)"
        ],
        "context_after": [
            "f.close()",
            "except Exception:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"scrap-img\" doesn't conform to snake_case naming style",
        "module": "scrap-img",
        "line_content": "from selenium import webdriver",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests as rq",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'selenium'",
        "module": "scrap-img",
        "line_content": "from selenium import webdriver",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests as rq",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "scrap-img",
        "line_content": "import requests as rq",
        "line_number": 2,
        "context_before": [
            "from selenium import webdriver"
        ],
        "context_after": [
            "import os",
            "from bs4 import BeautifulSoup"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "scrap-img",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 4,
        "context_before": [
            "import requests as rq",
            "import os"
        ],
        "context_after": [
            "import time",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 12,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"output\" doesn't conform to UPPER_CASE naming style",
        "module": "scrap-img",
        "line_content": "output = \"output\"",
        "line_number": 12,
        "context_before": [
            "url = input(\"Enter URL : \")",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 15,
        "column": 12,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'path' from outer scope (line 8)",
        "module": "scrap-img",
        "line_content": "def get_url(path, url):",
        "line_number": 15,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "driver = webdriver.Chrome(executable_path=r\"{}\".format(path))",
            "driver.get(url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 15,
        "column": 18,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'url' from outer scope (line 10)",
        "module": "scrap-img",
        "line_content": "def get_url(path, url):",
        "line_number": 15,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "driver = webdriver.Chrome(executable_path=r\"{}\".format(path))",
            "driver.get(url)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 16,
        "column": 46,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "scrap-img",
        "line_content": "driver = webdriver.Chrome(executable_path=r\"{}\".format(path))",
        "line_number": 16,
        "context_before": [
            "",
            "def get_url(path, url):"
        ],
        "context_after": [
            "driver.get(url)",
            "print(\"loading.....\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 30,
        "column": 17,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'img_link' from outer scope (line 54)",
        "module": "scrap-img",
        "line_content": "def download_img(img_link, index):",
        "line_number": 30,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "try:",
            "extensions = [\".jpeg\", \".jpg\", \".png\", \".gif\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 30,
        "column": 27,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'index' from outer scope (line 54)",
        "module": "scrap-img",
        "line_content": "def download_img(img_link, index):",
        "line_number": 30,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "try:",
            "extensions = [\".jpeg\", \".jpg\", \".png\", \".gif\"]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 44,
        "column": 11,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "scrap-img",
        "line_content": "except Exception:",
        "line_number": 44,
        "context_before": [
            "",
            "f.close()"
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party imports \"selenium.webdriver\", \"requests\"",
        "module": "scrap-img",
        "line_content": "import os",
        "line_number": 3,
        "context_before": [
            "from selenium import webdriver",
            "import requests as rq"
        ],
        "context_after": [
            "from bs4 import BeautifulSoup",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Download_images_from_website/scrap-img.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party imports \"selenium.webdriver\", \"requests\", \"bs4.BeautifulSoup\"",
        "module": "scrap-img",
        "line_content": "import time",
        "line_number": 5,
        "context_before": [
            "import os",
            "from bs4 import BeautifulSoup"
        ],
        "context_after": [
            "",
            "# path= E:\\web scraping\\chromedriver_win32\\chromedriver.exe"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snapshot_of_given_website/snapshot_of_given_website.py",
        "line": 26,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "snapshot_of_given_website",
        "line_content": "print('Usage: %s URL' % script_name)",
        "line_number": 26,
        "context_before": [
            "",
            "except IndexError:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Snapshot_of_given_website/snapshot_of_given_website.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'selenium'",
        "module": "snapshot_of_given_website",
        "line_content": "from selenium import webdriver",
        "line_number": 3,
        "context_before": [
            "# -*- cofing: utf-8 -*-",
            "import sys"
        ],
        "context_after": [
            "from selenium.webdriver.chrome.options import Options",
            "import chromedriver_binary"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snapshot_of_given_website/snapshot_of_given_website.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'selenium.webdriver.chrome.options'",
        "module": "snapshot_of_given_website",
        "line_content": "from selenium.webdriver.chrome.options import Options",
        "line_number": 4,
        "context_before": [
            "import sys",
            "from selenium import webdriver"
        ],
        "context_after": [
            "import chromedriver_binary",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snapshot_of_given_website/snapshot_of_given_website.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'chromedriver_binary'",
        "module": "snapshot_of_given_website",
        "line_content": "import chromedriver_binary",
        "line_number": 5,
        "context_before": [
            "from selenium import webdriver",
            "from selenium.webdriver.chrome.options import Options"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Snapshot_of_given_website/snapshot_of_given_website.py",
        "line": 26,
        "column": 10,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "snapshot_of_given_website",
        "line_content": "print('Usage: %s URL' % script_name)",
        "line_number": 26,
        "context_before": [
            "",
            "except IndexError:"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Snapshot_of_given_website/snapshot_of_given_website.py",
        "line": 5,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import chromedriver_binary",
        "module": "snapshot_of_given_website",
        "line_content": "import chromedriver_binary",
        "line_number": 5,
        "context_before": [
            "from selenium import webdriver",
            "from selenium.webdriver.chrome.options import Options"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Zip_Bruter/zipbruter.py",
        "line": 49,
        "column": 22,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "zipbruter",
        "line_content": "print('Found passwd: %s' % passwd)",
        "line_number": 49,
        "context_before": [
            "with ZipFile(self.file) as zipfile:",
            "zipfile.extractall(pwd=passwd.encode())"
        ],
        "context_after": [
            "except (RuntimeError, BadZipfile):",
            "pass"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Zip_Bruter/zipbruter.py",
        "line": 72,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "zipbruter",
        "line_content": "with open(self.word_list, 'r') as file:",
        "line_number": 72,
        "context_before": [
            "def read_wordlist(self) -> str:",
            "\"\"\"Read given wordlist file and yield target passwds\"\"\""
        ],
        "context_after": [
            "for line in file.readlines():",
            "yield line.strip()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 12,
        "column": 24,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "quote_scraper",
        "line_content": "# Tries to open the file",
        "line_number": 12,
        "context_before": [
            "bs=BeautifulSoup(html.text,'html.parser')",
            ""
        ],
        "context_after": [
            "try:",
            "csv_file=open('quote_list.csv','w')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 33,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "quote_scraper",
        "line_content": "",
        "line_number": 33,
        "context_before": [
            "#Writes the current quote,author and tags to a csv file",
            "dictwriter.writerow({'quote':text,'author':author,'tags':tags})"
        ],
        "context_after": [
            "#Finds the link to next page",
            "next=bs.find('li',{'class':'next'})"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 36,
        "column": 20,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "quote_scraper",
        "line_content": "if not next:",
        "line_number": 36,
        "context_before": [
            "#Finds the link to next page",
            "next=bs.find('li',{'class':'next'})"
        ],
        "context_after": [
            "break",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 49,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "quote_scraper",
        "line_content": "",
        "line_number": 49,
        "context_before": [
            "",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 35,
        "column": 8,
        "message_id": "W0622",
        "message_type": "warning",
        "symbol": "redefined-builtin",
        "message": "Redefining built-in 'next'",
        "module": "quote_scraper",
        "line_content": "next=bs.find('li',{'class':'next'})",
        "line_number": 35,
        "context_before": [
            "",
            "#Finds the link to next page"
        ],
        "context_after": [
            "if not next:",
            "break"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "quote_scraper",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            "import csv"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "quote_scraper",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "from bs4 import BeautifulSoup"
        ],
        "context_after": [
            "import csv",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"url\" doesn't conform to UPPER_CASE naming style",
        "module": "quote_scraper",
        "line_content": "url='http://quotes.toscrape.com'",
        "line_number": 6,
        "context_before": [
            "",
            "# URL to the website"
        ],
        "context_after": [
            "",
            "# Getting the html file and parsing with html.parser"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 42,
        "column": 0,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "quote_scraper",
        "line_content": "except:",
        "line_number": 42,
        "context_before": [
            "html=requests.get(url+next.a.attrs['href'])",
            "bs=BeautifulSoup(html.text,'html.parser')"
        ],
        "context_after": [
            "print('Unknown Error!!!')",
            "finally:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 14,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "quote_scraper",
        "line_content": "csv_file=open('quote_list.csv','w')",
        "line_number": 14,
        "context_before": [
            "# Tries to open the file",
            "try:"
        ],
        "context_after": [
            "fieldnames=['quote','author','tags']",
            "dictwriter=csv.DictWriter(csv_file,fieldnames=fieldnames)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"csv\" should be placed before third party imports \"bs4.BeautifulSoup\", \"requests\"",
        "module": "quote_scraper",
        "line_content": "import csv",
        "line_number": 3,
        "context_before": [
            "from bs4 import BeautifulSoup",
            "import requests"
        ],
        "context_after": [
            "",
            "# URL to the website"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_quotes/quote_scraper.py",
        "line": 14,
        "column": 13,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "quote_scraper",
        "line_content": "csv_file=open('quote_list.csv','w')",
        "line_number": 14,
        "context_before": [
            "# Tries to open the file",
            "try:"
        ],
        "context_after": [
            "fieldnames=['quote','author','tags']",
            "dictwriter=csv.DictWriter(csv_file,fieldnames=fieldnames)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wifi_windows_password_displayer/main.py",
        "line": 14,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "main",
        "line_content": "self.export_xml(command=\"netsh wlan export profile interface=wi-fi key=clear folder=passwords\")",
        "line_number": 14,
        "context_before": [
            "os.system(\"mkdir passwords\")",
            ""
        ],
        "context_after": [
            "self.display_password()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wifi_windows_password_displayer/main.py",
        "line": 18,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "main",
        "line_content": "with open(\"tmp.txt\", \"w\") as tmp:",
        "line_number": 18,
        "context_before": [
            "",
            "def export_xml(self, command=None):"
        ],
        "context_after": [
            "export_command = command.split(' ')",
            "subprocess.run(export_command,stdout=tmp)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wifi_windows_password_displayer/main.py",
        "line": 20,
        "column": 12,
        "message_id": "W1510",
        "message_type": "warning",
        "symbol": "subprocess-run-check",
        "message": "'subprocess.run' used without explicitly defining the value for 'check'.",
        "module": "main",
        "line_content": "subprocess.run(export_command,stdout=tmp)",
        "line_number": 20,
        "context_before": [
            "with open(\"tmp.txt\", \"w\") as tmp:",
            "export_command = command.split(' ')"
        ],
        "context_after": [
            "os.remove(\"tmp.txt\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wifi_windows_password_displayer/main.py",
        "line": 43,
        "column": 8,
        "message_id": "C0206",
        "message_type": "convention",
        "symbol": "consider-using-dict-items",
        "message": "Consider iterating with .items()",
        "module": "main",
        "line_content": "for i in info:",
        "line_number": 43,
        "context_before": [
            "list_ssid, list_pwd = [], []",
            "print(\"Here is the list of Wi-Fi networks registered on this device : \\n\")"
        ],
        "context_after": [
            "print(f\"[{index}] {i}\")",
            "list_ssid.append(i)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Wifi_windows_password_displayer/main.py",
        "line": 61,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"instance\" doesn't conform to PascalCase naming style",
        "module": "main",
        "line_content": "instance = PwdDisplay",
        "line_number": 61,
        "context_before": [
            "",
            "if __name__ == '__main__':"
        ],
        "context_after": [
            "instance()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/All_links_from_given_webpage/get_links.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "get_links",
        "line_content": "import requests as rq",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from bs4 import BeautifulSoup",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/All_links_from_given_webpage/get_links.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "get_links",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 2,
        "context_before": [
            "import requests as rq"
        ],
        "context_after": [
            "",
            "url = input(\"Enter Link: \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/All_links_from_given_webpage/get_links.py",
        "line": 16,
        "column": 5,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "get_links",
        "line_content": "with open(\"myLinks.txt\", 'a') as saved:",
        "line_number": 16,
        "context_before": [
            "# Writing the output to a file (myLinks.txt) instead of to stdout",
            "# You can change 'a' to 'w' to overwrite the file each time"
        ],
        "context_after": [
            "print(links[:10], file=saved)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Games/QuizGame.py",
        "line": 5,
        "column": 10,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "QuizGame",
        "line_content": "quit()",
        "line_number": 5,
        "context_before": [
            "if Player.lower() != 'yes':",
            "print(\"Good Bye\")"
        ],
        "context_after": [
            "",
            "name_player = input(\"Enter Your Name: \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Games/QuizGame.py",
        "line": 19,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "QuizGame",
        "line_content": "",
        "line_number": 19,
        "context_before": [
            "else:",
            "print('Wrong')"
        ],
        "context_after": [
            "answer = input(' What is GPU stands for? \\n ')",
            "if answer.lower() == 'graphical processing unit':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Games/QuizGame.py",
        "line": 47,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "QuizGame",
        "line_content": "",
        "line_number": 47,
        "context_before": [
            "else:",
            "print('Wrong')"
        ],
        "context_after": [
            "print(\"You got the \" + str(score)+ \" correct answers\")",
            "print(\"You got the \" + str((score/5) *100)+ \" correct answers\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Games/QuizGame.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"QuizGame\" doesn't conform to snake_case naming style",
        "module": "QuizGame",
        "line_content": "print(\" Welcome To My Quiz Game \\n Interesting Game to Play\")",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "Player = input(\" Do you want to play the game? \\n\" )",
            "if Player.lower() != 'yes':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Games/QuizGame.py",
        "line": 5,
        "column": 4,
        "message_id": "R1722",
        "message_type": "refactor",
        "symbol": "consider-using-sys-exit",
        "message": "Consider using 'sys.exit' instead",
        "module": "QuizGame",
        "line_content": "quit()",
        "line_number": 5,
        "context_before": [
            "if Player.lower() != 'yes':",
            "print(\"Good Bye\")"
        ],
        "context_after": [
            "",
            "name_player = input(\"Enter Your Name: \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Games/QuizGame.py",
        "line": 11,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"score\" doesn't conform to UPPER_CASE naming style",
        "module": "QuizGame",
        "line_content": "score = 0",
        "line_number": 11,
        "context_before": [
            "print(\"Let's Start the Game :) \",name_player)",
            ""
        ],
        "context_after": [
            "",
            "answer = input(' What is CPU stands for? \\n ')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Text_to_speech/txtToSpeech.py",
        "line": 1,
        "column": 21,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "txtToSpeech",
        "line_content": "from gtts import gTTS",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "file = open(\"abc.txt\", \"r\").read()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Text_to_speech/txtToSpeech.py",
        "line": 9,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "txtToSpeech",
        "line_content": "#print(file)",
        "line_number": 9,
        "context_before": [
            "os.system(\"voice.mp3\")",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Text_to_speech/txtToSpeech.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"txtToSpeech\" doesn't conform to snake_case naming style",
        "module": "txtToSpeech",
        "line_content": "from gtts import gTTS",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "file = open(\"abc.txt\", \"r\").read()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Text_to_speech/txtToSpeech.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'gtts'",
        "module": "txtToSpeech",
        "line_content": "from gtts import gTTS",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "file = open(\"abc.txt\", \"r\").read()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Text_to_speech/txtToSpeech.py",
        "line": 3,
        "column": 7,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "txtToSpeech",
        "line_content": "file = open(\"abc.txt\", \"r\").read()",
        "line_number": 3,
        "context_before": [
            "from gtts import gTTS",
            "import os"
        ],
        "context_after": [
            "",
            "speech = gTTS(text=file, lang='en', slow=False)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Text_to_speech/txtToSpeech.py",
        "line": 3,
        "column": 7,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "txtToSpeech",
        "line_content": "file = open(\"abc.txt\", \"r\").read()",
        "line_number": 3,
        "context_before": [
            "from gtts import gTTS",
            "import os"
        ],
        "context_after": [
            "",
            "speech = gTTS(text=file, lang='en', slow=False)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Text_to_speech/txtToSpeech.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"gtts.gTTS\"",
        "module": "txtToSpeech",
        "line_content": "import os",
        "line_number": 2,
        "context_before": [
            "from gtts import gTTS"
        ],
        "context_after": [
            "file = open(\"abc.txt\", \"r\").read()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/whatsapp_Bot/main.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pywhatkit'",
        "module": "main",
        "line_content": "import pywhatkit",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from datetime import datetime",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/whatsapp_Bot/main.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"datetime.datetime\" should be placed before third party import \"pywhatkit\"",
        "module": "main",
        "line_content": "from datetime import datetime",
        "line_number": 2,
        "context_before": [
            "import pywhatkit"
        ],
        "context_after": [
            "",
            "now = datetime.now()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Time_to_load_website/time_to_load_website.py",
        "line": 5,
        "column": 18,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'url' from outer scope (line 30)",
        "module": "time_to_load_website",
        "line_content": "def get_load_time(url):",
        "line_number": 5,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "\"\"\"This function takes a user defined url as input",
            "and returns the time taken to load that url in seconds."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Time_to_load_website/time_to_load_website.py",
        "line": 19,
        "column": 24,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "time_to_load_website",
        "line_content": "open_this_url = urlopen(\"https://\" + url)  # Adding https to the url",
        "line_number": 19,
        "context_before": [
            "open_this_url = urlopen(url)  # Open the url as entered by the user",
            "else:"
        ],
        "context_after": [
            "start_time = time.time()  # Time stamp before the reading of url starts",
            "open_this_url.read()  # Reading the user defined url"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 13,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (151/100)",
        "module": "biling_system",
        "line_content": "title = Label(self.root, text=\"Billing Software\", font=('times new roman', 30, 'bold'), pady=2, bd=12, bg=\"#badc57\", fg=\"Black\", relief=GROOVE)",
        "line_number": 13,
        "context_before": [
            "self.root.title(\"Billing Software\")",
            "bg_color = \"#badc57\""
        ],
        "context_after": [
            "title.pack(fill=X)",
            "# ================variables======================="
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 52,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (130/100)",
        "module": "biling_system",
        "line_content": "F1 = LabelFrame(self.root, text=\"Customer Details\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 52,
        "context_before": [
            "self.cold_drinks_tax = StringVar()",
            "# =============customer retail details======================"
        ],
        "context_after": [
            "F1.place(x=0, y=80, relwidth=1)",
            "cname_lbl = Label(F1, text=\"Customer Name:\", bg=bg_color, font=('times new roman', 15, 'bold'))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 54,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "biling_system",
        "line_content": "cname_lbl = Label(F1, text=\"Customer Name:\", bg=bg_color, font=('times new roman', 15, 'bold'))",
        "line_number": 54,
        "context_before": [
            "F1 = LabelFrame(self.root, text=\"Customer Details\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
            "F1.place(x=0, y=80, relwidth=1)"
        ],
        "context_after": [
            "cname_lbl.grid(row=0, column=0, padx=20, pady=5)",
            "cname_txt = Entry(F1, width=15, textvariable=self.c_name, font='arial 15', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 56,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "biling_system",
        "line_content": "cname_txt = Entry(F1, width=15, textvariable=self.c_name, font='arial 15', bd=7, relief=GROOVE)",
        "line_number": 56,
        "context_before": [
            "cname_lbl = Label(F1, text=\"Customer Name:\", bg=bg_color, font=('times new roman', 15, 'bold'))",
            "cname_lbl.grid(row=0, column=0, padx=20, pady=5)"
        ],
        "context_after": [
            "cname_txt.grid(row=0, column=1, pady=5, padx=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 59,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (104/100)",
        "module": "biling_system",
        "line_content": "cphn_lbl = Label(F1, text=\"Customer Phone:\", bg=\"#badc57\", font=('times new roman', 15, 'bold'))",
        "line_number": 59,
        "context_before": [
            "cname_txt.grid(row=0, column=1, pady=5, padx=10)",
            ""
        ],
        "context_after": [
            "cphn_lbl.grid(row=0, column=2, padx=20, pady=5)",
            "cphn_txt = Entry(F1, width=15, textvariable=self.c_phone, font='arial 15', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 61,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "biling_system",
        "line_content": "cphn_txt = Entry(F1, width=15, textvariable=self.c_phone, font='arial 15', bd=7, relief=GROOVE)",
        "line_number": 61,
        "context_before": [
            "cphn_lbl = Label(F1, text=\"Customer Phone:\", bg=\"#badc57\", font=('times new roman', 15, 'bold'))",
            "cphn_lbl.grid(row=0, column=2, padx=20, pady=5)"
        ],
        "context_after": [
            "cphn_txt.grid(row=0, column=3, pady=5, padx=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 64,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "biling_system",
        "line_content": "c_bill_lbl = Label(F1, text=\"Bill Number:\", bg=\"#badc57\", font=('times new roman', 15, 'bold'))",
        "line_number": 64,
        "context_before": [
            "cphn_txt.grid(row=0, column=3, pady=5, padx=10)",
            ""
        ],
        "context_after": [
            "c_bill_lbl.grid(row=0, column=4, padx=20, pady=5)",
            "c_bill_txt = Entry(F1, width=15, textvariable=self.search_bill, font='arial 15', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 66,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "biling_system",
        "line_content": "c_bill_txt = Entry(F1, width=15, textvariable=self.search_bill, font='arial 15', bd=7, relief=GROOVE)",
        "line_number": 66,
        "context_before": [
            "c_bill_lbl = Label(F1, text=\"Bill Number:\", bg=\"#badc57\", font=('times new roman', 15, 'bold'))",
            "c_bill_lbl.grid(row=0, column=4, padx=20, pady=5)"
        ],
        "context_after": [
            "c_bill_txt.grid(row=0, column=5, pady=5, padx=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 69,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (126/100)",
        "module": "biling_system",
        "line_content": "bil_btn = Button(F1, text=\"Search\", command=self.find_bill, width=10, bd=7, font=('arial', 12, 'bold'), relief=GROOVE)",
        "line_number": 69,
        "context_before": [
            "c_bill_txt.grid(row=0, column=5, pady=5, padx=10)",
            ""
        ],
        "context_after": [
            "bil_btn.grid(row=0, column=6, pady=5, padx=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 73,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (129/100)",
        "module": "biling_system",
        "line_content": "F2 = LabelFrame(self.root, text=\"Medical Purpose\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 73,
        "context_before": [
            "",
            "# ===================Medical===================================="
        ],
        "context_after": [
            "F2.place(x=5, y=180, width=325, height=380)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 76,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (115/100)",
        "module": "biling_system",
        "line_content": "sanitizer_lbl = Label(F2, text=\"Sanitizer\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 76,
        "context_before": [
            "F2.place(x=5, y=180, width=325, height=380)",
            ""
        ],
        "context_after": [
            "sanitizer_lbl.grid(row=0, column=0, padx=10, pady=10, sticky='W')",
            "sanitizer_txt = Entry(F2, width=10, textvariable=self.sanitizer, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 78,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (131/100)",
        "module": "biling_system",
        "line_content": "sanitizer_txt = Entry(F2, width=10, textvariable=self.sanitizer, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 78,
        "context_before": [
            "sanitizer_lbl = Label(F2, text=\"Sanitizer\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "sanitizer_lbl.grid(row=0, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "sanitizer_txt.grid(row=0, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 81,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "biling_system",
        "line_content": "mask_lbl = Label(F2, text=\"Mask\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 81,
        "context_before": [
            "sanitizer_txt.grid(row=0, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "mask_lbl.grid(row=1, column=0, padx=10, pady=10, sticky='W')",
            "mask_txt = Entry(F2, width=10, textvariable=self.mask, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 83,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "biling_system",
        "line_content": "mask_txt = Entry(F2, width=10, textvariable=self.mask, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 83,
        "context_before": [
            "mask_lbl = Label(F2, text=\"Mask\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "mask_lbl.grid(row=1, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "mask_txt.grid(row=1, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 86,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (119/100)",
        "module": "biling_system",
        "line_content": "hand_gloves_lbl = Label(F2, text=\"Hand Gloves\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 86,
        "context_before": [
            "mask_txt.grid(row=1, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "hand_gloves_lbl.grid(row=2, column=0, padx=10, pady=10, sticky='W')",
            "hand_gloves_txt = Entry(F2, width=10, textvariable=self.hand_gloves, font=('times new roman', 16, 'bold'), bd=5, relief =GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 88,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (136/100)",
        "module": "biling_system",
        "line_content": "hand_gloves_txt = Entry(F2, width=10, textvariable=self.hand_gloves, font=('times new roman', 16, 'bold'), bd=5, relief =GROOVE)",
        "line_number": 88,
        "context_before": [
            "hand_gloves_lbl = Label(F2, text=\"Hand Gloves\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "hand_gloves_lbl.grid(row=2, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "hand_gloves_txt.grid(row=2, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 91,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "biling_system",
        "line_content": "dettol_lbl = Label(F2, text=\"Dettol\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 91,
        "context_before": [
            "hand_gloves_txt.grid(row=2, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "dettol_lbl.grid(row=3, column=0, padx=10, pady=10, sticky='W')",
            "dettol_txt = Entry(F2, width=10, textvariable=self.dettol, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 93,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (125/100)",
        "module": "biling_system",
        "line_content": "dettol_txt = Entry(F2, width=10, textvariable=self.dettol, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 93,
        "context_before": [
            "dettol_lbl = Label(F2, text=\"Dettol\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "dettol_lbl.grid(row=3, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "dettol_txt.grid(row=3, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 96,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (118/100)",
        "module": "biling_system",
        "line_content": "newsprin_lbl = Label(F2, text=\"Newsprin\", font =('times new roman', 16, 'bold'), bg = \"#badc57\", fg = \"black\")",
        "line_number": 96,
        "context_before": [
            "dettol_txt.grid(row=3, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "newsprin_lbl.grid(row=4, column=0, padx=10, pady=10, sticky='W')",
            "newsprin_txt = Entry(F2, width=10, textvariable=self.newsprin, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 98,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (129/100)",
        "module": "biling_system",
        "line_content": "newsprin_txt = Entry(F2, width=10, textvariable=self.newsprin, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 98,
        "context_before": [
            "newsprin_lbl = Label(F2, text=\"Newsprin\", font =('times new roman', 16, 'bold'), bg = \"#badc57\", fg = \"black\")",
            "newsprin_lbl.grid(row=4, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "newsprin_txt.grid(row=4, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 101,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (119/100)",
        "module": "biling_system",
        "line_content": "thermal_gun_lbl = Label(F2, text=\"Thermal Gun\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 101,
        "context_before": [
            "newsprin_txt.grid(row=4, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "thermal_gun_lbl.grid(row=5, column=0, padx=10, pady=10, sticky='W')",
            "thermal_gun_txt = Entry(F2, width=10, textvariable=self.thermal_gun, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 103,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (135/100)",
        "module": "biling_system",
        "line_content": "thermal_gun_txt = Entry(F2, width=10, textvariable=self.thermal_gun, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 103,
        "context_before": [
            "thermal_gun_lbl = Label(F2, text=\"Thermal Gun\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "thermal_gun_lbl.grid(row=5, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "thermal_gun_txt.grid(row=5, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 107,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (127/100)",
        "module": "biling_system",
        "line_content": "F3 = LabelFrame(self.root, text=\"Grocery Items\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 107,
        "context_before": [
            "",
            "# ==========GroceryItems========================="
        ],
        "context_after": [
            "F3.place(x=340, y=180, width=325, height=380)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 110,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "biling_system",
        "line_content": "rice_lbl = Label(F3, text=\"Rice\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 110,
        "context_before": [
            "F3.place(x=340, y=180, width=325, height=380)",
            ""
        ],
        "context_after": [
            "rice_lbl.grid(row=0, column=0, padx=10, pady=10, sticky='W')",
            "rice_txt = Entry(F3, width=10, textvariable=self.rice, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 112,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "biling_system",
        "line_content": "rice_txt = Entry(F3, width=10, textvariable=self.rice, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 112,
        "context_before": [
            "rice_lbl = Label(F3, text=\"Rice\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "rice_lbl.grid(row=0, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "rice_txt.grid(row=0, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 115,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (113/100)",
        "module": "biling_system",
        "line_content": "food_oil_lbl = Label(F3, text=\"Food Oil\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 115,
        "context_before": [
            "rice_txt.grid(row=0, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "food_oil_lbl.grid(row=1, column=0, padx=10, pady=10, sticky='W')",
            "food_oil_txt = Entry(F3, width=10, textvariable=self.food_oil, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 117,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (129/100)",
        "module": "biling_system",
        "line_content": "food_oil_txt = Entry(F3, width=10, textvariable=self.food_oil, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 117,
        "context_before": [
            "food_oil_lbl = Label(F3, text=\"Food Oil\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "food_oil_lbl.grid(row=1, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "food_oil_txt.grid(row=1, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 120,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "biling_system",
        "line_content": "wheat_lbl = Label(F3, text=\"Wheat\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 120,
        "context_before": [
            "food_oil_txt.grid(row=1, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "wheat_lbl.grid(row=2, column=0, padx=10, pady=10, sticky='W')",
            "wheat_txt = Entry(F3, width=10, textvariable=self.wheat, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 122,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "biling_system",
        "line_content": "wheat_txt = Entry(F3, width=10, textvariable=self.wheat, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 122,
        "context_before": [
            "wheat_lbl = Label(F3, text=\"Wheat\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "wheat_lbl.grid(row=2, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "wheat_txt.grid(row=2, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 125,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "biling_system",
        "line_content": "daal_lbl = Label(F3, text=\"Daal\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 125,
        "context_before": [
            "wheat_txt.grid(row=2, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "daal_lbl.grid(row=3, column=0, padx=10, pady=10, sticky='W')",
            "daal_txt = Entry(F3, width=10, textvariable=self.daal, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 127,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "biling_system",
        "line_content": "daal_txt = Entry(F3, width=10, textvariable=self.daal, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 127,
        "context_before": [
            "daal_lbl = Label(F3, text=\"Daal\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "daal_lbl.grid(row=3, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "daal_txt.grid(row=3, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 130,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "biling_system",
        "line_content": "flour_lbl = Label(F3, text=\"Flour\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 130,
        "context_before": [
            "daal_txt.grid(row=3, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "flour_lbl.grid(row=4, column=0, padx=10, pady=10, sticky='W')",
            "flour_txt = Entry(F3, width=10, textvariable=self.flour, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 132,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "biling_system",
        "line_content": "flour_txt = Entry(F3, width=10, textvariable=self.flour, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 132,
        "context_before": [
            "flour_lbl = Label(F3, text=\"Flour\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "flour_lbl.grid(row=4, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "flour_txt.grid(row=4, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 135,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "biling_system",
        "line_content": "maggi_lbl = Label(F3, text=\"Maggi\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 135,
        "context_before": [
            "flour_txt.grid(row=4, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "maggi_lbl.grid(row=5, column=0, padx=10, pady=10, sticky='W')",
            "maggi_txt = Entry(F3, width=10, textvariable=self.maggi, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 137,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "biling_system",
        "line_content": "maggi_txt = Entry(F3, width=10, textvariable=self.maggi, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 137,
        "context_before": [
            "maggi_lbl = Label(F3, text=\"Maggi\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "maggi_lbl.grid(row=5, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "maggi_txt.grid(row=5, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 141,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (125/100)",
        "module": "biling_system",
        "line_content": "F4 = LabelFrame(self.root, text=\"Cold Drinks\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 141,
        "context_before": [
            "",
            "# ===========ColdDrinks================================"
        ],
        "context_after": [
            "F4.place(x=670, y=180, width=325, height=380)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 144,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "biling_system",
        "line_content": "sprite_lbl = Label(F4, text=\"Sprite\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 144,
        "context_before": [
            "F4.place(x=670, y=180, width=325, height=380)",
            ""
        ],
        "context_after": [
            "sprite_lbl.grid(row=0, column=0, padx=10, pady=10, sticky='W')",
            "sprite_txt = Entry(F4, width=10, textvariable=self.sprite, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 146,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (125/100)",
        "module": "biling_system",
        "line_content": "sprite_txt = Entry(F4, width=10, textvariable=self.sprite, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 146,
        "context_before": [
            "sprite_lbl = Label(F4, text=\"Sprite\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "sprite_lbl.grid(row=0, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "sprite_txt.grid(row=0, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 149,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "biling_system",
        "line_content": "limka_lbl = Label(F4, text=\"Limka\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 149,
        "context_before": [
            "sprite_txt.grid(row=0, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "limka_lbl.grid(row=1, column=0, padx=10, pady=10, sticky='W')",
            "limka_txt = Entry(F4, width=10, textvariable=self.limka, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 151,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "biling_system",
        "line_content": "limka_txt = Entry(F4, width=10, textvariable=self.limka, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 151,
        "context_before": [
            "limka_lbl = Label(F4, text=\"Limka\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "limka_lbl.grid(row=1, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "limka_txt.grid(row=1, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 154,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "biling_system",
        "line_content": "mazza_lbl = Label(F4, text=\"Mazza\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 154,
        "context_before": [
            "limka_txt.grid(row=1, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "mazza_lbl.grid(row=2, column=0, padx=10, pady=10, sticky='W')",
            "wheat_txt = Entry(F4, width=10, textvariable=self.mazza, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 156,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "biling_system",
        "line_content": "wheat_txt = Entry(F4, width=10, textvariable=self.mazza, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 156,
        "context_before": [
            "mazza_lbl = Label(F4, text=\"Mazza\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "mazza_lbl.grid(row=2, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "wheat_txt.grid(row=2, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 159,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "biling_system",
        "line_content": "coke_lbl = Label(F4, text=\"Coke\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 159,
        "context_before": [
            "wheat_txt.grid(row=2, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "coke_lbl.grid(row=3, column=0, padx=10, pady=10, sticky='W')",
            "coke_txt = Entry(F4, width=10, textvariable=self.coke, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 161,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "biling_system",
        "line_content": "coke_txt = Entry(F4, width=10, textvariable=self.coke, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 161,
        "context_before": [
            "coke_lbl = Label(F4, text=\"Coke\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "coke_lbl.grid(row=3, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "coke_txt.grid(row=3, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 164,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "biling_system",
        "line_content": "fanta_lbl = Label(F4, text=\"Fanta\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 164,
        "context_before": [
            "coke_txt.grid(row=3, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "fanta_lbl.grid(row=4, column=0, padx=10, pady=10, sticky='W')",
            "fanta_txt = Entry(F4, width=10, textvariable=self.fanta, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 166,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "biling_system",
        "line_content": "fanta_txt = Entry(F4, width=10, textvariable=self.fanta, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 166,
        "context_before": [
            "fanta_lbl = Label(F4, text=\"Fanta\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "fanta_lbl.grid(row=4, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "fanta_txt.grid(row=4, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 169,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "biling_system",
        "line_content": "mountain_duo_lbl = Label(F4, text=\"Mountain Duo\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 169,
        "context_before": [
            "fanta_txt.grid(row=4, column=1, padx=10, pady=10)",
            ""
        ],
        "context_after": [
            "mountain_duo_lbl.grid(row=5, column=0, padx=10, pady=10, sticky='W')",
            "mountain_duo_txt = Entry(F4, width=10, textvariable=self.mountain_duo, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 171,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (137/100)",
        "module": "biling_system",
        "line_content": "mountain_duo_txt = Entry(F4, width=10, textvariable=self.mountain_duo, font=('times new roman', 16, 'bold'), bd=5, relief=GROOVE)",
        "line_number": 171,
        "context_before": [
            "mountain_duo_lbl = Label(F4, text=\"Mountain Duo\", font=('times new roman', 16, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "mountain_duo_lbl.grid(row=5, column=0, padx=10, pady=10, sticky='W')"
        ],
        "context_after": [
            "mountain_duo_txt.grid(row=5, column=1, padx=10, pady=10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 187,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (123/100)",
        "module": "biling_system",
        "line_content": "F6 = LabelFrame(self.root, text=\"Bill Area\", font=('times new roman', 14, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 187,
        "context_before": [
            "",
            "# =======================ButtonFrame============="
        ],
        "context_after": [
            "F6.place(x=0, y=560, relwidth=1, height=140)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 190,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (118/100)",
        "module": "biling_system",
        "line_content": "m1_lbl = Label(F6, text=\"Total Medical Price\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 190,
        "context_before": [
            "F6.place(x=0, y=560, relwidth=1, height=140)",
            ""
        ],
        "context_after": [
            "m1_lbl.grid(row=0, column=0, padx=20, pady=1, sticky='W')",
            "m1_txt = Entry(F6, width=18, textvariable=self.medical_price, font='arial 10 bold', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 192,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (112/100)",
        "module": "biling_system",
        "line_content": "m1_txt = Entry(F6, width=18, textvariable=self.medical_price, font='arial 10 bold', bd=7, relief=GROOVE)",
        "line_number": 192,
        "context_before": [
            "m1_lbl = Label(F6, text=\"Total Medical Price\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "m1_lbl.grid(row=0, column=0, padx=20, pady=1, sticky='W')"
        ],
        "context_after": [
            "m1_txt.grid(row=0, column=1, padx=18, pady=1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 195,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (118/100)",
        "module": "biling_system",
        "line_content": "m2_lbl = Label(F6, text=\"Total Grocery Price\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 195,
        "context_before": [
            "m1_txt.grid(row=0, column=1, padx=18, pady=1)",
            ""
        ],
        "context_after": [
            "m2_lbl.grid(row=1, column=0, padx=20, pady=1, sticky='W')",
            "m2_txt = Entry(F6, width=18, textvariable=self.grocery_price, font='arial 10 bold', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 197,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (112/100)",
        "module": "biling_system",
        "line_content": "m2_txt = Entry(F6, width=18, textvariable=self.grocery_price, font='arial 10 bold', bd=7, relief=GROOVE)",
        "line_number": 197,
        "context_before": [
            "m2_lbl = Label(F6, text=\"Total Grocery Price\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "m2_lbl.grid(row=1, column=0, padx=20, pady=1, sticky='W')"
        ],
        "context_after": [
            "m2_txt.grid(row=1, column=1, padx=18, pady=1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 200,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (122/100)",
        "module": "biling_system",
        "line_content": "m3_lbl = Label(F6, text=\"Total Cold Drinks Price\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 200,
        "context_before": [
            "m2_txt.grid(row=1, column=1, padx=18, pady=1)",
            ""
        ],
        "context_after": [
            "m3_lbl.grid(row=2, column=0, padx=20, pady=1, sticky='W')",
            "m3_txt = Entry(F6, width=18, textvariable=self.cold_drinks_price, font='arial 10 bold', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 202,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (116/100)",
        "module": "biling_system",
        "line_content": "m3_txt = Entry(F6, width=18, textvariable=self.cold_drinks_price, font='arial 10 bold', bd=7, relief=GROOVE)",
        "line_number": 202,
        "context_before": [
            "m3_lbl = Label(F6, text=\"Total Cold Drinks Price\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "m3_lbl.grid(row=2, column=0, padx=20, pady=1, sticky='W')"
        ],
        "context_after": [
            "m3_txt.grid(row=2, column=1, padx=18, pady=1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 205,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "biling_system",
        "line_content": "m4_lbl = Label(F6, text=\"Medical Tax\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 205,
        "context_before": [
            "m3_txt.grid(row=2, column=1, padx=18, pady=1)",
            ""
        ],
        "context_after": [
            "m4_lbl.grid(row=0, column=2, padx=20, pady=1, sticky='W')",
            "m4_txt = Entry(F6, width=18, textvariable=self.medical_tax, font='arial 10 bold', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 207,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "biling_system",
        "line_content": "m4_txt = Entry(F6, width=18, textvariable=self.medical_tax, font='arial 10 bold', bd=7, relief=GROOVE)",
        "line_number": 207,
        "context_before": [
            "m4_lbl = Label(F6, text=\"Medical Tax\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "m4_lbl.grid(row=0, column=2, padx=20, pady=1, sticky='W')"
        ],
        "context_after": [
            "m4_txt.grid(row=0, column=3, padx=18, pady=1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 210,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "biling_system",
        "line_content": "m5_lbl = Label(F6, text=\"Grocery Tax\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 210,
        "context_before": [
            "m4_txt.grid(row=0, column=3, padx=18, pady=1)",
            ""
        ],
        "context_after": [
            "m5_lbl.grid(row=1, column=2, padx=20, pady=1, sticky='W')",
            "m5_txt = Entry(F6, width=18, textvariable=self.grocery_tax, font='arial 10 bold', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 212,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "biling_system",
        "line_content": "m5_txt = Entry(F6, width=18, textvariable=self.grocery_tax, font='arial 10 bold', bd=7, relief=GROOVE)",
        "line_number": 212,
        "context_before": [
            "m5_lbl = Label(F6, text=\"Grocery Tax\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "m5_lbl.grid(row=1, column=2, padx=20, pady=1, sticky='W')"
        ],
        "context_after": [
            "m5_txt.grid(row=1, column=3, padx=18, pady=1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 215,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (114/100)",
        "module": "biling_system",
        "line_content": "m6_lbl = Label(F6, text=\"Cold Drinks Tax\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
        "line_number": 215,
        "context_before": [
            "m5_txt.grid(row=1, column=3, padx=18, pady=1)",
            ""
        ],
        "context_after": [
            "m6_lbl.grid(row=2, column=2, padx=20, pady=1, sticky='W')",
            "m6_txt = Entry(F6, width=18, textvariable=self.cold_drinks_tax, font='arial 10 bold', bd=7, relief=GROOVE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 217,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (114/100)",
        "module": "biling_system",
        "line_content": "m6_txt = Entry(F6, width=18, textvariable=self.cold_drinks_tax, font='arial 10 bold', bd=7, relief=GROOVE)",
        "line_number": 217,
        "context_before": [
            "m6_lbl = Label(F6, text=\"Cold Drinks Tax\", font=('times new roman', 14, 'bold'), bg=\"#badc57\", fg=\"black\")",
            "m6_lbl.grid(row=2, column=2, padx=20, pady=1, sticky='W')"
        ],
        "context_after": [
            "m6_txt.grid(row=2, column=3, padx=18, pady=1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 224,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (140/100)",
        "module": "biling_system",
        "line_content": "total_btn = Button(btn_f, command=self.total, text=\"Total\", bg=\"#535C68\", bd=2, fg=\"white\", pady=15, width=12, font='arial 13 bold')",
        "line_number": 224,
        "context_before": [
            "btn_f.place(x=760, width=580, height=105)",
            ""
        ],
        "context_after": [
            "total_btn.grid(row=0, column=0, padx=5, pady=5)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 227,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (159/100)",
        "module": "biling_system",
        "line_content": "generateBill_btn = Button(btn_f, command=self.bill_area, text=\"Generate Bill\", bd=2, bg=\"#535C68\", fg=\"white\", pady=12, width=12, font='arial 13 bold')",
        "line_number": 227,
        "context_before": [
            "total_btn.grid(row=0, column=0, padx=5, pady=5)",
            ""
        ],
        "context_after": [
            "generateBill_btn.grid(row=0, column=1, padx=5, pady=5)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 230,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (145/100)",
        "module": "biling_system",
        "line_content": "clear_btn = Button(btn_f, command=self.clear_data, text=\"Clear\", bg=\"#535C68\", bd=2, fg=\"white\", pady=15, width=12, font='arial 13 bold')",
        "line_number": 230,
        "context_before": [
            "generateBill_btn.grid(row=0, column=1, padx=5, pady=5)",
            ""
        ],
        "context_after": [
            "clear_btn.grid(row=0, column=2, padx=5, pady=5)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 233,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (141/100)",
        "module": "biling_system",
        "line_content": "exit_btn = Button(btn_f, command=self.exit_app, text=\"Exit\", bd=2, bg=\"#535C68\", fg=\"white\", pady=15, width=12, font='arial 13 bold')",
        "line_number": 233,
        "context_before": [
            "clear_btn.grid(row=0, column=2, padx=5, pady=5)",
            ""
        ],
        "context_after": [
            "exit_btn.grid(row=0, column=3, padx=5, pady=5)",
            "self.welcome_bill()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 245,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (111/100)",
        "module": "biling_system",
        "line_content": "self.total_medical_price = float(self.m_m_p+self.m_h_g_p+self.m_d_p+self.m_n_p+self.m_t_g_p+self.m_s_p)",
        "line_number": 245,
        "context_before": [
            "self.m_n_p = self.newsprin.get()*5",
            "self.m_t_g_p = self.thermal_gun.get()*15"
        ],
        "context_after": [
            "",
            "self.medical_price.set(\"Rs. \"+str(self.total_medical_price))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 257,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "biling_system",
        "line_content": "self.total_grocery_price = float(self.g_r_p+self.g_f_o_p+self.g_w_p+self.g_d_p+self.g_f_p+self.g_m_p)",
        "line_number": 257,
        "context_before": [
            "self.g_f_p = self.flour.get()*8",
            "self.g_m_p = self.maggi.get()*5"
        ],
        "context_after": [
            "",
            "self.grocery_price.set(\"Rs. \" + str(self.total_grocery_price))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 269,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (121/100)",
        "module": "biling_system",
        "line_content": "self.total_cold_drinks_price = float(self.c_d_s_p+self.c_d_l_p+self.c_d_m_p+self.c_d_c_p+self.c_d_f_p+self.c_m_d)",
        "line_number": 269,
        "context_before": [
            "self.c_d_f_p = self.fanta.get()*10",
            "self.c_m_d = self.mountain_duo.get()*10"
        ],
        "context_after": [
            "",
            "self.cold_drinks_price.set(\"Rs. \"+str(self.total_cold_drinks_price))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 275,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (146/100)",
        "module": "biling_system",
        "line_content": "self.total_bill = float(self.total_medical_price+self.total_grocery_price+self.total_cold_drinks_price+self.c_tax+self.g_tax+self.c_d_tax)",
        "line_number": 275,
        "context_before": [
            "self.cold_drinks_tax.set(\"Rs. \"+str(self.c_d_tax))",
            ""
        ],
        "context_after": [
            "",
            "#==============welcome-bill=============================="
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 291,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (137/100)",
        "module": "biling_system",
        "line_content": "elif self.medical_price.get() == \"Rs. 0.0\" and self.grocery_price.get() == \"Rs. 0.0\" and self.cold_drinks_price.get()==\"Rs. 0.0\":",
        "line_number": 291,
        "context_before": [
            "if self.c_name.get() == \" \" or self.c_phone.get() == \" \":",
            "messagebox.showerror(\"Error\", \"Customer Details Are Must\")"
        ],
        "context_after": [
            "messagebox.showerror(\"Error\", \"No Product Purchased\")",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 301,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "biling_system",
        "line_content": "self.txtarea.insert(END, f\"\\n Hand Gloves\\t\\t{self.hand_gloves.get()}\\t\\t{self.m_h_g_p}\")",
        "line_number": 301,
        "context_before": [
            "self.txtarea.insert(END, f\"\\n Sanitizer\\t\\t{self.mask.get()}\\t\\t{self.m_m_p}\")",
            "if self.hand_gloves.get() != 0:"
        ],
        "context_after": [
            "if self.dettol.get() != 0:",
            "self.txtarea.insert(END, f\"\\n Dettol\\t\\t{self.dettol.get()}\\t\\t{self.m_d_p}\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 357,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 11 spaces, expected 12",
        "module": "biling_system",
        "line_content": "return",
        "line_number": 357,
        "context_before": [
            "messagebox.showinfo(\"Saved\", f\"Bill no:{self.bill_no.get()} Saved Successfully\")",
            "else:"
        ],
        "context_after": [
            "",
            "# ===================find_bill================================"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 427,
        "column": 0,
        "message_id": "C0305",
        "message_type": "convention",
        "symbol": "trailing-newlines",
        "message": "Trailing newlines",
        "module": "biling_system",
        "line_content": "",
        "line_number": 427,
        "context_before": [
            "root.mainloop()",
            ""
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 1,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "biling_system",
        "line_content": "from tkinter import*",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import random",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"Bill_App\" doesn't conform to PascalCase naming style",
        "module": "biling_system",
        "line_content": "class Bill_App:",
        "line_number": 7,
        "context_before": [
            "",
            "# ============main============================"
        ],
        "context_after": [
            "def __init__(self, root):",
            "self.root = root"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 7,
        "column": 0,
        "message_id": "R0902",
        "message_type": "refactor",
        "symbol": "too-many-instance-attributes",
        "message": "Too many instance attributes (56/7)",
        "module": "biling_system",
        "line_content": "class Bill_App:",
        "line_number": 7,
        "context_before": [
            "",
            "# ============main============================"
        ],
        "context_after": [
            "def __init__(self, root):",
            "self.root = root"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 8,
        "column": 4,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (72/15)",
        "module": "biling_system",
        "line_content": "def __init__(self, root):",
        "line_number": 8,
        "context_before": [
            "# ============main============================",
            "class Bill_App:"
        ],
        "context_after": [
            "self.root = root",
            "self.root.geometry(\"1350x700+0+0\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 8,
        "column": 23,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'root' from outer scope (line 423)",
        "module": "biling_system",
        "line_content": "def __init__(self, root):",
        "line_number": 8,
        "context_before": [
            "# ============main============================",
            "class Bill_App:"
        ],
        "context_after": [
            "self.root = root",
            "self.root.geometry(\"1350x700+0+0\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 52,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"F1\" doesn't conform to snake_case naming style",
        "module": "biling_system",
        "line_content": "F1 = LabelFrame(self.root, text=\"Customer Details\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 52,
        "context_before": [
            "self.cold_drinks_tax = StringVar()",
            "# =============customer retail details======================"
        ],
        "context_after": [
            "F1.place(x=0, y=80, relwidth=1)",
            "cname_lbl = Label(F1, text=\"Customer Name:\", bg=bg_color, font=('times new roman', 15, 'bold'))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 73,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"F2\" doesn't conform to snake_case naming style",
        "module": "biling_system",
        "line_content": "F2 = LabelFrame(self.root, text=\"Medical Purpose\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 73,
        "context_before": [
            "",
            "# ===================Medical===================================="
        ],
        "context_after": [
            "F2.place(x=5, y=180, width=325, height=380)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 107,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"F3\" doesn't conform to snake_case naming style",
        "module": "biling_system",
        "line_content": "F3 = LabelFrame(self.root, text=\"Grocery Items\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 107,
        "context_before": [
            "",
            "# ==========GroceryItems========================="
        ],
        "context_after": [
            "F3.place(x=340, y=180, width=325, height=380)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 141,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"F4\" doesn't conform to snake_case naming style",
        "module": "biling_system",
        "line_content": "F4 = LabelFrame(self.root, text=\"Cold Drinks\", font=('times new roman', 15, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 141,
        "context_before": [
            "",
            "# ===========ColdDrinks================================"
        ],
        "context_after": [
            "F4.place(x=670, y=180, width=325, height=380)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 175,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"F5\" doesn't conform to snake_case naming style",
        "module": "biling_system",
        "line_content": "F5 = Frame(self.root, bd=10, relief=GROOVE)",
        "line_number": 175,
        "context_before": [
            "",
            "# =================BillArea======================"
        ],
        "context_after": [
            "F5.place(x=1010, y=180, width=350, height=380)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 187,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"F6\" doesn't conform to snake_case naming style",
        "module": "biling_system",
        "line_content": "F6 = LabelFrame(self.root, text=\"Bill Area\", font=('times new roman', 14, 'bold'), bd=10, fg=\"Black\", bg=\"#badc57\")",
        "line_number": 187,
        "context_before": [
            "",
            "# =======================ButtonFrame============="
        ],
        "context_after": [
            "F6.place(x=0, y=560, relwidth=1, height=140)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 227,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"generateBill_btn\" doesn't conform to snake_case naming style",
        "module": "biling_system",
        "line_content": "generateBill_btn = Button(btn_f, command=self.bill_area, text=\"Generate Bill\", bd=2, bg=\"#535C68\", fg=\"white\", pady=12, width=12, font='arial 13 bold')",
        "line_number": 227,
        "context_before": [
            "total_btn.grid(row=0, column=0, padx=5, pady=5)",
            ""
        ],
        "context_after": [
            "generateBill_btn.grid(row=0, column=1, padx=5, pady=5)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 8,
        "column": 4,
        "message_id": "R0915",
        "message_type": "refactor",
        "symbol": "too-many-statements",
        "message": "Too many statements (177/50)",
        "module": "biling_system",
        "line_content": "def __init__(self, root):",
        "line_number": 8,
        "context_before": [
            "# ============main============================",
            "class Bill_App:"
        ],
        "context_after": [
            "self.root = root",
            "self.root.geometry(\"1350x700+0+0\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 284,
        "column": 33,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "biling_system",
        "line_content": "self.txtarea.insert(END, f\"\\n================================\")",
        "line_number": 284,
        "context_before": [
            "self.txtarea.insert(END, f\"\\nCustomer Name:{self.c_name.get()}\")",
            "self.txtarea.insert(END, f\"\\nPhone Number{self.c_phone.get()}\")"
        ],
        "context_after": [
            "self.txtarea.insert(END, f\"\\nProducts\\t\\tQTY\\t\\tPrice\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 285,
        "column": 33,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "biling_system",
        "line_content": "self.txtarea.insert(END, f\"\\nProducts\\t\\tQTY\\t\\tPrice\")",
        "line_number": 285,
        "context_before": [
            "self.txtarea.insert(END, f\"\\nPhone Number{self.c_phone.get()}\")",
            "self.txtarea.insert(END, f\"\\n================================\")"
        ],
        "context_after": [
            "",
            "#=========billArea================================================="
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 334,
        "column": 37,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "biling_system",
        "line_content": "self.txtarea.insert(END, f\"\\n--------------------------------\")",
        "line_number": 334,
        "context_before": [
            "if self.mountain_duo.get() != 0:",
            "self.txtarea.insert(END, f\"\\n Mountain Duo\\t\\t{self.sanitizer.get()}\\t\\t{self.c_m_d}\")"
        ],
        "context_after": [
            "# ===============taxes==============================",
            "if self.medical_tax.get() != '0.0':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 344,
        "column": 33,
        "message_id": "W1309",
        "message_type": "warning",
        "symbol": "f-string-without-interpolation",
        "message": "Using an f-string that does not have any interpolated variables",
        "module": "biling_system",
        "line_content": "self.txtarea.insert(END, f\"\\n--------------------------------\")",
        "line_number": 344,
        "context_before": [
            "",
            "self.txtarea.insert(END, f\"\\n Total Bil:\\t\\t\\t Rs.{self.total_bill}\")"
        ],
        "context_after": [
            "self.save_bill()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 288,
        "column": 4,
        "message_id": "R0912",
        "message_type": "refactor",
        "symbol": "too-many-branches",
        "message": "Too many branches (24/12)",
        "module": "biling_system",
        "line_content": "def bill_area(self):",
        "line_number": 288,
        "context_before": [
            "",
            "#=========billArea================================================="
        ],
        "context_after": [
            "if self.c_name.get() == \" \" or self.c_phone.get() == \" \":",
            "messagebox.showerror(\"Error\", \"Customer Details Are Must\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 288,
        "column": 4,
        "message_id": "R0915",
        "message_type": "refactor",
        "symbol": "too-many-statements",
        "message": "Too many statements (53/50)",
        "module": "biling_system",
        "line_content": "def bill_area(self):",
        "line_number": 288,
        "context_before": [
            "",
            "#=========billArea================================================="
        ],
        "context_after": [
            "if self.c_name.get() == \" \" or self.c_phone.get() == \" \":",
            "messagebox.showerror(\"Error\", \"Customer Details Are Must\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 352,
        "column": 17,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "biling_system",
        "line_content": "f1 = open(\"bills/\"+str(self.bill_no.get())+\".txt\", \"w\")",
        "line_number": 352,
        "context_before": [
            "if op > 0:",
            "self.bill_data = self.txtarea.get('1.0', END)"
        ],
        "context_after": [
            "f1.write(self.bill_data)",
            "f1.close()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 348,
        "column": 4,
        "message_id": "R1711",
        "message_type": "refactor",
        "symbol": "useless-return",
        "message": "Useless return at end of function or method",
        "module": "biling_system",
        "line_content": "def save_bill(self):",
        "line_number": 348,
        "context_before": [
            "",
            "#=========savebill============================"
        ],
        "context_after": [
            "op = messagebox.askyesno(\"Save Bill\", \"Do you want to save the bill?\")",
            "if op > 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 352,
        "column": 17,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "biling_system",
        "line_content": "f1 = open(\"bills/\"+str(self.bill_no.get())+\".txt\", \"w\")",
        "line_number": 352,
        "context_before": [
            "if op > 0:",
            "self.bill_data = self.txtarea.get('1.0', END)"
        ],
        "context_after": [
            "f1.write(self.bill_data)",
            "f1.close()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 364,
        "column": 21,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "biling_system",
        "line_content": "f1 = open(f\"bills/{i}\", \"r\")",
        "line_number": 364,
        "context_before": [
            "for i in os.listdir(\"bills/\"):",
            "if i.split('.')[0] == self.search_bill.get():"
        ],
        "context_after": [
            "self.txtarea.delete(\"1.0\", END)",
            "for d in f1:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 364,
        "column": 21,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "biling_system",
        "line_content": "f1 = open(f\"bills/{i}\", \"r\")",
        "line_number": 364,
        "context_before": [
            "for i in os.listdir(\"bills/\"):",
            "if i.split('.')[0] == self.search_bill.get():"
        ],
        "context_after": [
            "self.txtarea.delete(\"1.0\", END)",
            "for d in f1:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 239,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'm_h_g_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.m_h_g_p = self.hand_gloves.get()*12",
        "line_number": 239,
        "context_before": [
            "#================totalBill==========================",
            "def total(self):"
        ],
        "context_after": [
            "self.m_s_p = self.sanitizer.get()*2",
            "self.m_m_p = self.mask.get()*5"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 240,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'm_s_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.m_s_p = self.sanitizer.get()*2",
        "line_number": 240,
        "context_before": [
            "def total(self):",
            "self.m_h_g_p = self.hand_gloves.get()*12"
        ],
        "context_after": [
            "self.m_m_p = self.mask.get()*5",
            "self.m_d_p = self.dettol.get()*30"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 241,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'm_m_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.m_m_p = self.mask.get()*5",
        "line_number": 241,
        "context_before": [
            "self.m_h_g_p = self.hand_gloves.get()*12",
            "self.m_s_p = self.sanitizer.get()*2"
        ],
        "context_after": [
            "self.m_d_p = self.dettol.get()*30",
            "self.m_n_p = self.newsprin.get()*5"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 242,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'm_d_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.m_d_p = self.dettol.get()*30",
        "line_number": 242,
        "context_before": [
            "self.m_s_p = self.sanitizer.get()*2",
            "self.m_m_p = self.mask.get()*5"
        ],
        "context_after": [
            "self.m_n_p = self.newsprin.get()*5",
            "self.m_t_g_p = self.thermal_gun.get()*15"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 243,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'm_n_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.m_n_p = self.newsprin.get()*5",
        "line_number": 243,
        "context_before": [
            "self.m_m_p = self.mask.get()*5",
            "self.m_d_p = self.dettol.get()*30"
        ],
        "context_after": [
            "self.m_t_g_p = self.thermal_gun.get()*15",
            "self.total_medical_price = float(self.m_m_p+self.m_h_g_p+self.m_d_p+self.m_n_p+self.m_t_g_p+self.m_s_p)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 244,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'm_t_g_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.m_t_g_p = self.thermal_gun.get()*15",
        "line_number": 244,
        "context_before": [
            "self.m_d_p = self.dettol.get()*30",
            "self.m_n_p = self.newsprin.get()*5"
        ],
        "context_after": [
            "self.total_medical_price = float(self.m_m_p+self.m_h_g_p+self.m_d_p+self.m_n_p+self.m_t_g_p+self.m_s_p)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 245,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'total_medical_price' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.total_medical_price = float(self.m_m_p+self.m_h_g_p+self.m_d_p+self.m_n_p+self.m_t_g_p+self.m_s_p)",
        "line_number": 245,
        "context_before": [
            "self.m_n_p = self.newsprin.get()*5",
            "self.m_t_g_p = self.thermal_gun.get()*15"
        ],
        "context_after": [
            "",
            "self.medical_price.set(\"Rs. \"+str(self.total_medical_price))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 248,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_tax' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_tax = round((self.total_medical_price*0.05), 2)",
        "line_number": 248,
        "context_before": [
            "",
            "self.medical_price.set(\"Rs. \"+str(self.total_medical_price))"
        ],
        "context_after": [
            "self.medical_tax.set(\"Rs. \"+str(self.c_tax))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 251,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'g_r_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.g_r_p = self.rice.get()*10",
        "line_number": 251,
        "context_before": [
            "self.medical_tax.set(\"Rs. \"+str(self.c_tax))",
            ""
        ],
        "context_after": [
            "self.g_f_o_p = self.food_oil.get()*10",
            "self.g_w_p = self.wheat.get()*10"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 252,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'g_f_o_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.g_f_o_p = self.food_oil.get()*10",
        "line_number": 252,
        "context_before": [
            "",
            "self.g_r_p = self.rice.get()*10"
        ],
        "context_after": [
            "self.g_w_p = self.wheat.get()*10",
            "self.g_d_p = self.daal.get()*6"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 253,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'g_w_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.g_w_p = self.wheat.get()*10",
        "line_number": 253,
        "context_before": [
            "self.g_r_p = self.rice.get()*10",
            "self.g_f_o_p = self.food_oil.get()*10"
        ],
        "context_after": [
            "self.g_d_p = self.daal.get()*6",
            "self.g_f_p = self.flour.get()*8"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 254,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'g_d_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.g_d_p = self.daal.get()*6",
        "line_number": 254,
        "context_before": [
            "self.g_f_o_p = self.food_oil.get()*10",
            "self.g_w_p = self.wheat.get()*10"
        ],
        "context_after": [
            "self.g_f_p = self.flour.get()*8",
            "self.g_m_p = self.maggi.get()*5"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 255,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'g_f_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.g_f_p = self.flour.get()*8",
        "line_number": 255,
        "context_before": [
            "self.g_w_p = self.wheat.get()*10",
            "self.g_d_p = self.daal.get()*6"
        ],
        "context_after": [
            "self.g_m_p = self.maggi.get()*5",
            "self.total_grocery_price = float(self.g_r_p+self.g_f_o_p+self.g_w_p+self.g_d_p+self.g_f_p+self.g_m_p)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 256,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'g_m_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.g_m_p = self.maggi.get()*5",
        "line_number": 256,
        "context_before": [
            "self.g_d_p = self.daal.get()*6",
            "self.g_f_p = self.flour.get()*8"
        ],
        "context_after": [
            "self.total_grocery_price = float(self.g_r_p+self.g_f_o_p+self.g_w_p+self.g_d_p+self.g_f_p+self.g_m_p)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 257,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'total_grocery_price' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.total_grocery_price = float(self.g_r_p+self.g_f_o_p+self.g_w_p+self.g_d_p+self.g_f_p+self.g_m_p)",
        "line_number": 257,
        "context_before": [
            "self.g_f_p = self.flour.get()*8",
            "self.g_m_p = self.maggi.get()*5"
        ],
        "context_after": [
            "",
            "self.grocery_price.set(\"Rs. \" + str(self.total_grocery_price))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 260,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'g_tax' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.g_tax = round((self.total_grocery_price*5), 2)",
        "line_number": 260,
        "context_before": [
            "",
            "self.grocery_price.set(\"Rs. \" + str(self.total_grocery_price))"
        ],
        "context_after": [
            "self.grocery_tax.set(\"Rs. \" + str(self.g_tax))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 263,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_d_s_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_d_s_p = self.sprite.get()*10",
        "line_number": 263,
        "context_before": [
            "self.grocery_tax.set(\"Rs. \" + str(self.g_tax))",
            ""
        ],
        "context_after": [
            "self.c_d_l_p = self.limka.get()*10",
            "self.c_d_m_p = self.mazza.get()*10"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 264,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_d_l_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_d_l_p = self.limka.get()*10",
        "line_number": 264,
        "context_before": [
            "",
            "self.c_d_s_p = self.sprite.get()*10"
        ],
        "context_after": [
            "self.c_d_m_p = self.mazza.get()*10",
            "self.c_d_c_p = self.coke.get()*10"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 265,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_d_m_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_d_m_p = self.mazza.get()*10",
        "line_number": 265,
        "context_before": [
            "self.c_d_s_p = self.sprite.get()*10",
            "self.c_d_l_p = self.limka.get()*10"
        ],
        "context_after": [
            "self.c_d_c_p = self.coke.get()*10",
            "self.c_d_f_p = self.fanta.get()*10"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 266,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_d_c_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_d_c_p = self.coke.get()*10",
        "line_number": 266,
        "context_before": [
            "self.c_d_l_p = self.limka.get()*10",
            "self.c_d_m_p = self.mazza.get()*10"
        ],
        "context_after": [
            "self.c_d_f_p = self.fanta.get()*10",
            "self.c_m_d = self.mountain_duo.get()*10"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 267,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_d_f_p' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_d_f_p = self.fanta.get()*10",
        "line_number": 267,
        "context_before": [
            "self.c_d_m_p = self.mazza.get()*10",
            "self.c_d_c_p = self.coke.get()*10"
        ],
        "context_after": [
            "self.c_m_d = self.mountain_duo.get()*10",
            "self.total_cold_drinks_price = float(self.c_d_s_p+self.c_d_l_p+self.c_d_m_p+self.c_d_c_p+self.c_d_f_p+self.c_m_d)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 268,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_m_d' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_m_d = self.mountain_duo.get()*10",
        "line_number": 268,
        "context_before": [
            "self.c_d_c_p = self.coke.get()*10",
            "self.c_d_f_p = self.fanta.get()*10"
        ],
        "context_after": [
            "self.total_cold_drinks_price = float(self.c_d_s_p+self.c_d_l_p+self.c_d_m_p+self.c_d_c_p+self.c_d_f_p+self.c_m_d)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 269,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'total_cold_drinks_price' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.total_cold_drinks_price = float(self.c_d_s_p+self.c_d_l_p+self.c_d_m_p+self.c_d_c_p+self.c_d_f_p+self.c_m_d)",
        "line_number": 269,
        "context_before": [
            "self.c_d_f_p = self.fanta.get()*10",
            "self.c_m_d = self.mountain_duo.get()*10"
        ],
        "context_after": [
            "",
            "self.cold_drinks_price.set(\"Rs. \"+str(self.total_cold_drinks_price))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 272,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'c_d_tax' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.c_d_tax = round((self.total_cold_drinks_price * 0.1), 2)",
        "line_number": 272,
        "context_before": [
            "",
            "self.cold_drinks_price.set(\"Rs. \"+str(self.total_cold_drinks_price))"
        ],
        "context_after": [
            "self.cold_drinks_tax.set(\"Rs. \"+str(self.c_d_tax))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 275,
        "column": 8,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'total_bill' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.total_bill = float(self.total_medical_price+self.total_grocery_price+self.total_cold_drinks_price+self.c_tax+self.g_tax+self.c_d_tax)",
        "line_number": 275,
        "context_before": [
            "self.cold_drinks_tax.set(\"Rs. \"+str(self.c_d_tax))",
            ""
        ],
        "context_after": [
            "",
            "#==============welcome-bill=============================="
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 351,
        "column": 12,
        "message_id": "W0201",
        "message_type": "warning",
        "symbol": "attribute-defined-outside-init",
        "message": "Attribute 'bill_data' defined outside __init__",
        "module": "biling_system",
        "line_content": "self.bill_data = self.txtarea.get('1.0', END)",
        "line_number": 351,
        "context_before": [
            "op = messagebox.askyesno(\"Save Bill\", \"Do you want to save the bill?\")",
            "if op > 0:"
        ],
        "context_after": [
            "f1 = open(\"bills/\"+str(self.bill_no.get())+\".txt\", \"w\")",
            "f1.write(self.bill_data)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 4,
        "column": 0,
        "message_id": "C0412",
        "message_type": "convention",
        "symbol": "ungrouped-imports",
        "message": "Imports from package tkinter are not grouped",
        "module": "biling_system",
        "line_content": "from tkinter import messagebox",
        "line_number": 4,
        "context_before": [
            "import random",
            "import os"
        ],
        "context_after": [
            "",
            "# ============main============================"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Billing_system/biling_system.py",
        "line": 1,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, Grid, BaseWidget, Widget, Toplevel, Canvas, Checkbutton, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, OptionMenu, Image, PhotoImage, BitmapImage, image_names, image_types, Spinbox, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, E, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, LEFT, TOP, BOTTOM, RAISED, SUNKEN, FLAT, RIDGE, SOLID, HORIZONTAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, INSERT, CURRENT, ANCHOR, ALL, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "biling_system",
        "line_content": "from tkinter import*",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import random",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 41,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (102/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) - 40, fill=\"white\", text=\"Speed Game\", font=labelFont)",
        "line_number": 41,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")"
        ],
        "context_after": [
            "",
            "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 44,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (107/100)",
        "module": "main",
        "line_content": "startBtn = tk.Button(canv, text=\"START\", font=startBtnFont, foreground=\"black\", background=\"black\",",
        "line_number": 44,
        "context_before": [
            "",
            "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ],
        "context_after": [
            "relief=\"ridge\", borderwidth=5, highlightbackground=\"yellow\",",
            "activebackground=\"yellow\", activeforeground=\"black\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 62,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Speed Game\", font=labelFont)",
        "line_number": 62,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")"
        ],
        "context_after": [
            "",
            "btnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 91,
        "column": 32,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "main",
        "line_content": "# data not in excel file",
        "line_number": 91,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "while code.upper() not in df.index:",
            "filename = random.choice(os.listdir(\"./images\"))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 106,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (102/100)",
        "module": "main",
        "line_content": "self.img1 = ImageTk.PhotoImage(Image.open(backgroundPath).resize((600, 500), Image.ANTIALIAS))",
        "line_number": 106,
        "context_before": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack()"
        ],
        "context_after": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 127,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (118/100)",
        "module": "main",
        "line_content": "command=lambda: self.checkBtn_click(master, input_text.get(), answer, canv,country_img))",
        "line_number": 127,
        "context_before": [
            "background=\"yellow\", relief=\"ridge\",",
            "activebackground=\"yellow\", activeforeground=\"black\","
        ],
        "context_after": [
            "canv.create_window((600 // 2) - 80, (500 // 2) + 140, window=check_btn)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 169,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "main",
        "line_content": "if (user_text == check_answer):",
        "line_number": 169,
        "context_before": [
            "check_answer = check_answer.replace(\" \", \"\")",
            ""
        ],
        "context_after": [
            "# correct",
            "print('correct')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 173,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "main",
        "line_content": "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
        "line_number": 173,
        "context_before": [
            "print('correct')",
            "ImagePath = 'correct.png'"
        ],
        "context_after": [
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)",
            "correct_count += 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 180,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "main",
        "line_content": "self.img4 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
        "line_number": 180,
        "context_before": [
            "print('wrong')",
            "ImagePath = 'wrong.png'"
        ],
        "context_after": [
            "",
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img4)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 191,
        "column": 32,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "main",
        "line_content": "# data not in excel file",
        "line_number": 191,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "while code.upper() not in df.index:",
            "filename = random.choice(os.listdir(\"./images\"))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 208,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "main",
        "line_content": "if (pass_count < 0):",
        "line_number": 208,
        "context_before": [
            "global country_img, answer",
            "pass_count = pass_count - 1"
        ],
        "context_after": [
            "print(\"패스 그만\")",
            "pass_count = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 216,
        "column": 36,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "main",
        "line_content": "# data not in excel file",
        "line_number": 216,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "while code.upper() not in df.index:",
            "filename = random.choice(os.listdir(\"./images\"))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 223,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "main",
        "line_content": "self.img2 = ImageTk.PhotoImage(Image.open(countryPath).resize((180, 130), Image.ANTIALIAS))",
        "line_number": 223,
        "context_before": [
            "countryPath = \"./images/\" + filename",
            "canv.after(1000, self.delete_img, canv, check_img)"
        ],
        "context_after": [
            "country_img = canv.create_image(210, 130, anchor=\"nw\", image=self.img2)",
            "answer = df[\"country\"][code.upper()]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 250,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (134/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) - 50, fill=\"white\", text=\"total score : \" + str(correct_count)+ \"/15\", font=labelFont)",
        "line_number": 250,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\")"
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) + 50, fill=\"white\", text=\"Good Job!\", font=labelFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 251,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) + 50, fill=\"white\", text=\"Good Job!\", font=labelFont)",
        "line_number": 251,
        "context_before": [
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\")",
            "canv.create_text((600 // 2), (500 // 2) - 50, fill=\"white\", text=\"total score : \" + str(correct_count)+ \"/15\", font=labelFont)"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pandas'",
        "module": "main",
        "line_content": "import pandas as pd",
        "line_number": 3,
        "context_before": [
            "import tkinter.font as tkFont",
            "from tkinter import messagebox"
        ],
        "context_after": [
            "import os",
            "import random"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "main",
        "line_content": "from PIL import Image, ImageTk",
        "line_number": 6,
        "context_before": [
            "import os",
            "import random"
        ],
        "context_after": [
            "import time",
            "import threading"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 9,
        "column": 0,
        "message_id": "W0404",
        "message_type": "warning",
        "symbol": "reimported",
        "message": "Reimport 'messagebox' (imported line 2)",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 9,
        "context_before": [
            "import time",
            "import threading"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 13,
        "column": 0,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "main",
        "line_content": "except:",
        "line_number": 13,
        "context_before": [
            "try:",
            "import tkinter as tk"
        ],
        "context_after": [
            "import tkinter as tk",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 34,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'halloween.png'",
        "line_number": 34,
        "context_before": [
            "tk.Frame.__init__(self, master)",
            ""
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack(side='bottom')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 40,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")",
        "line_number": 40,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 40, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 43,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"startBtnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)",
        "line_number": 43,
        "context_before": [
            "canv.create_text((600 // 2), (500 // 2) - 40, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ],
        "context_after": [
            "startBtn = tk.Button(canv, text=\"START\", font=startBtnFont, foreground=\"black\", background=\"black\",",
            "relief=\"ridge\", borderwidth=5, highlightbackground=\"yellow\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 44,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"startBtn\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "startBtn = tk.Button(canv, text=\"START\", font=startBtnFont, foreground=\"black\", background=\"black\",",
        "line_number": 44,
        "context_before": [
            "",
            "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ],
        "context_after": [
            "relief=\"ridge\", borderwidth=5, highlightbackground=\"yellow\",",
            "activebackground=\"yellow\", activeforeground=\"black\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 55,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'halloween.png'",
        "line_number": 55,
        "context_before": [
            "tk.Frame.__init__(self, master)",
            ""
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack(side='bottom')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 61,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")",
        "line_number": 61,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 64,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"btnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "btnFont = tkFont.Font(family=\"Consolas\", size=20)",
        "line_number": 64,
        "context_before": [
            "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ],
        "context_after": [
            "countryBtn = tk.Button(self, text=\"country\", foreground=\"black\",",
            "width=15, height=1,"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 65,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryBtn\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryBtn = tk.Button(self, text=\"country\", foreground=\"black\",",
        "line_number": 65,
        "context_before": [
            "",
            "btnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ],
        "context_after": [
            "width=15, height=1,",
            "background=\"yellow\", font=btnFont, relief=\"ridge\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 73,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"prevBtn\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "prevBtn = tk.Button(self, text=\"preve page\", foreground=\"black\",",
        "line_number": 73,
        "context_before": [
            "canv.create_window((600 // 2), (500 // 2) - 100, window=countryBtn)",
            ""
        ],
        "context_after": [
            "width=15, height=1,",
            "background=\"yellow\", font=btnFont, relief=\"ridge\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 83,
        "column": 4,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (18/15)",
        "module": "main",
        "line_content": "def __init__(self, master):",
        "line_number": 83,
        "context_before": [
            "",
            "class CountryPage(tk.Frame):"
        ],
        "context_after": [
            "global pass_count, answer, country_img",
            "global df, pass_window"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 84,
        "column": 8,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'pass_count' but no assignment is done",
        "module": "main",
        "line_content": "global pass_count, answer, country_img",
        "line_number": 84,
        "context_before": [
            "class CountryPage(tk.Frame):",
            "def __init__(self, master):"
        ],
        "context_after": [
            "global df, pass_window",
            "tk.Frame.__init__(self, master)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 85,
        "column": 8,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'df' but no assignment is done",
        "module": "main",
        "line_content": "global df, pass_window",
        "line_number": 85,
        "context_before": [
            "def __init__(self, master):",
            "global pass_count, answer, country_img"
        ],
        "context_after": [
            "tk.Frame.__init__(self, master)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 92,
        "column": 34,
        "message_id": "E0606",
        "message_type": "error",
        "symbol": "possibly-used-before-assignment",
        "message": "Possibly using variable 'df' before assignment",
        "module": "main",
        "line_content": "while code.upper() not in df.index:",
        "line_number": 92,
        "context_before": [
            "",
            "# data not in excel file"
        ],
        "context_after": [
            "filename = random.choice(os.listdir(\"./images\"))",
            "code = filename.split(\".\")[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 96,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryPath = \"./images/\" + filename",
        "line_number": 96,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "",
            "print(countryPath)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 103,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"backgroundPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "backgroundPath = 'halloween.png'",
        "line_number": 103,
        "context_before": [
            "answer = df[\"country\"][code.upper()]",
            ""
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 109,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"titleFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "titleFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")",
        "line_number": 109,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img1)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Country\", font=titleFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 115,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=17, slant=\"italic\")",
        "line_number": 115,
        "context_before": [
            "country_img = canv.create_image(210, 130, anchor=\"nw\", image=self.img2)",
            ""
        ],
        "context_after": [
            "BtnFont = tkFont.Font(family=\"Consolas\", size=15)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 116,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"BtnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "BtnFont = tkFont.Font(family=\"Consolas\", size=15)",
        "line_number": 116,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=17, slant=\"italic\")"
        ],
        "context_after": [
            "",
            "canv.create_text((600 // 2), (500 // 2) + 40, fill=\"white\", text=\"answer\", font=labelFont)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 139,
        "column": 21,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "timeformat = '{:02d}:{:02d}'.format(mins, secs)",
        "line_number": 139,
        "context_before": [
            "self.num = 180",
            "mins, secs = divmod(self.num, 60)"
        ],
        "context_after": [
            "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")",
            "timer_text = canv.create_text(100, 100, fill=\"white\", text=timeformat, font=TimerFont)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 140,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"TimerFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")",
        "line_number": 140,
        "context_before": [
            "mins, secs = divmod(self.num, 60)",
            "timeformat = '{:02d}:{:02d}'.format(mins, secs)"
        ],
        "context_after": [
            "timer_text = canv.create_text(100, 100, fill=\"white\", text=timeformat, font=TimerFont)",
            "canv.after(1, self.count, canv, timer_text)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 146,
        "column": 21,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "timeformat = '{:02d}:{:02d}'.format(mins, secs)",
        "line_number": 146,
        "context_before": [
            "def count(self, canv, timer_text):",
            "mins, secs = divmod(self.num, 60)"
        ],
        "context_after": [
            "canv.delete(timer_text)",
            "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 148,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"TimerFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")",
        "line_number": 148,
        "context_before": [
            "timeformat = '{:02d}:{:02d}'.format(mins, secs)",
            "canv.delete(timer_text)"
        ],
        "context_after": [
            "timer_text = canv.create_text(100, 100, fill=\"white\", text=timeformat, font=TimerFont)",
            "self.num -= 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 152,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"msgBox\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "msgBox = tk.messagebox.askretrycancel('Exit App', 'Really Quit?')",
        "line_number": 152,
        "context_before": [
            "self.num -= 1",
            "if self.num < 0:"
        ],
        "context_after": [
            "if msgBox == True:",
            "self.master.switch_frame(StartPage)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 153,
        "column": 15,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'msgBox == True' should be 'msgBox is True' if checking for the singleton value True, or 'msgBox' if testing for truthiness",
        "module": "main",
        "line_content": "if msgBox == True:",
        "line_number": 153,
        "context_before": [
            "if self.num < 0:",
            "msgBox = tk.messagebox.askretrycancel('Exit App', 'Really Quit?')"
        ],
        "context_after": [
            "self.master.switch_frame(StartPage)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 161,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Method name \"checkBtn_click\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
        "line_number": 161,
        "context_before": [
            "",
            "# click check button"
        ],
        "context_after": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 161,
        "column": 4,
        "message_id": "R0913",
        "message_type": "refactor",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (6/5)",
        "module": "main",
        "line_content": "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
        "line_number": 161,
        "context_before": [
            "",
            "# click check button"
        ],
        "context_after": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 161,
        "column": 4,
        "message_id": "R0917",
        "message_type": "refactor",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "module": "main",
        "line_content": "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
        "line_number": 161,
        "context_before": [
            "",
            "# click check button"
        ],
        "context_after": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 162,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global answer, country_img",
        "line_number": 162,
        "context_before": [
            "# click check button",
            "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):"
        ],
        "context_after": [
            "global correct_count, problem_count",
            "problem_count -= 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 163,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global correct_count, problem_count",
        "line_number": 163,
        "context_before": [
            "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
            "global answer, country_img"
        ],
        "context_after": [
            "problem_count -= 1",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 164,
        "column": 8,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'problem_count'",
        "module": "main",
        "line_content": "problem_count -= 1",
        "line_number": 164,
        "context_before": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ],
        "context_after": [
            "",
            "user_text = user_text.upper().replace(\" \", \"\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 172,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'correct.png'",
        "line_number": 172,
        "context_before": [
            "# correct",
            "print('correct')"
        ],
        "context_after": [
            "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 174,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"resultImage\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)",
        "line_number": 174,
        "context_before": [
            "ImagePath = 'correct.png'",
            "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))"
        ],
        "context_after": [
            "correct_count += 1",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 175,
        "column": 12,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'correct_count'",
        "module": "main",
        "line_content": "correct_count += 1",
        "line_number": 175,
        "context_before": [
            "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)"
        ],
        "context_after": [
            "else:",
            "# wrong"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 179,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'wrong.png'",
        "line_number": 179,
        "context_before": [
            "# wrong",
            "print('wrong')"
        ],
        "context_after": [
            "self.img4 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 182,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"resultImage\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img4)",
        "line_number": 182,
        "context_before": [
            "self.img4 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            ""
        ],
        "context_after": [
            "",
            "# resolve 15 problems"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 196,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryPath = \"./images/\" + filename",
        "line_number": 196,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "canv.after(1000,self.delete_img, canv, check_img)",
            "self.img2 = ImageTk.PhotoImage(Image.open(countryPath).resize((180, 130), Image.ANTIALIAS))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 204,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Method name \"passBtn_click\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "def passBtn_click(self, tk, canv, check_img):",
        "line_number": 204,
        "context_before": [
            "print(answer)",
            ""
        ],
        "context_after": [
            "global pass_count, pass_window",
            "global country_img, answer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 204,
        "column": 28,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'tk' from outer scope (line 12)",
        "module": "main",
        "line_content": "def passBtn_click(self, tk, canv, check_img):",
        "line_number": 204,
        "context_before": [
            "print(answer)",
            ""
        ],
        "context_after": [
            "global pass_count, pass_window",
            "global country_img, answer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 205,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global pass_count, pass_window",
        "line_number": 205,
        "context_before": [
            "",
            "def passBtn_click(self, tk, canv, check_img):"
        ],
        "context_after": [
            "global country_img, answer",
            "pass_count = pass_count - 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 206,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global country_img, answer",
        "line_number": 206,
        "context_before": [
            "def passBtn_click(self, tk, canv, check_img):",
            "global pass_count, pass_window"
        ],
        "context_after": [
            "pass_count = pass_count - 1",
            "if (pass_count < 0):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 221,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryPath = \"./images/\" + filename",
        "line_number": 221,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "canv.after(1000, self.delete_img, canv, check_img)",
            "self.img2 = ImageTk.PhotoImage(Image.open(countryPath).resize((180, 130), Image.ANTIALIAS))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 228,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"BtnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "BtnFont = tkFont.Font(family=\"Consolas\", size=15)",
        "line_number": 228,
        "context_before": [
            "",
            "self.delete_img(canv, pass_window)"
        ],
        "context_after": [
            "pass_btn = tk.Button(self, text=\"pass: \" + str(pass_count) + \"/3\",",
            "width=10, height=1, font=BtnFont, foreground=\"yellow\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 243,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'halloween.png'",
        "line_number": 243,
        "context_before": [
            "def __init__(self, master):",
            "tk.Frame.__init__(self, master)"
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack(side='bottom')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 249,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\")",
        "line_number": 249,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 50, fill=\"white\", text=\"total score : \" + str(correct_count)+ \"/15\", font=labelFont)",
            "canv.create_text((600 // 2), (500 // 2) + 50, fill=\"white\", text=\"Good Job!\", font=labelFont)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 258,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pass_count\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "pass_count = 3",
        "line_number": 258,
        "context_before": [
            "#mySound = pygame.mixer.Sound(\"SpeedGameBgm.mp3\")",
            "#mySound.play(-1)"
        ],
        "context_after": [
            "problem_count = 15",
            "correct_count = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 259,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"problem_count\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "problem_count = 15",
        "line_number": 259,
        "context_before": [
            "#mySound.play(-1)",
            "pass_count = 3"
        ],
        "context_after": [
            "correct_count = 0",
            "answer = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 260,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"correct_count\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "correct_count = 0",
        "line_number": 260,
        "context_before": [
            "pass_count = 3",
            "problem_count = 15"
        ],
        "context_after": [
            "answer = 0",
            "country_img = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 261,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"answer\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "answer = 0",
        "line_number": 261,
        "context_before": [
            "problem_count = 15",
            "correct_count = 0"
        ],
        "context_after": [
            "country_img = 0",
            "pass_window = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 262,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"country_img\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "country_img = 0",
        "line_number": 262,
        "context_before": [
            "correct_count = 0",
            "answer = 0"
        ],
        "context_after": [
            "pass_window = 0",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 263,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pass_window\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "pass_window = 0",
        "line_number": 263,
        "context_before": [
            "answer = 0",
            "country_img = 0"
        ],
        "context_after": [
            "",
            "df = pd.read_excel(\"./CountryCodeData.xlsx\", index_col=0, names=[\"code\", \"country\"])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"pandas\"",
        "module": "main",
        "line_content": "import os",
        "line_number": 4,
        "context_before": [
            "from tkinter import messagebox",
            "import pandas as pd"
        ],
        "context_after": [
            "import random",
            "from PIL import Image, ImageTk"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"random\" should be placed before third party import \"pandas\"",
        "module": "main",
        "line_content": "import random",
        "line_number": 5,
        "context_before": [
            "import pandas as pd",
            "import os"
        ],
        "context_after": [
            "from PIL import Image, ImageTk",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 7,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party imports \"pandas\", \"PIL.Image\"",
        "module": "main",
        "line_content": "import time",
        "line_number": 7,
        "context_before": [
            "import random",
            "from PIL import Image, ImageTk"
        ],
        "context_after": [
            "import threading",
            "from tkinter import messagebox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 8,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"threading\" should be placed before third party imports \"pandas\", \"PIL.Image\"",
        "module": "main",
        "line_content": "import threading",
        "line_number": 8,
        "context_before": [
            "from PIL import Image, ImageTk",
            "import time"
        ],
        "context_after": [
            "from tkinter import messagebox",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 9,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"tkinter.messagebox\" should be placed before third party imports \"pandas\", \"PIL.Image\"",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 9,
        "context_before": [
            "import time",
            "import threading"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 9,
        "column": 0,
        "message_id": "C0412",
        "message_type": "convention",
        "symbol": "ungrouped-imports",
        "message": "Imports from package tkinter are not grouped",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 9,
        "context_before": [
            "import time",
            "import threading"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 2,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused messagebox imported from tkinter",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 2,
        "context_before": [
            "import tkinter.font as tkFont"
        ],
        "context_after": [
            "import pandas as pd",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 7,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import time",
        "module": "main",
        "line_content": "import time",
        "line_number": 7,
        "context_before": [
            "import random",
            "from PIL import Image, ImageTk"
        ],
        "context_after": [
            "import threading",
            "from tkinter import messagebox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/macOS/main.py",
        "line": 8,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import threading",
        "module": "main",
        "line_content": "import threading",
        "line_number": 8,
        "context_before": [
            "from PIL import Image, ImageTk",
            "import time"
        ],
        "context_after": [
            "from tkinter import messagebox",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 44,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (102/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) - 40, fill=\"white\", text=\"Speed Game\", font=labelFont)",
        "line_number": 44,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")"
        ],
        "context_after": [
            "",
            "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 47,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (108/100)",
        "module": "main",
        "line_content": "startBtn = tk.Button(canv, text=\"START\", font=startBtnFont, foreground=\"yellow\", background=\"black\",",
        "line_number": 47,
        "context_before": [
            "",
            "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ],
        "context_after": [
            "relief=\"ridge\", borderwidth=5, highlightbackground=\"yellow\",",
            "activebackground=\"yellow\", activeforeground=\"black\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 65,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Speed Game\", font=labelFont)",
        "line_number": 65,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")"
        ],
        "context_after": [
            "",
            "btnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 109,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (102/100)",
        "module": "main",
        "line_content": "self.img1 = ImageTk.PhotoImage(Image.open(backgroundPath).resize((600, 500), Image.ANTIALIAS))",
        "line_number": 109,
        "context_before": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack()"
        ],
        "context_after": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img1)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 130,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (118/100)",
        "module": "main",
        "line_content": "command=lambda: self.checkBtn_click(master, input_text.get(), answer, canv,country_img))",
        "line_number": 130,
        "context_before": [
            "background=\"black\", relief=\"ridge\",",
            "activebackground=\"yellow\", activeforeground=\"black\","
        ],
        "context_after": [
            "canv.create_window((600 // 2) - 80, (500 // 2) + 140, window=check_btn)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 172,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "main",
        "line_content": "if (user_text == check_answer):",
        "line_number": 172,
        "context_before": [
            "check_answer = check_answer.replace(\" \", \"\")",
            ""
        ],
        "context_after": [
            "# correct",
            "print('맞았습돠')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 176,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "main",
        "line_content": "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
        "line_number": 176,
        "context_before": [
            "print('맞았습돠')",
            "ImagePath = 'correct.png'"
        ],
        "context_after": [
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)",
            "correct_count += 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 183,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "main",
        "line_content": "self.img4 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
        "line_number": 183,
        "context_before": [
            "print('틀렸슴돠')",
            "ImagePath = 'wrong.png'"
        ],
        "context_after": [
            "",
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img4)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 211,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "main",
        "line_content": "if (pass_count < 0):",
        "line_number": 211,
        "context_before": [
            "global country_img, answer",
            "pass_count = pass_count - 1"
        ],
        "context_after": [
            "print(\"패스 그만\")",
            "pass_count = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 226,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "main",
        "line_content": "self.img2 = ImageTk.PhotoImage(Image.open(countryPath).resize((180, 130), Image.ANTIALIAS))",
        "line_number": 226,
        "context_before": [
            "countryPath = \"./images/\" + filename",
            "canv.after(1000, self.delete_img, canv, check_img)"
        ],
        "context_after": [
            "country_img = canv.create_image(210, 130, anchor=\"nw\", image=self.img2)",
            "answer = df[\"country\"][code.upper()]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 253,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (134/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) - 50, fill=\"white\", text=\"total score : \" + str(correct_count)+ \"/15\", font=labelFont)",
        "line_number": 253,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\")"
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) + 50, fill=\"white\", text=\"Good Job!\", font=labelFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 254,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "main",
        "line_content": "canv.create_text((600 // 2), (500 // 2) + 50, fill=\"white\", text=\"Good Job!\", font=labelFont)",
        "line_number": 254,
        "context_before": [
            "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\")",
            "canv.create_text((600 // 2), (500 // 2) - 50, fill=\"white\", text=\"total score : \" + str(correct_count)+ \"/15\", font=labelFont)"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pandas'",
        "module": "main",
        "line_content": "import pandas as pd",
        "line_number": 3,
        "context_before": [
            "import tkinter.font as tkFont",
            "from tkinter import messagebox"
        ],
        "context_after": [
            "import os",
            "import random"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PIL'",
        "module": "main",
        "line_content": "from PIL import Image, ImageTk",
        "line_number": 6,
        "context_before": [
            "import os",
            "import random"
        ],
        "context_after": [
            "import time",
            "import threading"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 9,
        "column": 0,
        "message_id": "W0404",
        "message_type": "warning",
        "symbol": "reimported",
        "message": "Reimport 'messagebox' (imported line 2)",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 9,
        "context_before": [
            "import time",
            "import threading"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 13,
        "column": 0,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "main",
        "line_content": "except:",
        "line_number": 13,
        "context_before": [
            "try:",
            "import tkinter as tk"
        ],
        "context_after": [
            "import tkinter as tk",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 16,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pygame'",
        "module": "main",
        "line_content": "import pygame",
        "line_number": 16,
        "context_before": [
            "import tkinter as tk",
            ""
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 37,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'halloween.png'",
        "line_number": 37,
        "context_before": [
            "tk.Frame.__init__(self, master)",
            ""
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack(side='bottom')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 43,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")",
        "line_number": 43,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 40, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 46,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"startBtnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)",
        "line_number": 46,
        "context_before": [
            "canv.create_text((600 // 2), (500 // 2) - 40, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ],
        "context_after": [
            "startBtn = tk.Button(canv, text=\"START\", font=startBtnFont, foreground=\"yellow\", background=\"black\",",
            "relief=\"ridge\", borderwidth=5, highlightbackground=\"yellow\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 47,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"startBtn\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "startBtn = tk.Button(canv, text=\"START\", font=startBtnFont, foreground=\"yellow\", background=\"black\",",
        "line_number": 47,
        "context_before": [
            "",
            "startBtnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ],
        "context_after": [
            "relief=\"ridge\", borderwidth=5, highlightbackground=\"yellow\",",
            "activebackground=\"yellow\", activeforeground=\"black\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 58,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'halloween.png'",
        "line_number": 58,
        "context_before": [
            "tk.Frame.__init__(self, master)",
            ""
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack(side='bottom')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 64,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")",
        "line_number": 64,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 67,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"btnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "btnFont = tkFont.Font(family=\"Consolas\", size=20)",
        "line_number": 67,
        "context_before": [
            "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Speed Game\", font=labelFont)",
            ""
        ],
        "context_after": [
            "countryBtn = tk.Button(self, text=\"country\", foreground=\"yellow\",",
            "width=15, height=1,"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 68,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryBtn\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryBtn = tk.Button(self, text=\"country\", foreground=\"yellow\",",
        "line_number": 68,
        "context_before": [
            "",
            "btnFont = tkFont.Font(family=\"Consolas\", size=20)"
        ],
        "context_after": [
            "width=15, height=1,",
            "background=\"black\", font=btnFont, relief=\"ridge\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 76,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"prevBtn\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "prevBtn = tk.Button(self, text=\"preve page\", foreground=\"yellow\",",
        "line_number": 76,
        "context_before": [
            "canv.create_window((600 // 2), (500 // 2) - 100, window=countryBtn)",
            ""
        ],
        "context_after": [
            "width=15, height=1,",
            "background=\"black\", font=btnFont, relief=\"ridge\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 86,
        "column": 4,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (18/15)",
        "module": "main",
        "line_content": "def __init__(self, master):",
        "line_number": 86,
        "context_before": [
            "",
            "class CountryPage(tk.Frame):"
        ],
        "context_after": [
            "global pass_count, answer, country_img",
            "global df, pass_window"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 87,
        "column": 8,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'pass_count' but no assignment is done",
        "module": "main",
        "line_content": "global pass_count, answer, country_img",
        "line_number": 87,
        "context_before": [
            "class CountryPage(tk.Frame):",
            "def __init__(self, master):"
        ],
        "context_after": [
            "global df, pass_window",
            "tk.Frame.__init__(self, master)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 88,
        "column": 8,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'df' but no assignment is done",
        "module": "main",
        "line_content": "global df, pass_window",
        "line_number": 88,
        "context_before": [
            "def __init__(self, master):",
            "global pass_count, answer, country_img"
        ],
        "context_after": [
            "tk.Frame.__init__(self, master)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 95,
        "column": 34,
        "message_id": "E0606",
        "message_type": "error",
        "symbol": "possibly-used-before-assignment",
        "message": "Possibly using variable 'df' before assignment",
        "module": "main",
        "line_content": "while code.upper() not in df.index:",
        "line_number": 95,
        "context_before": [
            "",
            "# 엑셀에 없는 이미지일 경우 예외처리"
        ],
        "context_after": [
            "filename = random.choice(os.listdir(\"./images\"))",
            "code = filename.split(\".\")[0]"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 99,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryPath = \"./images/\" + filename",
        "line_number": 99,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "",
            "print(countryPath)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 106,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"backgroundPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "backgroundPath = 'halloween.png'",
        "line_number": 106,
        "context_before": [
            "answer = df[\"country\"][code.upper()]",
            ""
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 112,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"titleFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "titleFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\", slant=\"italic\")",
        "line_number": 112,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img1)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 190, fill=\"white\", text=\"Country\", font=titleFont)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 118,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=17, slant=\"italic\")",
        "line_number": 118,
        "context_before": [
            "country_img = canv.create_image(210, 130, anchor=\"nw\", image=self.img2)",
            ""
        ],
        "context_after": [
            "BtnFont = tkFont.Font(family=\"Consolas\", size=15)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 119,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"BtnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "BtnFont = tkFont.Font(family=\"Consolas\", size=15)",
        "line_number": 119,
        "context_before": [
            "",
            "labelFont = tkFont.Font(family=\"Arial\", size=17, slant=\"italic\")"
        ],
        "context_after": [
            "",
            "canv.create_text((600 // 2), (500 // 2) + 40, fill=\"white\", text=\"answer\", font=labelFont)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 142,
        "column": 21,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "timeformat = '{:02d}:{:02d}'.format(mins, secs)",
        "line_number": 142,
        "context_before": [
            "self.num = 180",
            "mins, secs = divmod(self.num, 60)"
        ],
        "context_after": [
            "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")",
            "timer_text = canv.create_text(100, 100, fill=\"white\", text=timeformat, font=TimerFont)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 143,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"TimerFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")",
        "line_number": 143,
        "context_before": [
            "mins, secs = divmod(self.num, 60)",
            "timeformat = '{:02d}:{:02d}'.format(mins, secs)"
        ],
        "context_after": [
            "timer_text = canv.create_text(100, 100, fill=\"white\", text=timeformat, font=TimerFont)",
            "canv.after(1, self.count, canv, timer_text)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 149,
        "column": 21,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "timeformat = '{:02d}:{:02d}'.format(mins, secs)",
        "line_number": 149,
        "context_before": [
            "def count(self, canv, timer_text):",
            "mins, secs = divmod(self.num, 60)"
        ],
        "context_after": [
            "canv.delete(timer_text)",
            "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 151,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"TimerFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "TimerFont = tkFont.Font(family=\"Arial\", size=30, weight=\"bold\", slant=\"italic\")",
        "line_number": 151,
        "context_before": [
            "timeformat = '{:02d}:{:02d}'.format(mins, secs)",
            "canv.delete(timer_text)"
        ],
        "context_after": [
            "timer_text = canv.create_text(100, 100, fill=\"white\", text=timeformat, font=TimerFont)",
            "self.num -= 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 155,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"msgBox\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "msgBox = tk.messagebox.askretrycancel('Exit App', 'Really Quit?')",
        "line_number": 155,
        "context_before": [
            "self.num -= 1",
            "if self.num < 0:"
        ],
        "context_after": [
            "if msgBox == True:",
            "self.master.switch_frame(StartPage)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 156,
        "column": 15,
        "message_id": "C0121",
        "message_type": "convention",
        "symbol": "singleton-comparison",
        "message": "Comparison 'msgBox == True' should be 'msgBox is True' if checking for the singleton value True, or 'msgBox' if testing for truthiness",
        "module": "main",
        "line_content": "if msgBox == True:",
        "line_number": 156,
        "context_before": [
            "if self.num < 0:",
            "msgBox = tk.messagebox.askretrycancel('Exit App', 'Really Quit?')"
        ],
        "context_after": [
            "self.master.switch_frame(StartPage)",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 164,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Method name \"checkBtn_click\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
        "line_number": 164,
        "context_before": [
            "",
            "# click check button"
        ],
        "context_after": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 164,
        "column": 4,
        "message_id": "R0913",
        "message_type": "refactor",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (6/5)",
        "module": "main",
        "line_content": "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
        "line_number": 164,
        "context_before": [
            "",
            "# click check button"
        ],
        "context_after": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 164,
        "column": 4,
        "message_id": "R0917",
        "message_type": "refactor",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "module": "main",
        "line_content": "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
        "line_number": 164,
        "context_before": [
            "",
            "# click check button"
        ],
        "context_after": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 165,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global answer, country_img",
        "line_number": 165,
        "context_before": [
            "# click check button",
            "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):"
        ],
        "context_after": [
            "global correct_count, problem_count",
            "problem_count -= 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 166,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global correct_count, problem_count",
        "line_number": 166,
        "context_before": [
            "def checkBtn_click(self, master, user_text, check_answer, canv, check_img):",
            "global answer, country_img"
        ],
        "context_after": [
            "problem_count -= 1",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 167,
        "column": 8,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'problem_count'",
        "module": "main",
        "line_content": "problem_count -= 1",
        "line_number": 167,
        "context_before": [
            "global answer, country_img",
            "global correct_count, problem_count"
        ],
        "context_after": [
            "",
            "user_text = user_text.upper().replace(\" \", \"\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 175,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'correct.png'",
        "line_number": 175,
        "context_before": [
            "# correct",
            "print('맞았습돠')"
        ],
        "context_after": [
            "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 177,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"resultImage\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)",
        "line_number": 177,
        "context_before": [
            "ImagePath = 'correct.png'",
            "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))"
        ],
        "context_after": [
            "correct_count += 1",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 178,
        "column": 12,
        "message_id": "E0602",
        "message_type": "error",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'correct_count'",
        "module": "main",
        "line_content": "correct_count += 1",
        "line_number": 178,
        "context_before": [
            "self.img3 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img3)"
        ],
        "context_after": [
            "else:",
            "# wrong"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 182,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'wrong.png'",
        "line_number": 182,
        "context_before": [
            "# wrong",
            "print('틀렸슴돠')"
        ],
        "context_after": [
            "self.img4 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 185,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"resultImage\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "resultImage = canv.create_image(450, 30, anchor=\"nw\", image=self.img4)",
        "line_number": 185,
        "context_before": [
            "self.img4 = ImageTk.PhotoImage(Image.open(ImagePath).resize((100, 100), Image.ANTIALIAS))",
            ""
        ],
        "context_after": [
            "",
            "# resolve 15 problems"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 199,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryPath = \"./images/\" + filename",
        "line_number": 199,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "canv.after(1000,self.delete_img, canv, check_img)",
            "self.img2 = ImageTk.PhotoImage(Image.open(countryPath).resize((180, 130), Image.ANTIALIAS))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 207,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Method name \"passBtn_click\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "def passBtn_click(self, tk, canv, check_img):",
        "line_number": 207,
        "context_before": [
            "print(answer)",
            ""
        ],
        "context_after": [
            "global pass_count, pass_window",
            "global country_img, answer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 207,
        "column": 28,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'tk' from outer scope (line 12)",
        "module": "main",
        "line_content": "def passBtn_click(self, tk, canv, check_img):",
        "line_number": 207,
        "context_before": [
            "print(answer)",
            ""
        ],
        "context_after": [
            "global pass_count, pass_window",
            "global country_img, answer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 208,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global pass_count, pass_window",
        "line_number": 208,
        "context_before": [
            "",
            "def passBtn_click(self, tk, canv, check_img):"
        ],
        "context_after": [
            "global country_img, answer",
            "pass_count = pass_count - 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 209,
        "column": 8,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "main",
        "line_content": "global country_img, answer",
        "line_number": 209,
        "context_before": [
            "def passBtn_click(self, tk, canv, check_img):",
            "global pass_count, pass_window"
        ],
        "context_after": [
            "pass_count = pass_count - 1",
            "if (pass_count < 0):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 224,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"countryPath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "countryPath = \"./images/\" + filename",
        "line_number": 224,
        "context_before": [
            "code = filename.split(\".\")[0]",
            ""
        ],
        "context_after": [
            "canv.after(1000, self.delete_img, canv, check_img)",
            "self.img2 = ImageTk.PhotoImage(Image.open(countryPath).resize((180, 130), Image.ANTIALIAS))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 231,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"BtnFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "BtnFont = tkFont.Font(family=\"Consolas\", size=15)",
        "line_number": 231,
        "context_before": [
            "",
            "self.delete_img(canv, pass_window)"
        ],
        "context_after": [
            "pass_btn = tk.Button(self, text=\"pass: \" + str(pass_count) + \"/3\",",
            "width=10, height=1, font=BtnFont, foreground=\"yellow\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 246,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"ImagePath\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "ImagePath = 'halloween.png'",
        "line_number": 246,
        "context_before": [
            "def __init__(self, master):",
            "tk.Frame.__init__(self, master)"
        ],
        "context_after": [
            "canv = tk.Canvas(self, width=600, height=500, bg='white')",
            "canv.pack(side='bottom')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 252,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"labelFont\" doesn't conform to snake_case naming style",
        "module": "main",
        "line_content": "labelFont = tkFont.Font(family=\"Arial\", size=40, weight=\"bold\")",
        "line_number": 252,
        "context_before": [
            "canv.create_image(0, 0, anchor=\"nw\", image=self.img)",
            ""
        ],
        "context_after": [
            "canv.create_text((600 // 2), (500 // 2) - 50, fill=\"white\", text=\"total score : \" + str(correct_count)+ \"/15\", font=labelFont)",
            "canv.create_text((600 // 2), (500 // 2) + 50, fill=\"white\", text=\"Good Job!\", font=labelFont)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 261,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pass_count\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "pass_count = 3",
        "line_number": 261,
        "context_before": [
            "mySound = pygame.mixer.Sound(\"SpeedGameBgm.mp3\")",
            "mySound.play(-1)"
        ],
        "context_after": [
            "problem_count = 15",
            "correct_count = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 262,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"problem_count\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "problem_count = 15",
        "line_number": 262,
        "context_before": [
            "mySound.play(-1)",
            "pass_count = 3"
        ],
        "context_after": [
            "correct_count = 0",
            "answer = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 263,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"correct_count\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "correct_count = 0",
        "line_number": 263,
        "context_before": [
            "pass_count = 3",
            "problem_count = 15"
        ],
        "context_after": [
            "answer = 0",
            "country_img = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 264,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"answer\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "answer = 0",
        "line_number": 264,
        "context_before": [
            "problem_count = 15",
            "correct_count = 0"
        ],
        "context_after": [
            "country_img = 0",
            "pass_window = 0"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 265,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"country_img\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "country_img = 0",
        "line_number": 265,
        "context_before": [
            "correct_count = 0",
            "answer = 0"
        ],
        "context_after": [
            "pass_window = 0",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 266,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"pass_window\" doesn't conform to UPPER_CASE naming style",
        "module": "main",
        "line_content": "pass_window = 0",
        "line_number": 266,
        "context_before": [
            "answer = 0",
            "country_img = 0"
        ],
        "context_after": [
            "",
            "df = pd.read_excel(\"./CountryCodeData.xlsx\", index_col=0, names=[\"code\", \"country\"])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"pandas\"",
        "module": "main",
        "line_content": "import os",
        "line_number": 4,
        "context_before": [
            "from tkinter import messagebox",
            "import pandas as pd"
        ],
        "context_after": [
            "import random",
            "from PIL import Image, ImageTk"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"random\" should be placed before third party import \"pandas\"",
        "module": "main",
        "line_content": "import random",
        "line_number": 5,
        "context_before": [
            "import pandas as pd",
            "import os"
        ],
        "context_after": [
            "from PIL import Image, ImageTk",
            "import time"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 7,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party imports \"pandas\", \"PIL.Image\"",
        "module": "main",
        "line_content": "import time",
        "line_number": 7,
        "context_before": [
            "import random",
            "from PIL import Image, ImageTk"
        ],
        "context_after": [
            "import threading",
            "from tkinter import messagebox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 8,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"threading\" should be placed before third party imports \"pandas\", \"PIL.Image\"",
        "module": "main",
        "line_content": "import threading",
        "line_number": 8,
        "context_before": [
            "from PIL import Image, ImageTk",
            "import time"
        ],
        "context_after": [
            "from tkinter import messagebox",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 9,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"tkinter.messagebox\" should be placed before third party imports \"pandas\", \"PIL.Image\"",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 9,
        "context_before": [
            "import time",
            "import threading"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 9,
        "column": 0,
        "message_id": "C0412",
        "message_type": "convention",
        "symbol": "ungrouped-imports",
        "message": "Imports from package tkinter are not grouped",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 9,
        "context_before": [
            "import time",
            "import threading"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 2,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused messagebox imported from tkinter",
        "module": "main",
        "line_content": "from tkinter import messagebox",
        "line_number": 2,
        "context_before": [
            "import tkinter.font as tkFont"
        ],
        "context_after": [
            "import pandas as pd",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 7,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import time",
        "module": "main",
        "line_content": "import time",
        "line_number": 7,
        "context_before": [
            "import random",
            "from PIL import Image, ImageTk"
        ],
        "context_after": [
            "import threading",
            "from tkinter import messagebox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Speed_Game/windows/main.py",
        "line": 8,
        "column": 0,
        "message_id": "W0611",
        "message_type": "warning",
        "symbol": "unused-import",
        "message": "Unused import threading",
        "module": "main",
        "line_content": "import threading",
        "line_number": 8,
        "context_before": [
            "from PIL import Image, ImageTk",
            "import time"
        ],
        "context_after": [
            "from tkinter import messagebox",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_move_files_into_alphabetically_ordered_folder/main.py",
        "line": 24,
        "column": 4,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "module": "main",
        "line_content": "if filename[0].isalpha():",
        "line_number": 24,
        "context_before": [
            "'!@#.txt' --> 'misc'",
            "'''"
        ],
        "context_after": [
            "return filename[0].lower()",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_move_files_into_alphabetically_ordered_folder/main.py",
        "line": 34,
        "column": 4,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'filenames' but no assignment is done",
        "module": "main",
        "line_content": "global filenames",
        "line_number": 34,
        "context_before": [
            "read the filename in the current directory and append them to a list",
            "'''"
        ],
        "context_after": [
            "for files in os.listdir(os.getcwd()):",
            "if os.path.isfile(os.path.join(os.getcwd(), files)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_move_files_into_alphabetically_ordered_folder/main.py",
        "line": 46,
        "column": 4,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'filenames' but no assignment is done",
        "module": "main",
        "line_content": "global filenames",
        "line_number": 46,
        "context_before": [
            "creating a folders",
            "'''"
        ],
        "context_after": [
            "for f in filenames:",
            "if os.path.isdir(getfoldername(f)):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Write_script_to_move_files_into_alphabetically_ordered_folder/main.py",
        "line": 62,
        "column": 4,
        "message_id": "W0602",
        "message_type": "warning",
        "symbol": "global-variable-not-assigned",
        "message": "Using global for 'filenames' but no assignment is done",
        "module": "main",
        "line_content": "global filenames",
        "line_number": 62,
        "context_before": [
            "'zebra.py'(moved to) 'z'",
            "'''"
        ],
        "context_after": [
            "for i in filenames:",
            "filename = i"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/XKCD_downloader/xkcd_dowloader.py",
        "line": 33,
        "column": 33,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "xkcd_dowloader",
        "line_content": "# Creating the image file",
        "line_number": 33,
        "context_before": [
            "r.raw.decode_content = True",
            ""
        ],
        "context_after": [
            "with open(image_name, 'wb') as f:",
            "shutil.copyfileobj(r.raw, f)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/XKCD_downloader/xkcd_dowloader.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "xkcd_dowloader",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from bs4 import BeautifulSoup as bs",
            "import shutil"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/XKCD_downloader/xkcd_dowloader.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "xkcd_dowloader",
        "line_content": "from bs4 import BeautifulSoup as bs",
        "line_number": 2,
        "context_before": [
            "import requests"
        ],
        "context_after": [
            "import shutil",
            "import argparse"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/XKCD_downloader/xkcd_dowloader.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"shutil\" should be placed before third party imports \"requests\", \"bs4.BeautifulSoup\"",
        "module": "xkcd_dowloader",
        "line_content": "import shutil",
        "line_number": 3,
        "context_before": [
            "import requests",
            "from bs4 import BeautifulSoup as bs"
        ],
        "context_after": [
            "import argparse",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/XKCD_downloader/xkcd_dowloader.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"argparse\" should be placed before third party imports \"requests\", \"bs4.BeautifulSoup\"",
        "module": "xkcd_dowloader",
        "line_content": "import argparse",
        "line_number": 4,
        "context_before": [
            "from bs4 import BeautifulSoup as bs",
            "import shutil"
        ],
        "context_after": [
            "",
            "# Code to add the cli"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 19,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (110/100)",
        "module": "network_usage_tracker",
        "line_content": "start1 = tk.Label(text = \"NETWORK USAGE\\nTRACKER\", font=(\"Arial\", 55,\"underline\"), fg=\"magenta\") # same way bg",
        "line_number": 19,
        "context_before": [
            "",
            "# top label"
        ],
        "context_after": [
            "start1.place(x = 150, y = 10)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 26,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (135/100)",
        "module": "network_usage_tracker",
        "line_content": "startb = Button(window1, text=\"START\",command=start_fun,font=(\"Arial\", 25), bg = \"orange\", fg = \"blue\", borderwidth=3, relief=\"raised\")",
        "line_number": 26,
        "context_before": [
            "",
            "# start button created"
        ],
        "context_after": [
            "startb.place(x =130 , y =590 )",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 31,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (105/100)",
        "module": "network_usage_tracker",
        "line_content": "# Creates a Tkinter-compatible photo image, which can be used everywhere Tkinter expects an image object.",
        "line_number": 31,
        "context_before": [
            "# image on the main window",
            "path = \"Images/front.png\""
        ],
        "context_after": [
            "img1 = ImageTk.PhotoImage(Image.open(path))",
            "# The Label widget is a standard Tkinter widget used to display a text or image on the screen."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 43,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (129/100)",
        "module": "network_usage_tracker",
        "line_content": "exitb = Button(window1, text=\"EXIT\",command=exit_win,font=(\"Arial\", 25), bg = \"red\", fg = \"blue\", borderwidth=3, relief=\"raised\")",
        "line_number": 43,
        "context_before": [
            "",
            "# exit button created"
        ],
        "context_after": [
            "exitb.place(x =730 , y = 590 )",
            "window1.protocol(\"WM_DELETE_WINDOW\", exit_win)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 61,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (117/100)",
        "module": "network_usage_tracker",
        "line_content": "path_text = Text(window, height=1, width=24, font=(\"Arial\", 50), bg=\"white\", fg=\"blue\",borderwidth=2, relief=\"solid\")",
        "line_number": 61,
        "context_before": [
            "",
            "# text area"
        ],
        "context_after": [
            "path_text.place(x=50, y = 300)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 97,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'if' keyword",
        "module": "network_usage_tracker",
        "line_content": "if(new_value - old_value>1000000):",
        "line_number": 97,
        "context_before": [
            "",
            "# for checking max limit exceeded"
        ],
        "context_after": [
            "mbox.showinfo(\"Exceed Status\", \"Max Limit Usage Exceeded.\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 114,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "network_usage_tracker",
        "line_content": "window.mainloop()",
        "line_number": 114,
        "context_before": [
            "",
            "window.protocol(\"WM_DELETE_WINDOW\", exit_win)"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 5,
        "column": 0,
        "message_id": "W0401",
        "message_type": "warning",
        "symbol": "wildcard-import",
        "message": "Wildcard import tkinter",
        "module": "network_usage_tracker",
        "line_content": "from tkinter import *",
        "line_number": 5,
        "context_before": [
            "",
            "# imported necessary library"
        ],
        "context_after": [
            "import tkinter as tk",
            "import tkinter.messagebox as mbox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 8,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pil'",
        "module": "network_usage_tracker",
        "line_content": "from pil import ImageTk, Image",
        "line_number": 8,
        "context_before": [
            "import tkinter as tk",
            "import tkinter.messagebox as mbox"
        ],
        "context_after": [
            "import time",
            "import psutil"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 10,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'psutil'",
        "module": "network_usage_tracker",
        "line_content": "import psutil",
        "line_number": 10,
        "context_before": [
            "from pil import ImageTk, Image",
            "import time"
        ],
        "context_after": [
            "import socket",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 30,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"path\" doesn't conform to UPPER_CASE naming style",
        "module": "network_usage_tracker",
        "line_content": "path = \"Images/front.png\"",
        "line_number": 30,
        "context_before": [
            "",
            "# image on the main window"
        ],
        "context_after": [
            "# Creates a Tkinter-compatible photo image, which can be used everywhere Tkinter expects an image object.",
            "img1 = ImageTk.PhotoImage(Image.open(path))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 77,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"old_value\" doesn't conform to UPPER_CASE naming style",
        "module": "network_usage_tracker",
        "line_content": "old_value = 0",
        "line_number": 77,
        "context_before": [
            "",
            "# function defined to update the usage instantly"
        ],
        "context_after": [
            "def update_label():",
            "global old_value"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 79,
        "column": 4,
        "message_id": "W0603",
        "message_type": "warning",
        "symbol": "global-statement",
        "message": "Using the global statement",
        "module": "network_usage_tracker",
        "line_content": "global old_value",
        "line_number": 79,
        "context_before": [
            "old_value = 0",
            "def update_label():"
        ],
        "context_after": [
            "new_value = psutil.net_io_counters().bytes_sent + psutil.net_io_counters().bytes_recv",
            "# if old_value:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 83,
        "column": 8,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "network_usage_tracker",
        "line_content": "x = \"{0:.3f}\".format(new_value - old_value)",
        "line_number": 83,
        "context_before": [
            "# if old_value:",
            "# send_stat(new_value - old_value)"
        ],
        "context_after": [
            "# l1.configure(text=\"\")",
            "# l1.configure(text= \"Usage : \" + str(x) + \" bytes/sec\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 90,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"IPaddress\" doesn't conform to snake_case naming style",
        "module": "network_usage_tracker",
        "line_content": "IPaddress = socket.gethostbyname(socket.gethostname())",
        "line_number": 90,
        "context_before": [
            "",
            "# for updating connection status"
        ],
        "context_after": [
            "if IPaddress == \"127.0.0.1\":",
            "l2.configure(text=\"No internet, your localhost is\\n\" + IPaddress)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 109,
        "column": 0,
        "message_id": "E0102",
        "message_type": "error",
        "symbol": "function-redefined",
        "message": "function already defined line 38",
        "module": "network_usage_tracker",
        "line_content": "def exit_win():",
        "line_number": 109,
        "context_before": [
            "",
            "# function for exiting window"
        ],
        "context_after": [
            "if mbox.askokcancel(\"Exit\", \"Do you want to exit?\"):",
            "window.destroy()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 9,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"pil.ImageTk\"",
        "module": "network_usage_tracker",
        "line_content": "import time",
        "line_number": 9,
        "context_before": [
            "import tkinter.messagebox as mbox",
            "from pil import ImageTk, Image"
        ],
        "context_after": [
            "import psutil",
            "import socket"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 11,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"socket\" should be placed before third party imports \"pil.ImageTk\", \"psutil\"",
        "module": "network_usage_tracker",
        "line_content": "import socket",
        "line_number": 11,
        "context_before": [
            "import time",
            "import psutil"
        ],
        "context_after": [
            "",
            "# Main Window & Configuration"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Network Usage Tracker/network_usage_tracker.py",
        "line": 5,
        "column": 0,
        "message_id": "W0614",
        "message_type": "warning",
        "symbol": "unused-wildcard-import",
        "message": "Unused import(s) collections, enum, sys, types, TclError, re, wantobjects, TkVersion, TclVersion, READABLE, WRITABLE, EXCEPTION, EventType, Event, NoDefaultRoot, Variable, StringVar, IntVar, DoubleVar, BooleanVar, mainloop, getint, getdouble, getboolean, Misc, CallWrapper, XView, YView, Wm, Tcl, Pack, Place, Grid, BaseWidget, Widget, Toplevel, Canvas, Checkbutton, Entry, Frame, Listbox, Menu, Menubutton, Message, Radiobutton, Scale, Scrollbar, OptionMenu, PhotoImage, BitmapImage, image_names, image_types, Spinbox, LabelFrame, PanedWindow, NO, FALSE, OFF, YES, TRUE, ON, N, S, W, E, NW, SW, NE, SE, NS, EW, NSEW, CENTER, NONE, X, Y, BOTH, LEFT, TOP, RIGHT, BOTTOM, RAISED, SUNKEN, FLAT, RIDGE, GROOVE, SOLID, HORIZONTAL, VERTICAL, NUMERIC, CHAR, WORD, BASELINE, INSIDE, OUTSIDE, SEL, SEL_FIRST, SEL_LAST, INSERT, CURRENT, ANCHOR, ALL, NORMAL, DISABLED, ACTIVE, HIDDEN, CASCADE, CHECKBUTTON, COMMAND, RADIOBUTTON, SEPARATOR, SINGLE, BROWSE, MULTIPLE, EXTENDED, DOTBOX, UNDERLINE, PIESLICE, CHORD, ARC, FIRST, LAST, BUTT, PROJECTING, ROUND, BEVEL, MITER, MOVETO, SCROLL, UNITS and PAGES from wildcard import of tkinter",
        "module": "network_usage_tracker",
        "line_content": "from tkinter import *",
        "line_number": 5,
        "context_before": [
            "",
            "# imported necessary library"
        ],
        "context_after": [
            "import tkinter as tk",
            "import tkinter.messagebox as mbox"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"Compute_IoU\" doesn't conform to snake_case naming style",
        "module": "Compute_IoU",
        "line_content": "import numpy as np",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "def Cal_IoU(GT_bbox, Pred_bbox):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "Compute_IoU",
        "line_content": "import numpy as np",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "",
            "def Cal_IoU(GT_bbox, Pred_bbox):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 3,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"Cal_IoU\" doesn't conform to snake_case naming style",
        "module": "Compute_IoU",
        "line_content": "def Cal_IoU(GT_bbox, Pred_bbox):",
        "line_number": 3,
        "context_before": [
            "import numpy as np",
            ""
        ],
        "context_after": [
            "'''",
            "Args:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 3,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"GT_bbox\" doesn't conform to snake_case naming style",
        "module": "Compute_IoU",
        "line_content": "def Cal_IoU(GT_bbox, Pred_bbox):",
        "line_number": 3,
        "context_before": [
            "import numpy as np",
            ""
        ],
        "context_after": [
            "'''",
            "Args:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 3,
        "column": 21,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"Pred_bbox\" doesn't conform to snake_case naming style",
        "module": "Compute_IoU",
        "line_content": "def Cal_IoU(GT_bbox, Pred_bbox):",
        "line_number": 3,
        "context_before": [
            "import numpy as np",
            ""
        ],
        "context_after": [
            "'''",
            "Args:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 22,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"S1\" doesn't conform to snake_case naming style",
        "module": "Compute_IoU",
        "line_content": "S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)",
        "line_number": 22,
        "context_before": [
            "#2. Calculate the area of all area",
            "#S = S1 + S2 - area"
        ],
        "context_after": [
            "S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)",
            "S = S1 + S2 - area"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 23,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"S2\" doesn't conform to snake_case naming style",
        "module": "Compute_IoU",
        "line_content": "S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)",
        "line_number": 23,
        "context_before": [
            "#S = S1 + S2 - area",
            "S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)"
        ],
        "context_after": [
            "S = S1 + S2 - area",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Compute_IoU/Compute_IoU.py",
        "line": 24,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"S\" doesn't conform to snake_case naming style",
        "module": "Compute_IoU",
        "line_content": "S = S1 + S2 - area",
        "line_number": 24,
        "context_before": [
            "S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)",
            "S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)"
        ],
        "context_after": [
            "",
            "#3. Calculate the IoU"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 7,
        "column": 22,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "s = requests.session()",
        "line_number": 7,
        "context_before": [
            "",
            "# Setting up session"
        ],
        "context_after": [
            "",
            "# List contaiting all the films for which data has to be scraped from IMDB"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 17,
        "column": 42,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "# Define path where your films are present",
        "line_number": 17,
        "context_before": [
            "genres = []",
            ""
        ],
        "context_after": [
            "# For eg: \"/Users/utkarsh/Desktop/films\"",
            "path = input(\"Enter the path where your films are: \")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 33,
        "column": 35,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "query = \"+\".join(title.split())",
        "line_number": 33,
        "context_before": [
            "title = line.lower()",
            "# release = x[1]"
        ],
        "context_after": [
            "URL = \"https://www.imdb.com/search/title/?title=\" + query",
            "print(URL)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 37,
        "column": 8,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "try:",
        "line_number": 37,
        "context_before": [
            "print(URL)",
            "# print(release)"
        ],
        "context_after": [
            "response = s.get(URL)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 45,
        "column": 70,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "soup = BeautifulSoup(response.content, features=\"html.parser\")",
        "line_number": 45,
        "context_before": [
            "# print(response.status_code)",
            ""
        ],
        "context_after": [
            "#searching all films containers found",
            "containers = soup.find_all(\"div\", class_=\"lister-item-content\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 52,
        "column": 103,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "# Uncomment below lines if you want year specific as well, define year variable before this",
        "line_number": 52,
        "context_before": [
            "name = result.h3.a.text.lower()",
            ""
        ],
        "context_after": [
            "# year = result.h3.find(",
            "# \"span\", class_=\"lister-item-year text-muted unbold\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 52,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (103/100)",
        "module": "find_IMDb_rating",
        "line_content": "# Uncomment below lines if you want year specific as well, define year variable before this",
        "line_number": 52,
        "context_before": [
            "name = result.h3.a.text.lower()",
            ""
        ],
        "context_after": [
            "# year = result.h3.find(",
            "# \"span\", class_=\"lister-item-year text-muted unbold\""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 55,
        "column": 28,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "# ).text.lower()",
        "line_number": 55,
        "context_before": [
            "# year = result.h3.find(",
            "# \"span\", class_=\"lister-item-year text-muted unbold\""
        ],
        "context_after": [
            "",
            "#if film found (searching using name)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 69,
        "column": 0,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "",
        "line_number": 69,
        "context_before": [
            "ratings.append(rating)",
            "genres.append(genre)"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 76,
        "column": 70,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "find_IMDb_rating",
        "line_content": "df = pd.DataFrame({'Film Name':names,'Rating':ratings,'Genre':genres})",
        "line_number": 76,
        "context_before": [
            "",
            "#storing in pandas dataframe"
        ],
        "context_after": [
            "",
            "#making csv using pandas"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"find_IMDb_rating\" doesn't conform to snake_case naming style",
        "module": "find_IMDb_rating",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            "import pandas as pd"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "find_IMDb_rating",
        "line_content": "from bs4 import BeautifulSoup",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import requests",
            "import pandas as pd"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "find_IMDb_rating",
        "line_content": "import requests",
        "line_number": 2,
        "context_before": [
            "from bs4 import BeautifulSoup"
        ],
        "context_after": [
            "import pandas as pd",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pandas'",
        "module": "find_IMDb_rating",
        "line_content": "import pandas as pd",
        "line_number": 3,
        "context_before": [
            "from bs4 import BeautifulSoup",
            "import requests"
        ],
        "context_after": [
            "import os",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 33,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"query\" doesn't conform to UPPER_CASE naming style",
        "module": "find_IMDb_rating",
        "line_content": "query = \"+\".join(title.split())",
        "line_number": 33,
        "context_before": [
            "title = line.lower()",
            "# release = x[1]"
        ],
        "context_after": [
            "URL = \"https://www.imdb.com/search/title/?title=\" + query",
            "print(URL)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 72,
        "column": 11,
        "message_id": "W0718",
        "message_type": "warning",
        "symbol": "broad-exception-caught",
        "message": "Catching too general exception Exception",
        "module": "find_IMDb_rating",
        "line_content": "except Exception:",
        "line_number": 72,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "print(\"Try again with valid combination of tile and release year\")",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Find_imdb_rating/find_IMDb_rating.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party imports \"bs4.BeautifulSoup\", \"requests\", \"pandas\"",
        "module": "find_IMDb_rating",
        "line_content": "import os",
        "line_number": 4,
        "context_before": [
            "import requests",
            "import pandas as pd"
        ],
        "context_after": [
            "",
            "# Setting up session"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 55,
        "column": 32,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "app",
        "line_content": "data.append(row)",
        "line_number": 55,
        "context_before": [
            "userFileReader = csv.reader(userFile)",
            "for row in userFileReader:"
        ],
        "context_after": [
            "return data",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 42,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"readCsv\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "def readCsv(path):",
        "line_number": 42,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "print('\\n\\n Processing Csv file \\n\\n')",
            "sys.stdout.flush()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 51,
        "column": 4,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 51,
        "context_before": [
            "for row in userFileReader:",
            "data.append(row)"
        ],
        "context_after": [
            "with open(path, 'r', encoding=\"mbcs\") as userFile:",
            "userFileReader = csv.reader(userFile)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 47,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "app",
        "line_content": "with open(path, 'r') as userFile:",
        "line_number": 47,
        "context_before": [
            "data = []",
            "try:"
        ],
        "context_after": [
            "userFileReader = csv.reader(userFile)",
            "for row in userFileReader:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 47,
        "column": 32,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"userFile\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "with open(path, 'r') as userFile:",
        "line_number": 47,
        "context_before": [
            "data = []",
            "try:"
        ],
        "context_after": [
            "userFileReader = csv.reader(userFile)",
            "for row in userFileReader:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 48,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"userFileReader\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "userFileReader = csv.reader(userFile)",
        "line_number": 48,
        "context_before": [
            "try:",
            "with open(path, 'r') as userFile:"
        ],
        "context_after": [
            "for row in userFileReader:",
            "data.append(row)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 52,
        "column": 49,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"userFile\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "with open(path, 'r', encoding=\"mbcs\") as userFile:",
        "line_number": 52,
        "context_before": [
            "data.append(row)",
            "except:"
        ],
        "context_after": [
            "userFileReader = csv.reader(userFile)",
            "for row in userFileReader:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 53,
        "column": 12,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"userFileReader\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "userFileReader = csv.reader(userFile)",
        "line_number": 53,
        "context_before": [
            "except:",
            "with open(path, 'r', encoding=\"mbcs\") as userFile:"
        ],
        "context_after": [
            "for row in userFileReader:",
            "data.append(row)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 59,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"writeCsv\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "def writeCsv(data, LANGUAGE, SENTENCES_COUNT):",
        "line_number": 59,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "print('\\n\\n Updating Csv file \\n\\n')",
            "sys.stdout.flush()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 59,
        "column": 19,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"LANGUAGE\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "def writeCsv(data, LANGUAGE, SENTENCES_COUNT):",
        "line_number": 59,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "print('\\n\\n Updating Csv file \\n\\n')",
            "sys.stdout.flush()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 59,
        "column": 29,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"SENTENCES_COUNT\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "def writeCsv(data, LANGUAGE, SENTENCES_COUNT):",
        "line_number": 59,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "print('\\n\\n Updating Csv file \\n\\n')",
            "sys.stdout.flush()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 62,
        "column": 9,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "app",
        "line_content": "with open('beneficiary.csv', 'w') as newFile:",
        "line_number": 62,
        "context_before": [
            "print('\\n\\n Updating Csv file \\n\\n')",
            "sys.stdout.flush()"
        ],
        "context_after": [
            "newFileWriter = csv.writer(newFile)",
            "length = len(data)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 62,
        "column": 41,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"newFile\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "with open('beneficiary.csv', 'w') as newFile:",
        "line_number": 62,
        "context_before": [
            "print('\\n\\n Updating Csv file \\n\\n')",
            "sys.stdout.flush()"
        ],
        "context_after": [
            "newFileWriter = csv.writer(newFile)",
            "length = len(data)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 63,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"newFileWriter\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "newFileWriter = csv.writer(newFile)",
        "line_number": 63,
        "context_before": [
            "sys.stdout.flush()",
            "with open('beneficiary.csv', 'w') as newFile:"
        ],
        "context_after": [
            "length = len(data)",
            "position = data[0].index('website')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 77,
        "column": 12,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 77,
        "context_before": [
            "__data.append(summary)",
            "newFileWriter.writerow(__data)"
        ],
        "context_after": [
            "print('\\n\\n Error Skipping line \\n\\n')",
            "sys.stdout.flush()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 82,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Function name \"processCsv\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "def processCsv(path, LANGUAGE, SENTENCES_COUNT):",
        "line_number": 82,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "try:",
            "print('\\n\\n Proessing Started \\n\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 82,
        "column": 21,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"LANGUAGE\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "def processCsv(path, LANGUAGE, SENTENCES_COUNT):",
        "line_number": 82,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "try:",
            "print('\\n\\n Proessing Started \\n\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 82,
        "column": 31,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"SENTENCES_COUNT\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "def processCsv(path, LANGUAGE, SENTENCES_COUNT):",
        "line_number": 82,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "try:",
            "print('\\n\\n Proessing Started \\n\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 88,
        "column": 4,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 88,
        "context_before": [
            "data = readCsv(path)",
            "writeCsv(data, LANGUAGE, SENTENCES_COUNT)"
        ],
        "context_after": [
            "print('\\n\\n Invalid file in file path \\n\\n')",
            "sys.stdout.flush()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 103,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"LANGUAGE\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "LANGUAGE = \"english\" if args.language is None else args.language",
        "line_number": 103,
        "context_before": [
            "url = args.url",
            "path = args.path"
        ],
        "context_after": [
            "SENTENCES_COUNT = 2 if args.sentence is None else args.sentence",
            "if action == 'bulk':"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 104,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Variable name \"SENTENCES_COUNT\" doesn't conform to snake_case naming style",
        "module": "app",
        "line_content": "SENTENCES_COUNT = 2 if args.sentence is None else args.sentence",
        "line_number": 104,
        "context_before": [
            "path = args.path",
            "LANGUAGE = \"english\" if args.language is None else args.language"
        ],
        "context_after": [
            "if action == 'bulk':",
            "if path is None:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 114,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 114,
        "context_before": [
            "try:",
            "processCsv(path, LANGUAGE, SENTENCES_COUNT)"
        ],
        "context_after": [
            "print(",
            "'\\n\\n Invalid Entry!, please Ensure you enter a valid file path \\n\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 127,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "app",
        "line_content": "except:",
        "line_number": 127,
        "context_before": [
            "try:",
            "summarize(url, LANGUAGE, SENTENCES_COUNT)"
        ],
        "context_after": [
            "print(",
            "'\\n\\n Invalid Entry!, please Ensure you enter a valid web link \\n\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 93,
        "column": 0,
        "message_id": "R1710",
        "message_type": "refactor",
        "symbol": "inconsistent-return-statements",
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "module": "app",
        "line_content": "def main(argv=sys.argv):",
        "line_number": 93,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# Configure logging",
            "logging.basicConfig(filename='applog.log',"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"csv\" should be placed before third party import \"utils.summarize.summarize\"",
        "module": "app",
        "line_content": "import csv",
        "line_number": 3,
        "context_before": [
            "#!/usr/bin/python",
            "from utils.summarize import summarize"
        ],
        "context_after": [
            "import shutil",
            "import os"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 4,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"shutil\" should be placed before third party import \"utils.summarize.summarize\"",
        "module": "app",
        "line_content": "import shutil",
        "line_number": 4,
        "context_before": [
            "from utils.summarize import summarize",
            "import csv"
        ],
        "context_after": [
            "import os",
            "import textwrap"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 5,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"utils.summarize.summarize\"",
        "module": "app",
        "line_content": "import os",
        "line_number": 5,
        "context_before": [
            "import csv",
            "import shutil"
        ],
        "context_after": [
            "import textwrap",
            "import logging"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 6,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"textwrap\" should be placed before third party import \"utils.summarize.summarize\"",
        "module": "app",
        "line_content": "import textwrap",
        "line_number": 6,
        "context_before": [
            "import shutil",
            "import os"
        ],
        "context_after": [
            "import logging",
            "import argparse"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 7,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"logging\" should be placed before third party import \"utils.summarize.summarize\"",
        "module": "app",
        "line_content": "import logging",
        "line_number": 7,
        "context_before": [
            "import os",
            "import textwrap"
        ],
        "context_after": [
            "import argparse",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 8,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"argparse\" should be placed before third party import \"utils.summarize.summarize\"",
        "module": "app",
        "line_content": "import argparse",
        "line_number": 8,
        "context_before": [
            "import textwrap",
            "import logging"
        ],
        "context_after": [
            "import sys",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/app.py",
        "line": 9,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party import \"utils.summarize.summarize\"",
        "module": "app",
        "line_content": "import sys",
        "line_number": 9,
        "context_before": [
            "import logging",
            "import argparse"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/comparison.py",
        "line": 46,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (104/100)",
        "module": "utils.comparison",
        "line_content": "#                                                \"tokyo stocks close up # percent to fresh record high\")",
        "line_number": 46,
        "context_before": [
            "",
            "# rouge_1, rouge_2,rouge_l,rouge_be = eval_rouges( \"tokyo shares close up #.## percent\","
        ],
        "context_after": [
            "#",
            "# print(\"ROUGE-1: {}, ROUGE-2: {}, ROUGE-L: {}, ROUGE-BE: {}\".format("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/comparison.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sumeval.metrics.rouge'",
        "module": "utils.comparison",
        "line_content": "from sumeval.metrics.rouge import RougeCalculator",
        "line_number": 5,
        "context_before": [
            "# https://github.com/Tian312/awesome-text-summarization",
            ""
        ],
        "context_after": [
            "from sumeval.metrics.bleu import BLEUCalculator",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/comparison.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sumeval.metrics.bleu'",
        "module": "utils.comparison",
        "line_content": "from sumeval.metrics.bleu import BLEUCalculator",
        "line_number": 6,
        "context_before": [
            "",
            "from sumeval.metrics.rouge import RougeCalculator"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tensorflow'",
        "module": "utils.test",
        "line_content": "import tensorflow as tf",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from model import Model",
            "from utils import build_dict, build_dataset, batch_iter, get_text_list"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'model'",
        "module": "utils.test",
        "line_content": "from model import Model",
        "line_number": 2,
        "context_before": [
            "import tensorflow as tf"
        ],
        "context_after": [
            "from utils import build_dict, build_dataset, batch_iter, get_text_list",
            "valid_article_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 3,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'build_dict' in module 'utils'",
        "module": "utils.test",
        "line_content": "from utils import build_dict, build_dataset, batch_iter, get_text_list",
        "line_number": 3,
        "context_before": [
            "import tensorflow as tf",
            "from model import Model"
        ],
        "context_after": [
            "valid_article_path = '.'",
            "valid_title_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 3,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'build_dataset' in module 'utils'",
        "module": "utils.test",
        "line_content": "from utils import build_dict, build_dataset, batch_iter, get_text_list",
        "line_number": 3,
        "context_before": [
            "import tensorflow as tf",
            "from model import Model"
        ],
        "context_after": [
            "valid_article_path = '.'",
            "valid_title_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 3,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'batch_iter' in module 'utils'",
        "module": "utils.test",
        "line_content": "from utils import build_dict, build_dataset, batch_iter, get_text_list",
        "line_number": 3,
        "context_before": [
            "import tensorflow as tf",
            "from model import Model"
        ],
        "context_after": [
            "valid_article_path = '.'",
            "valid_title_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 3,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'get_text_list' in module 'utils'",
        "module": "utils.test",
        "line_content": "from utils import build_dict, build_dataset, batch_iter, get_text_list",
        "line_number": 3,
        "context_before": [
            "import tensorflow as tf",
            "from model import Model"
        ],
        "context_after": [
            "valid_article_path = '.'",
            "valid_title_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 4,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"valid_article_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.test",
        "line_content": "valid_article_path = '.'",
        "line_number": 4,
        "context_before": [
            "from model import Model",
            "from utils import build_dict, build_dataset, batch_iter, get_text_list"
        ],
        "context_after": [
            "valid_title_path = '.'",
            "tf.reset_default_graph()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 5,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"valid_title_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.test",
        "line_content": "valid_title_path = '.'",
        "line_number": 5,
        "context_before": [
            "from utils import build_dict, build_dataset, batch_iter, get_text_list",
            "valid_article_path = '.'"
        ],
        "context_after": [
            "tf.reset_default_graph()",
            "default_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"default_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.test",
        "line_content": "default_path = '.'",
        "line_number": 7,
        "context_before": [
            "valid_title_path = '.'",
            "tf.reset_default_graph()"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 10,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"args\" doesn't conform to PascalCase naming style",
        "module": "utils.test",
        "line_content": "class args:",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 10,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (0/2)",
        "module": "utils.test",
        "line_content": "class args:",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 65,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "utils.test",
        "line_content": "with open(default_path + \"result.txt\", \"a\") as f:",
        "line_number": 65,
        "context_before": [
            "for y in x] for x in prediction[:, 0, :]]",
            "summary_array = []"
        ],
        "context_after": [
            "for line in prediction_output:",
            "summary = list()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/test.py",
        "line": 67,
        "column": 26,
        "message_id": "R1734",
        "message_type": "refactor",
        "symbol": "use-list-literal",
        "message": "Consider using [] instead of list()",
        "module": "utils.test",
        "line_content": "summary = list()",
        "line_number": 67,
        "context_before": [
            "with open(default_path + \"result.txt\", \"a\") as f:",
            "for line in prediction_output:"
        ],
        "context_after": [
            "for word in line:",
            "if word == \"</s>\":"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sumy.parsers.html'",
        "module": "utils.summarize",
        "line_content": "from sumy.parsers.html import HtmlParser",
        "line_number": 3,
        "context_before": [
            "from __future__ import absolute_import",
            "from __future__ import division, print_function, unicode_literals"
        ],
        "context_after": [
            "from sumy.nlp.tokenizers import Tokenizer",
            "from sumy.summarizers.lex_rank import LexRankSummarizer as Summarizer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sumy.nlp.tokenizers'",
        "module": "utils.summarize",
        "line_content": "from sumy.nlp.tokenizers import Tokenizer",
        "line_number": 4,
        "context_before": [
            "from __future__ import division, print_function, unicode_literals",
            "from sumy.parsers.html import HtmlParser"
        ],
        "context_after": [
            "from sumy.summarizers.lex_rank import LexRankSummarizer as Summarizer",
            "from sumy.nlp.stemmers import Stemmer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sumy.summarizers.lex_rank'",
        "module": "utils.summarize",
        "line_content": "from sumy.summarizers.lex_rank import LexRankSummarizer as Summarizer",
        "line_number": 5,
        "context_before": [
            "from sumy.parsers.html import HtmlParser",
            "from sumy.nlp.tokenizers import Tokenizer"
        ],
        "context_after": [
            "from sumy.nlp.stemmers import Stemmer",
            "from sumy.utils import get_stop_words"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 6,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sumy.nlp.stemmers'",
        "module": "utils.summarize",
        "line_content": "from sumy.nlp.stemmers import Stemmer",
        "line_number": 6,
        "context_before": [
            "from sumy.nlp.tokenizers import Tokenizer",
            "from sumy.summarizers.lex_rank import LexRankSummarizer as Summarizer"
        ],
        "context_after": [
            "from sumy.utils import get_stop_words",
            "import sys"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 7,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'sumy.utils'",
        "module": "utils.summarize",
        "line_content": "from sumy.utils import get_stop_words",
        "line_number": 7,
        "context_before": [
            "from sumy.summarizers.lex_rank import LexRankSummarizer as Summarizer",
            "from sumy.nlp.stemmers import Stemmer"
        ],
        "context_after": [
            "import sys",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 11,
        "column": 24,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"LANGUAGE\" doesn't conform to snake_case naming style",
        "module": "utils.summarize",
        "line_content": "def summarize(url=None, LANGUAGE='English', SENTENCES_COUNT=2):",
        "line_number": 11,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "parser = HtmlParser.from_url(url, Tokenizer(LANGUAGE))",
            "stemmer = Stemmer(LANGUAGE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 11,
        "column": 44,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Argument name \"SENTENCES_COUNT\" doesn't conform to snake_case naming style",
        "module": "utils.summarize",
        "line_content": "def summarize(url=None, LANGUAGE='English', SENTENCES_COUNT=2):",
        "line_number": 11,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "parser = HtmlParser.from_url(url, Tokenizer(LANGUAGE))",
            "stemmer = Stemmer(LANGUAGE)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 22,
        "column": 8,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "utils.summarize",
        "line_content": "except:",
        "line_number": 22,
        "context_before": [
            "result = result + ' ' + str(sentence)",
            ""
        ],
        "context_after": [
            "print(",
            "'\\n\\n Invalid Entry!, please Ensure you enter a valid web link \\n\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/summarize.py",
        "line": 8,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"sys\" should be placed before third party imports \"sumy.parsers.html.HtmlParser\", \"sumy.nlp.tokenizers.Tokenizer\", \"sumy.summarizers.lex_rank.LexRankSummarizer\", \"sumy.nlp.stemmers.Stemmer\", \"sumy.utils.get_stop_words\"",
        "module": "utils.summarize",
        "line_content": "import sys",
        "line_number": 8,
        "context_before": [
            "from sumy.nlp.stemmers import Stemmer",
            "from sumy.utils import get_stop_words"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/prepare.py",
        "line": 3,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"default_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.prepare",
        "line_content": "default_path = '.'",
        "line_number": 3,
        "context_before": [
            "import gzip",
            ""
        ],
        "context_after": [
            "",
            "with gzip.open(default_path + \"sumdata/train/train.article.txt.gz\", \"rb\") as gz:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'numpy'",
        "module": "utils.utils",
        "line_content": "import numpy as np",
        "line_number": 4,
        "context_before": [
            "import collections",
            "import pickle"
        ],
        "context_after": [
            "from nltk.tokenize import word_tokenize",
            "default_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 5,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'nltk.tokenize'",
        "module": "utils.utils",
        "line_content": "from nltk.tokenize import word_tokenize",
        "line_number": 5,
        "context_before": [
            "import pickle",
            "import numpy as np"
        ],
        "context_after": [
            "default_path = '.'",
            "train_article_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"default_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.utils",
        "line_content": "default_path = '.'",
        "line_number": 6,
        "context_before": [
            "import numpy as np",
            "from nltk.tokenize import word_tokenize"
        ],
        "context_after": [
            "train_article_path = '.'",
            "train_title_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"train_article_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.utils",
        "line_content": "train_article_path = '.'",
        "line_number": 7,
        "context_before": [
            "from nltk.tokenize import word_tokenize",
            "default_path = '.'"
        ],
        "context_after": [
            "train_title_path = '.'",
            "valid_article_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 8,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"train_title_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.utils",
        "line_content": "train_title_path = '.'",
        "line_number": 8,
        "context_before": [
            "default_path = '.'",
            "train_article_path = '.'"
        ],
        "context_after": [
            "valid_article_path = '.'",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 9,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"valid_article_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.utils",
        "line_content": "valid_article_path = '.'",
        "line_number": 9,
        "context_before": [
            "train_article_path = '.'",
            "train_title_path = '.'"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 19,
        "column": 8,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "module": "utils.utils",
        "line_content": "if not toy:",
        "line_number": 19,
        "context_before": [
            "def get_text_list(data_path, toy):",
            "with open(data_path, \"r\", encoding=\"utf-8\") as f:"
        ],
        "context_after": [
            "return [clean_str(x.strip()) for x in f.readlines()][:200000]",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 30,
        "column": 16,
        "message_id": "R1734",
        "message_type": "refactor",
        "symbol": "use-list-literal",
        "message": "Consider using [] instead of list()",
        "module": "utils.utils",
        "line_content": "words = list()",
        "line_number": 30,
        "context_before": [
            "train_title_list = get_text_list(train_title_path, toy)",
            ""
        ],
        "context_after": [
            "for sentence in train_article_list + train_title_list:",
            "for word in word_tokenize(sentence):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 36,
        "column": 20,
        "message_id": "R1735",
        "message_type": "refactor",
        "symbol": "use-dict-literal",
        "message": "Consider using '{}' instead of a call to 'dict'.",
        "module": "utils.utils",
        "line_content": "word_dict = dict()",
        "line_number": 36,
        "context_before": [
            "",
            "word_counter = collections.Counter(words).most_common()"
        ],
        "context_after": [
            "word_dict[\"<padding>\"] = 0",
            "word_dict[\"<unk>\"] = 1"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 74,
        "column": 4,
        "message_id": "R1705",
        "message_type": "refactor",
        "symbol": "no-else-return",
        "message": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
        "module": "utils.utils",
        "line_content": "if step == \"valid\":",
        "line_number": 74,
        "context_before": [
            "x = [d + (article_max_len - len(d)) * [word_dict[\"<padding>\"]] for d in x]",
            ""
        ],
        "context_after": [
            "return x",
            "else:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 88,
        "column": 8,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'epoch'",
        "module": "utils.utils",
        "line_content": "for epoch in range(num_epochs):",
        "line_number": 88,
        "context_before": [
            "",
            "num_batches_per_epoch = (len(inputs) - 1) // batch_size + 1"
        ],
        "context_after": [
            "for batch_num in range(num_batches_per_epoch):",
            "start_index = batch_num * batch_size"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/utils.py",
        "line": 105,
        "column": 20,
        "message_id": "R1734",
        "message_type": "refactor",
        "symbol": "use-list-literal",
        "message": "Consider using [] instead of list()",
        "module": "utils.utils",
        "line_content": "word_vec_list = list()",
        "line_number": 105,
        "context_before": [
            "word_vectors = pickle.load(handle)",
            ""
        ],
        "context_after": [
            "for _, word in sorted(reversed_dict.items()):",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 53,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (113/100)",
        "module": "utils.model",
        "line_content": "encoder_outputs, encoder_state_fw, encoder_state_bw = tf.contrib.rnn.stack_bidirectional_dynamic_rnn(",
        "line_number": 53,
        "context_before": [
            "bw_cells = [rnn.DropoutWrapper(cell) for cell in bw_cells]",
            ""
        ],
        "context_after": [
            "fw_cells, bw_cells, self.encoder_emb_inp,",
            "sequence_length=self.X_len, time_major=True, dtype=tf.float32)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 70,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "utils.model",
        "line_content": "self.num_hidden * 2, attention_states, memory_sequence_length=self.X_len, normalize=True)",
        "line_number": 70,
        "context_before": [
            "attention_states = tf.transpose(self.encoder_output, [1, 0, 2])",
            "attention_mechanism = tf.contrib.seq2seq.BahdanauAttention("
        ],
        "context_after": [
            "decoder_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism,",
            "attention_layer_size=self.num_hidden * 2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 71,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "utils.model",
        "line_content": "decoder_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism,",
        "line_number": 71,
        "context_before": [
            "attention_mechanism = tf.contrib.seq2seq.BahdanauAttention(",
            "self.num_hidden * 2, attention_states, memory_sequence_length=self.X_len, normalize=True)"
        ],
        "context_after": [
            "attention_layer_size=self.num_hidden * 2)",
            "initial_state = decoder_cell.zero_state("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 72,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (108/100)",
        "module": "utils.model",
        "line_content": "attention_layer_size=self.num_hidden * 2)",
        "line_number": 72,
        "context_before": [
            "self.num_hidden * 2, attention_states, memory_sequence_length=self.X_len, normalize=True)",
            "decoder_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism,"
        ],
        "context_after": [
            "initial_state = decoder_cell.zero_state(",
            "dtype=tf.float32, batch_size=self.batch_size)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 87,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (137/100)",
        "module": "utils.model",
        "line_content": "[self.logits, tf.zeros([self.batch_size, summary_max_len - tf.shape(self.logits)[1], self.vocabulary_size])], axis=1)",
        "line_number": 87,
        "context_before": [
            "self.projection_layer(self.decoder_output), perm=[1, 0, 2])",
            "self.logits_reshape = tf.concat("
        ],
        "context_after": [
            "else:",
            "tiled_encoder_output = tf.contrib.seq2seq.tile_batch("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 96,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (116/100)",
        "module": "utils.model",
        "line_content": "self.num_hidden * 2, tiled_encoder_output, memory_sequence_length=tiled_seq_len, normalize=True)",
        "line_number": 96,
        "context_before": [
            "self.X_len, multiplier=self.beam_width)",
            "attention_mechanism = tf.contrib.seq2seq.BahdanauAttention("
        ],
        "context_after": [
            "decoder_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism,",
            "attention_layer_size=self.num_hidden * 2)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 97,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (101/100)",
        "module": "utils.model",
        "line_content": "decoder_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism,",
        "line_number": 97,
        "context_before": [
            "attention_mechanism = tf.contrib.seq2seq.BahdanauAttention(",
            "self.num_hidden * 2, tiled_encoder_output, memory_sequence_length=tiled_seq_len, normalize=True)"
        ],
        "context_after": [
            "attention_layer_size=self.num_hidden * 2)",
            "initial_state = decoder_cell.zero_state("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 98,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (108/100)",
        "module": "utils.model",
        "line_content": "attention_layer_size=self.num_hidden * 2)",
        "line_number": 98,
        "context_before": [
            "self.num_hidden * 2, tiled_encoder_output, memory_sequence_length=tiled_seq_len, normalize=True)",
            "decoder_cell = tf.contrib.seq2seq.AttentionWrapper(decoder_cell, attention_mechanism,"
        ],
        "context_after": [
            "initial_state = decoder_cell.zero_state(",
            "dtype=tf.float32, batch_size=self.batch_size * self.beam_width)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 113,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (109/100)",
        "module": "utils.model",
        "line_content": "decoder, output_time_major=True, maximum_iterations=summary_max_len, scope=decoder_scope)",
        "line_number": 113,
        "context_before": [
            ")",
            "outputs, _, _ = tf.contrib.seq2seq.dynamic_decode("
        ],
        "context_after": [
            "self.prediction = tf.transpose(",
            "outputs.predicted_ids, perm=[1, 2, 0])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tensorflow'",
        "module": "utils.model",
        "line_content": "import tensorflow as tf",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "from tensorflow.contrib import rnn",
            "from utils import get_init_embedding"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tensorflow.contrib'",
        "module": "utils.model",
        "line_content": "from tensorflow.contrib import rnn",
        "line_number": 2,
        "context_before": [
            "import tensorflow as tf"
        ],
        "context_after": [
            "from utils import get_init_embedding",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 3,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'get_init_embedding' in module 'utils'",
        "module": "utils.model",
        "line_content": "from utils import get_init_embedding",
        "line_number": 3,
        "context_before": [
            "import tensorflow as tf",
            "from tensorflow.contrib import rnn"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 24,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"X\" doesn't conform to snake_case naming style",
        "module": "utils.model",
        "line_content": "self.X = tf.placeholder(tf.int32, [None, article_max_len])",
        "line_number": 24,
        "context_before": [
            "",
            "self.batch_size = tf.placeholder(tf.int32, (), name=\"batch_size\")"
        ],
        "context_after": [
            "self.X_len = tf.placeholder(tf.int32, [None])",
            "self.decoder_input = tf.placeholder(tf.int32, [None, summary_max_len])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 25,
        "column": 8,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Attribute name \"X_len\" doesn't conform to snake_case naming style",
        "module": "utils.model",
        "line_content": "self.X_len = tf.placeholder(tf.int32, [None])",
        "line_number": 25,
        "context_before": [
            "self.batch_size = tf.placeholder(tf.int32, (), name=\"batch_size\")",
            "self.X = tf.placeholder(tf.int32, [None, article_max_len])"
        ],
        "context_after": [
            "self.decoder_input = tf.placeholder(tf.int32, [None, summary_max_len])",
            "self.decoder_len = tf.placeholder(tf.int32, [None])"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 6,
        "column": 0,
        "message_id": "R0205",
        "message_type": "refactor",
        "symbol": "useless-object-inheritance",
        "message": "Class 'Model' inherits from object, can be safely removed from bases in python3",
        "module": "utils.model",
        "line_content": "class Model(object):",
        "line_number": 6,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def __init__(self, reversed_dict, article_max_len, summary_max_len, args, forward_only=False):",
            "self.vocabulary_size = len(reversed_dict)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 6,
        "column": 0,
        "message_id": "R0902",
        "message_type": "refactor",
        "symbol": "too-many-instance-attributes",
        "message": "Too many instance attributes (27/7)",
        "module": "utils.model",
        "line_content": "class Model(object):",
        "line_number": 6,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def __init__(self, reversed_dict, article_max_len, summary_max_len, args, forward_only=False):",
            "self.vocabulary_size = len(reversed_dict)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 7,
        "column": 4,
        "message_id": "R0913",
        "message_type": "refactor",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (6/5)",
        "module": "utils.model",
        "line_content": "def __init__(self, reversed_dict, article_max_len, summary_max_len, args, forward_only=False):",
        "line_number": 7,
        "context_before": [
            "",
            "class Model(object):"
        ],
        "context_after": [
            "self.vocabulary_size = len(reversed_dict)",
            "self.embedding_size = args.embedding_size"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 7,
        "column": 4,
        "message_id": "R0917",
        "message_type": "refactor",
        "symbol": "too-many-positional-arguments",
        "message": "Too many positional arguments (6/5)",
        "module": "utils.model",
        "line_content": "def __init__(self, reversed_dict, article_max_len, summary_max_len, args, forward_only=False):",
        "line_number": 7,
        "context_before": [
            "",
            "class Model(object):"
        ],
        "context_after": [
            "self.vocabulary_size = len(reversed_dict)",
            "self.embedding_size = args.embedding_size"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 7,
        "column": 4,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (31/15)",
        "module": "utils.model",
        "line_content": "def __init__(self, reversed_dict, article_max_len, summary_max_len, args, forward_only=False):",
        "line_number": 7,
        "context_before": [
            "",
            "class Model(object):"
        ],
        "context_after": [
            "self.vocabulary_size = len(reversed_dict)",
            "self.embedding_size = args.embedding_size"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 7,
        "column": 4,
        "message_id": "R0915",
        "message_type": "refactor",
        "symbol": "too-many-statements",
        "message": "Too many statements (74/50)",
        "module": "utils.model",
        "line_content": "def __init__(self, reversed_dict, article_max_len, summary_max_len, args, forward_only=False):",
        "line_number": 7,
        "context_before": [
            "",
            "class Model(object):"
        ],
        "context_after": [
            "self.vocabulary_size = len(reversed_dict)",
            "self.embedding_size = args.embedding_size"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/model.py",
        "line": 6,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (0/2)",
        "module": "utils.model",
        "line_content": "class Model(object):",
        "line_number": 6,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "def __init__(self, reversed_dict, article_max_len, summary_max_len, args, forward_only=False):",
            "self.vocabulary_size = len(reversed_dict)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'tensorflow'",
        "module": "utils.train",
        "line_content": "import tensorflow as tf",
        "line_number": 2,
        "context_before": [
            "import os"
        ],
        "context_after": [
            "import time",
            "from model import Model"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 4,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'model'",
        "module": "utils.train",
        "line_content": "from model import Model",
        "line_number": 4,
        "context_before": [
            "import tensorflow as tf",
            "import time"
        ],
        "context_after": [
            "from utils import build_dict, build_dataset, batch_iter",
            "start = time.perf_counter()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 5,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'build_dict' in module 'utils'",
        "module": "utils.train",
        "line_content": "from utils import build_dict, build_dataset, batch_iter",
        "line_number": 5,
        "context_before": [
            "import time",
            "from model import Model"
        ],
        "context_after": [
            "start = time.perf_counter()",
            "default_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 5,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'build_dataset' in module 'utils'",
        "module": "utils.train",
        "line_content": "from utils import build_dict, build_dataset, batch_iter",
        "line_number": 5,
        "context_before": [
            "import time",
            "from model import Model"
        ],
        "context_after": [
            "start = time.perf_counter()",
            "default_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 5,
        "column": 0,
        "message_id": "E0611",
        "message_type": "error",
        "symbol": "no-name-in-module",
        "message": "No name 'batch_iter' in module 'utils'",
        "module": "utils.train",
        "line_content": "from utils import build_dict, build_dataset, batch_iter",
        "line_number": 5,
        "context_before": [
            "import time",
            "from model import Model"
        ],
        "context_after": [
            "start = time.perf_counter()",
            "default_path = '.'"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 7,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"default_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.train",
        "line_content": "default_path = '.'",
        "line_number": 7,
        "context_before": [
            "from utils import build_dict, build_dataset, batch_iter",
            "start = time.perf_counter()"
        ],
        "context_after": [
            "",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 10,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Class name \"args\" doesn't conform to PascalCase naming style",
        "module": "utils.train",
        "line_content": "class args:",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 10,
        "column": 0,
        "message_id": "R0903",
        "message_type": "refactor",
        "symbol": "too-few-public-methods",
        "message": "Too few public methods (0/2)",
        "module": "utils.train",
        "line_content": "class args:",
        "line_number": 10,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "pass",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 34,
        "column": 32,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "utils.train",
        "line_content": "old_model_checkpoint_path = open(",
        "line_number": 34,
        "context_before": [
            "else:",
            "# if args.with_model:"
        ],
        "context_after": [
            "default_path + 'saved_model/checkpoint', 'r')",
            "old_model_checkpoint_path = \"\".join("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 36,
        "column": 4,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"old_model_checkpoint_path\" doesn't conform to UPPER_CASE naming style",
        "module": "utils.train",
        "line_content": "old_model_checkpoint_path = \"\".join(",
        "line_number": 36,
        "context_before": [
            "old_model_checkpoint_path = open(",
            "default_path + 'saved_model/checkpoint', 'r')"
        ],
        "context_after": [
            "[",
            "default_path + \"saved_model/\","
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 98,
        "column": 18,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "utils.train",
        "line_content": "print(\"step {0}: loss = {1}\".format(step, loss))",
        "line_number": 98,
        "context_before": [
            "",
            "if step % 1000 == 0:"
        ],
        "context_after": [
            "",
            "if step % num_batches_per_epoch == 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 105,
        "column": 18,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "utils.train",
        "line_content": "print(\" Epoch {0}: Model is saved.\".format(step // num_batches_per_epoch),",
        "line_number": 105,
        "context_before": [
            "saver.save(sess, default_path +",
            "\"saved_model/model.ckpt\", global_step=step)"
        ],
        "context_after": [
            "\"Elapsed: {:0>2}:{:0>2}:{:05.2f}\".format(int(hours), int(minutes), seconds), \"\\n\")"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 106,
        "column": 18,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "utils.train",
        "line_content": "\"Elapsed: {:0>2}:{:0>2}:{:05.2f}\".format(int(hours), int(minutes), seconds), \"\\n\")",
        "line_number": 106,
        "context_before": [
            "\"saved_model/model.ckpt\", global_step=step)",
            "print(\" Epoch {0}: Model is saved.\".format(step // num_batches_per_epoch),"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"time\" should be placed before third party import \"tensorflow\"",
        "module": "utils.train",
        "line_content": "import time",
        "line_number": 3,
        "context_before": [
            "import os",
            "import tensorflow as tf"
        ],
        "context_after": [
            "from model import Model",
            "from utils import build_dict, build_dataset, batch_iter"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Web_page_summation/utils/train.py",
        "line": 34,
        "column": 32,
        "message_id": "R1732",
        "message_type": "refactor",
        "symbol": "consider-using-with",
        "message": "Consider using 'with' for resource-allocating operations",
        "module": "utils.train",
        "line_content": "old_model_checkpoint_path = open(",
        "line_number": 34,
        "context_before": [
            "else:",
            "# if args.with_model:"
        ],
        "context_after": [
            "default_path + 'saved_model/checkpoint', 'r')",
            "old_model_checkpoint_path = \"\".join("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 85,
        "column": 0,
        "message_id": "C0325",
        "message_type": "convention",
        "symbol": "superfluous-parens",
        "message": "Unnecessary parens after 'while' keyword",
        "module": "main",
        "line_content": "while(True):",
        "line_number": 85,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "try:",
            "pages = int("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'requests'",
        "module": "main",
        "line_content": "import requests",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import os",
            "from bs4 import BeautifulSoup, SoupStrainer"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 3,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'bs4'",
        "module": "main",
        "line_content": "from bs4 import BeautifulSoup, SoupStrainer",
        "line_number": 3,
        "context_before": [
            "import requests",
            "import os"
        ],
        "context_after": [
            "# Makes Output Directory if it does not exist",
            "if not os.path.exists(os.path.join(os.getcwd(), 'HackerNews')):"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 7,
        "column": 0,
        "message_id": "W0105",
        "message_type": "warning",
        "symbol": "pointless-string-statement",
        "message": "String statement has no effect",
        "module": "main",
        "line_content": "'''",
        "line_number": 7,
        "context_before": [
            "if not os.path.exists(os.path.join(os.getcwd(), 'HackerNews')):",
            "os.makedirs(os.path.join(os.getcwd(), 'HackerNews'))"
        ],
        "context_after": [
            "@params page_no: The page number of HackerNews to fetch.",
            "Adding only page number in order to add multiprocess support in future."
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 15,
        "column": 0,
        "message_id": "R0914",
        "message_type": "refactor",
        "symbol": "too-many-locals",
        "message": "Too many local variables (24/15)",
        "module": "main",
        "line_content": "def fetch(page_no, verbose=False):",
        "line_number": 15,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# Should be unreachable, but just in case",
            "if page_no <= 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 15,
        "column": 10,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'page_no' from outer scope (line 94)",
        "module": "main",
        "line_content": "def fetch(page_no, verbose=False):",
        "line_number": 15,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# Should be unreachable, but just in case",
            "if page_no <= 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 15,
        "column": 19,
        "message_id": "W0621",
        "message_type": "warning",
        "symbol": "redefined-outer-name",
        "message": "Redefining name 'verbose' from outer scope (line 90)",
        "module": "main",
        "line_content": "def fetch(page_no, verbose=False):",
        "line_number": 15,
        "context_before": [
            "",
            ""
        ],
        "context_after": [
            "# Should be unreachable, but just in case",
            "if page_no <= 0:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 22,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "print('Fetching Page {}...'.format(i))",
        "line_number": 22,
        "context_before": [
            "i = page_no",
            "if verbose:"
        ],
        "context_after": [
            "try:",
            "res = requests.get('https://news.ycombinator.com/?p=' + str(i))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 29,
        "column": 13,
        "message_id": "W1514",
        "message_type": "warning",
        "symbol": "unspecified-encoding",
        "message": "Using open without explicitly specifying an encoding",
        "module": "main",
        "line_content": "with open(os.path.join('HackerNews', 'NewsPage{}.txt'.format(i)), 'w+') as f:",
        "line_number": 29,
        "context_before": [
            "tdtitle = soup.find_all('td', attrs={'class': 'title'})",
            "tdmetrics = soup.find_all('td', attrs={'class': 'subtext'})"
        ],
        "context_after": [
            "f.write('-' * 80)",
            "f.write('\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 29,
        "column": 45,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "with open(os.path.join('HackerNews', 'NewsPage{}.txt'.format(i)), 'w+') as f:",
        "line_number": 29,
        "context_before": [
            "tdtitle = soup.find_all('td', attrs={'class': 'title'})",
            "tdmetrics = soup.find_all('td', attrs={'class': 'subtext'})"
        ],
        "context_after": [
            "f.write('-' * 80)",
            "f.write('\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 32,
        "column": 20,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "f.write('Page {}'.format(i))",
        "line_number": 32,
        "context_before": [
            "f.write('-' * 80)",
            "f.write('\\n')"
        ],
        "context_after": [
            "tdtitle = soup.find_all('td', attrs={'class': 'title'})",
            "tdrank = soup.find_all("
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 80,
        "column": 14,
        "message_id": "C0209",
        "message_type": "convention",
        "symbol": "consider-using-f-string",
        "message": "Formatting a regular string which could be an f-string",
        "module": "main",
        "line_content": "print('Connection Failed for page {}'.format(i))",
        "line_number": 80,
        "context_before": [
            "f.write('\\n' + '-' * 80 + '\\n')",
            "except (requests.ConnectionError, requests.packages.urllib3.exceptions.ConnectionError) as e:"
        ],
        "context_after": [
            "except requests.RequestException as e:",
            "print(\"Some ambiguous Request Exception occurred. The exception is \" + str(e))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 79,
        "column": 4,
        "message_id": "W0612",
        "message_type": "warning",
        "symbol": "unused-variable",
        "message": "Unused variable 'e'",
        "module": "main",
        "line_content": "except (requests.ConnectionError, requests.packages.urllib3.exceptions.ConnectionError) as e:",
        "line_number": 79,
        "context_before": [
            "time.text if time else '\\nPosted: Could not find when the article was posted')",
            "f.write('\\n' + '-' * 80 + '\\n')"
        ],
        "context_after": [
            "print('Connection Failed for page {}'.format(i))",
            "except requests.RequestException as e:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/Scrape_Hacker_News/main.py",
        "line": 2,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"os\" should be placed before third party import \"requests\"",
        "module": "main",
        "line_content": "import os",
        "line_number": 2,
        "context_before": [
            "import requests"
        ],
        "context_after": [
            "from bs4 import BeautifulSoup, SoupStrainer",
            "# Makes Output Directory if it does not exist"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 10,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "PDF__TO__MP3",
        "line_content": "try:",
        "line_number": 10,
        "context_before": [
            "with open(location, 'rb') as book:",
            ""
        ],
        "context_after": [
            "reader = PyPDF2.PdfFileReader(book)",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 11,
        "column": 37,
        "message_id": "C0303",
        "message_type": "convention",
        "symbol": "trailing-whitespace",
        "message": "Trailing whitespace",
        "module": "PDF__TO__MP3",
        "line_content": "reader = PyPDF2.PdfFileReader(book)",
        "line_number": 11,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "",
            "audio = pyttsx3.init()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 11,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "reader = PyPDF2.PdfFileReader(book)",
        "line_number": 11,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "",
            "audio = pyttsx3.init()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 13,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "audio = pyttsx3.init()",
        "line_number": 13,
        "context_before": [
            "reader = PyPDF2.PdfFileReader(book)",
            ""
        ],
        "context_after": [
            "",
            "print('\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 15,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('\\n')",
        "line_number": 15,
        "context_before": [
            "audio = pyttsx3.init()",
            ""
        ],
        "context_after": [
            "print('Recommended Speed ------> 115')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 16,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('Recommended Speed ------> 115')",
        "line_number": 16,
        "context_before": [
            "",
            "print('\\n')"
        ],
        "context_after": [
            "",
            "set_speed = input('Please Enter Your Prefered Reading Speed --------> ')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 18,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "set_speed = input('Please Enter Your Prefered Reading Speed --------> ')",
        "line_number": 18,
        "context_before": [
            "print('Recommended Speed ------> 115')",
            ""
        ],
        "context_after": [
            "audio.setProperty('rate',int(set_speed))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 19,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "audio.setProperty('rate',int(set_speed))",
        "line_number": 19,
        "context_before": [
            "",
            "set_speed = input('Please Enter Your Prefered Reading Speed --------> ')"
        ],
        "context_after": [
            "",
            "total_pages = reader.numPages"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 21,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "total_pages = reader.numPages",
        "line_number": 21,
        "context_before": [
            "audio.setProperty('rate',int(set_speed))",
            ""
        ],
        "context_after": [
            "",
            "print('\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 23,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('\\n')",
        "line_number": 23,
        "context_before": [
            "total_pages = reader.numPages",
            ""
        ],
        "context_after": [
            "print('Location of File  -------> ' + location)",
            "print('\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 24,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('Location of File  -------> ' + location)",
        "line_number": 24,
        "context_before": [
            "",
            "print('\\n')"
        ],
        "context_after": [
            "print('\\n')",
            "print('Total Number of Pages -------> ' + str(total_pages))"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 25,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('\\n')",
        "line_number": 25,
        "context_before": [
            "print('\\n')",
            "print('Location of File  -------> ' + location)"
        ],
        "context_after": [
            "print('Total Number of Pages -------> ' + str(total_pages))",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 26,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('Total Number of Pages -------> ' + str(total_pages))",
        "line_number": 26,
        "context_before": [
            "print('Location of File  -------> ' + location)",
            "print('\\n')"
        ],
        "context_after": [
            "",
            "try:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 28,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "try:",
        "line_number": 28,
        "context_before": [
            "print('Total Number of Pages -------> ' + str(total_pages))",
            ""
        ],
        "context_after": [
            "for page in range(total_pages):",
            "next_page = reader.getPage(page)"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 29,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "PDF__TO__MP3",
        "line_content": "for page in range(total_pages):",
        "line_number": 29,
        "context_before": [
            "",
            "try:"
        ],
        "context_after": [
            "next_page = reader.getPage(page)",
            "content = next_page.extractText()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 30,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "PDF__TO__MP3",
        "line_content": "next_page = reader.getPage(page)",
        "line_number": 30,
        "context_before": [
            "try:",
            "for page in range(total_pages):"
        ],
        "context_after": [
            "content = next_page.extractText()",
            "full_text += content"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 31,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "PDF__TO__MP3",
        "line_content": "content = next_page.extractText()",
        "line_number": 31,
        "context_before": [
            "for page in range(total_pages):",
            "next_page = reader.getPage(page)"
        ],
        "context_after": [
            "full_text += content",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 32,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 4 spaces, expected 16",
        "module": "PDF__TO__MP3",
        "line_content": "full_text += content",
        "line_number": 32,
        "context_before": [
            "next_page = reader.getPage(page)",
            "content = next_page.extractText()"
        ],
        "context_after": [
            "",
            "audio.save_to_file(full_text, 'output.mp3')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 34,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "PDF__TO__MP3",
        "line_content": "audio.save_to_file(full_text, 'output.mp3')",
        "line_number": 34,
        "context_before": [
            "full_text += content",
            ""
        ],
        "context_after": [
            "print(\"Converting... \\n Please Wait....\")",
            "audio.runAndWait()"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 35,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "PDF__TO__MP3",
        "line_content": "print(\"Converting... \\n Please Wait....\")",
        "line_number": 35,
        "context_before": [
            "",
            "audio.save_to_file(full_text, 'output.mp3')"
        ],
        "context_after": [
            "audio.runAndWait()",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 36,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "PDF__TO__MP3",
        "line_content": "audio.runAndWait()",
        "line_number": 36,
        "context_before": [
            "audio.save_to_file(full_text, 'output.mp3')",
            "print(\"Converting... \\n Please Wait....\")"
        ],
        "context_after": [
            "",
            "except:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 38,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "except:",
        "line_number": 38,
        "context_before": [
            "audio.runAndWait()",
            ""
        ],
        "context_after": [
            "print('Task Failed Successfully! ')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 39,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 3 spaces, expected 12",
        "module": "PDF__TO__MP3",
        "line_content": "print('Task Failed Successfully! ')",
        "line_number": 39,
        "context_before": [
            "",
            "except:"
        ],
        "context_after": [
            "",
            "except:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 41,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 1 spaces, expected 4",
        "module": "PDF__TO__MP3",
        "line_content": "except:",
        "line_number": 41,
        "context_before": [
            "print('Task Failed Successfully! ')",
            ""
        ],
        "context_after": [
            "print('\\n')",
            "print('---------> Cannot Read PDF <---------')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 42,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('\\n')",
        "line_number": 42,
        "context_before": [
            "",
            "except:"
        ],
        "context_after": [
            "print('---------> Cannot Read PDF <---------')",
            "print('\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 43,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('---------> Cannot Read PDF <---------')",
        "line_number": 43,
        "context_before": [
            "except:",
            "print('\\n')"
        ],
        "context_after": [
            "print('\\n')",
            "print('--------->Invalid PDF format <--------')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 44,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('\\n')",
        "line_number": 44,
        "context_before": [
            "print('\\n')",
            "print('---------> Cannot Read PDF <---------')"
        ],
        "context_after": [
            "print('--------->Invalid PDF format <--------')",
            "print('\\n')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 45,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('--------->Invalid PDF format <--------')",
        "line_number": 45,
        "context_before": [
            "print('---------> Cannot Read PDF <---------')",
            "print('\\n')"
        ],
        "context_after": [
            "print('\\n')",
            "print('OR maybe there is something wrong with your brain that you are trying \\n to convert a file that is not in .pdf format')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 46,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('\\n')",
        "line_number": 46,
        "context_before": [
            "print('\\n')",
            "print('--------->Invalid PDF format <--------')"
        ],
        "context_after": [
            "print('OR maybe there is something wrong with your brain that you are trying \\n to convert a file that is not in .pdf format')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 47,
        "column": 0,
        "message_id": "C0304",
        "message_type": "convention",
        "symbol": "missing-final-newline",
        "message": "Final newline missing",
        "module": "PDF__TO__MP3",
        "line_content": "print('OR maybe there is something wrong with your brain that you are trying \\n to convert a file that is not in .pdf format')",
        "line_number": 47,
        "context_before": [
            "print('--------->Invalid PDF format <--------')",
            "print('\\n')"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 47,
        "column": 0,
        "message_id": "C0301",
        "message_type": "convention",
        "symbol": "line-too-long",
        "message": "Line too long (128/100)",
        "module": "PDF__TO__MP3",
        "line_content": "print('OR maybe there is something wrong with your brain that you are trying \\n to convert a file that is not in .pdf format')",
        "line_number": 47,
        "context_before": [
            "print('--------->Invalid PDF format <--------')",
            "print('\\n')"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 47,
        "column": 0,
        "message_id": "W0311",
        "message_type": "warning",
        "symbol": "bad-indentation",
        "message": "Bad indentation. Found 2 spaces, expected 8",
        "module": "PDF__TO__MP3",
        "line_content": "print('OR maybe there is something wrong with your brain that you are trying \\n to convert a file that is not in .pdf format')",
        "line_number": 47,
        "context_before": [
            "print('--------->Invalid PDF format <--------')",
            "print('\\n')"
        ],
        "context_after": []
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 1,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Module name \"PDF__TO__MP3\" doesn't conform to snake_case naming style",
        "module": "PDF__TO__MP3",
        "line_content": "import pyttsx3",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import PyPDF2",
            "from tkinter import filedialog"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 1,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'pyttsx3'",
        "module": "PDF__TO__MP3",
        "line_content": "import pyttsx3",
        "line_number": 1,
        "context_before": [],
        "context_after": [
            "import PyPDF2",
            "from tkinter import filedialog"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 2,
        "column": 0,
        "message_id": "E0401",
        "message_type": "error",
        "symbol": "import-error",
        "message": "Unable to import 'PyPDF2'",
        "module": "PDF__TO__MP3",
        "line_content": "import PyPDF2",
        "line_number": 2,
        "context_before": [
            "import pyttsx3"
        ],
        "context_after": [
            "from tkinter import filedialog",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 6,
        "column": 0,
        "message_id": "C0103",
        "message_type": "convention",
        "symbol": "invalid-name",
        "message": "Constant name \"full_text\" doesn't conform to UPPER_CASE naming style",
        "module": "PDF__TO__MP3",
        "line_content": "full_text =\"\"",
        "line_number": 6,
        "context_before": [
            "",
            "location = filedialog.askopenfilename()"
        ],
        "context_after": [
            "",
            "with open(location, 'rb') as book:"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 41,
        "column": 1,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "PDF__TO__MP3",
        "line_content": "except:",
        "line_number": 41,
        "context_before": [
            "print('Task Failed Successfully! ')",
            ""
        ],
        "context_after": [
            "print('\\n')",
            "print('---------> Cannot Read PDF <---------')"
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 38,
        "column": 2,
        "message_id": "W0702",
        "message_type": "warning",
        "symbol": "bare-except",
        "message": "No exception type(s) specified",
        "module": "PDF__TO__MP3",
        "line_content": "except:",
        "line_number": 38,
        "context_before": [
            "audio.runAndWait()",
            ""
        ],
        "context_after": [
            "print('Task Failed Successfully! ')",
            ""
        ]
    },
    {
        "file_path": "python-mini-projects/projects/PDF to MP3/PDF__TO__MP3.py",
        "line": 3,
        "column": 0,
        "message_id": "C0411",
        "message_type": "convention",
        "symbol": "wrong-import-order",
        "message": "standard import \"tkinter.filedialog\" should be placed before third party imports \"pyttsx3\", \"PyPDF2\"",
        "module": "PDF__TO__MP3",
        "line_content": "from tkinter import filedialog",
        "line_number": 3,
        "context_before": [
            "import pyttsx3",
            "import PyPDF2"
        ],
        "context_after": [
            "",
            "location = filedialog.askopenfilename()"
        ]
    }
]